if (is.character(flm))
fl <- c(min(Y$bottom.freq[Y$.sgnl.temp == sgnl]) + as.numeric(flm[1]), max(Y$top.freq[Y$.sgnl.temp == sgnl]) + as.numeric(flm[2])) else
fl <- flm
if (fl[1] < 0) fl[1] <- 0
# start screen
screen(i)
par(mar = c(0, 0, 0, 0), new = TRUE)
# plot spectrogram
warbleR:::spectro_wrblr_int2(
wave = wave,
palette = pal,
axisX = FALSE,
axisY = FALSE,
grid = FALSE,
collevels = collevels,
flim = fl,
wl = wl,
...
)
# add vertical lines
# add dotted lines
abline(
v = c(mar, X$end[indx] - X$start[indx] + mar) + if (X$start[indx] - mar < 0)  X$start[indx] - mar else 0,
col = "white",
lty = 3,
lwd = 1.5
)
if (spectrum){
# set screen
i <- i + 1
screen(i)
par(mar = c(0, 0, 0, 0), new = TRUE)
# get power spectrum
spc <- spec(wave = wave, plot = FALSE)
#smooth
spc[,2] <- warbleR::envelope(x = spc[,2], ssmooth = wl / 3)
# filter to flim
spc <- spc[spc[, 1] > fl[1] & spc[, 1] < fl[2], ]
# set white plot
plot(x = spc[,2], y = spc[,1], type = "l", frame.plot = FALSE,
yaxt = "n",
xaxt = "n")
polygon(rbind(c(0, 0), spc[, 2:1]), col = pol_fill)
box()
}
# plot frequency ticks
if (page_layout[i, 1] == min(page_layout[1:(nrow * ncol * (sum(c(envelope, spectrum)) + 1)), 1])) {
at_freq <-
pretty(seq(0, wave@samp.rate / 2000, length.out = 10)[-10], n = 10)
axis(2, at = at_freq, labels = c(at_freq[-length(at_freq)], ""))
}
if (envelope){
# set screen
i <- i + 1
screen(i)
par(mar = c(0, 0, 0, 0), new = TRUE)
# get power spectrum
envlp <- warbleR::envelope(x = seewave::ffilter(wave = wave, from = fl[1] * 1000, to = fl[2]* 1000), ssmooth = wl)
# set white plot
plot(x = seq(0, duration(wave), along.with = envlp), y = envlp, type = "l", frame.plot = FALSE,
yaxt = "n",
xaxt = "n")
polygon(rbind(c(0, 0), cbind(seq(0, duration(wave), along.with = envlp), envlp)), col = pol_fill)
box()
}
# plot time ticks
at_time <-
pretty(seq(0, duration(wave), length.out = 10)[-10], n = 4)
axis(1, at = at_time, labels = c("", at_time[c(-1,-length(at_time))], ""))
}
}
# get combination of distances and sound id to loop over it
grd <-
expand.grid(distance = distances, sound.id.seq = unique(Y$sound.id.seq))
# extract data subset for a page
Y <- soundid_X[soundid_X$page == x, ]
x = 1
# extract data subset for a page
Y <- soundid_X[soundid_X$page == x, ]
# get combination of distances and sound id to loop over it
grd <-
expand.grid(distance = distances, sound.id.seq = unique(Y$sound.id.seq))
# add screen number for spectrogram
grd$screen <-
seq(from = 1, to = nrow * ncol * (sum(c(envelope, spectrum)) + 1), by = sum(spectrum, envelope) + 1)[seq_len(nrow(grd))]
# loop to create spectrograms
for (i in grd$screen) {
# get id of signal
sgnl <-
Y$.sgnl.temp[Y$distance == grd$distance[grd$screen == i] &
Y$sound.id.seq == grd$sound.id.seq[grd$screen ==i]]
# if signal exists
if (length(sgnl) > 0){
# get row index for signals in X
indx <- which(X$.sgnl.temp == sgnl)
# read wave
wave <-
read_wave(
X = X,
index = indx,
from = if (X$start[indx] - mar < 0)
0
else
X$start[indx] - mar,
to = X$end[indx] + mar,
path = path
)
# set frequency limits
if (is.character(flm))
fl <- c(min(Y$bottom.freq[Y$.sgnl.temp == sgnl]) + as.numeric(flm[1]), max(Y$top.freq[Y$.sgnl.temp == sgnl]) + as.numeric(flm[2])) else
fl <- flm
if (fl[1] < 0) fl[1] <- 0
# start screen
screen(i)
par(mar = c(0, 0, 0, 0), new = TRUE)
# plot spectrogram
warbleR:::spectro_wrblr_int2(
wave = wave,
palette = pal,
axisX = FALSE,
axisY = FALSE,
grid = FALSE,
collevels = collevels,
flim = fl,
wl = wl,
...
)
# add vertical lines
# add dotted lines
abline(
v = c(mar, X$end[indx] - X$start[indx] + mar) + if (X$start[indx] - mar < 0)  X$start[indx] - mar else 0,
col = "white",
lty = 3,
lwd = 1.5
)
if (spectrum){
# set screen
i <- i + 1
screen(i)
par(mar = c(0, 0, 0, 0), new = TRUE)
# get power spectrum
spc <- spec(wave = wave, plot = FALSE)
#smooth
spc[,2] <- warbleR::envelope(x = spc[,2], ssmooth = wl / 3)
# filter to flim
spc <- spc[spc[, 1] > fl[1] & spc[, 1] < fl[2], ]
# set white plot
plot(x = spc[,2], y = spc[,1], type = "l", frame.plot = FALSE,
yaxt = "n",
xaxt = "n")
polygon(rbind(c(0, 0), spc[, 2:1]), col = pol_fill)
box()
}
# plot frequency ticks
if (page_layout[i, 1] == min(page_layout[1:(nrow * ncol * (sum(c(envelope, spectrum)) + 1)), 1])) {
at_freq <-
pretty(seq(0, wave@samp.rate / 2000, length.out = 10)[-10], n = 10)
axis(2, at = at_freq, labels = c(at_freq[-length(at_freq)], ""))
}
if (envelope){
# set screen
i <- i + 1
screen(i)
par(mar = c(0, 0, 0, 0), new = TRUE)
# get power spectrum
envlp <- warbleR::envelope(x = seewave::ffilter(wave = wave, from = fl[1] * 1000, to = fl[2]* 1000), ssmooth = wl)
# set white plot
plot(x = seq(0, duration(wave), along.with = envlp), y = envlp, type = "l", frame.plot = FALSE,
yaxt = "n",
xaxt = "n")
polygon(rbind(c(0, 0), cbind(seq(0, duration(wave), along.with = envlp), envlp)), col = pol_fill)
box()
}
# plot time ticks
at_time <-
pretty(seq(0, duration(wave), length.out = 10)[-10], n = 4)
axis(1, at = at_time, labels = c("", at_time[c(-1,-length(at_time))], ""))
}
}
flm <- flim
# loop to create spectrograms
for (i in grd$screen) {
# get id of signal
sgnl <-
Y$.sgnl.temp[Y$distance == grd$distance[grd$screen == i] &
Y$sound.id.seq == grd$sound.id.seq[grd$screen ==i]]
# if signal exists
if (length(sgnl) > 0){
# get row index for signals in X
indx <- which(X$.sgnl.temp == sgnl)
# read wave
wave <-
read_wave(
X = X,
index = indx,
from = if (X$start[indx] - mar < 0)
0
else
X$start[indx] - mar,
to = X$end[indx] + mar,
path = path
)
# set frequency limits
if (is.character(flm))
fl <- c(min(Y$bottom.freq[Y$.sgnl.temp == sgnl]) + as.numeric(flm[1]), max(Y$top.freq[Y$.sgnl.temp == sgnl]) + as.numeric(flm[2])) else
fl <- flm
if (fl[1] < 0) fl[1] <- 0
# start screen
screen(i)
par(mar = c(0, 0, 0, 0), new = TRUE)
# plot spectrogram
warbleR:::spectro_wrblr_int2(
wave = wave,
palette = pal,
axisX = FALSE,
axisY = FALSE,
grid = FALSE,
collevels = collevels,
flim = fl,
wl = wl,
...
)
# add vertical lines
# add dotted lines
abline(
v = c(mar, X$end[indx] - X$start[indx] + mar) + if (X$start[indx] - mar < 0)  X$start[indx] - mar else 0,
col = "white",
lty = 3,
lwd = 1.5
)
if (spectrum){
# set screen
i <- i + 1
screen(i)
par(mar = c(0, 0, 0, 0), new = TRUE)
# get power spectrum
spc <- spec(wave = wave, plot = FALSE)
#smooth
spc[,2] <- warbleR::envelope(x = spc[,2], ssmooth = wl / 3)
# filter to flim
spc <- spc[spc[, 1] > fl[1] & spc[, 1] < fl[2], ]
# set white plot
plot(x = spc[,2], y = spc[,1], type = "l", frame.plot = FALSE,
yaxt = "n",
xaxt = "n")
polygon(rbind(c(0, 0), spc[, 2:1]), col = pol_fill)
box()
}
# plot frequency ticks
if (page_layout[i, 1] == min(page_layout[1:(nrow * ncol * (sum(c(envelope, spectrum)) + 1)), 1])) {
at_freq <-
pretty(seq(0, wave@samp.rate / 2000, length.out = 10)[-10], n = 10)
axis(2, at = at_freq, labels = c(at_freq[-length(at_freq)], ""))
}
if (envelope){
# set screen
i <- i + 1
screen(i)
par(mar = c(0, 0, 0, 0), new = TRUE)
# get power spectrum
envlp <- warbleR::envelope(x = seewave::ffilter(wave = wave, from = fl[1] * 1000, to = fl[2]* 1000), ssmooth = wl)
# set white plot
plot(x = seq(0, duration(wave), along.with = envlp), y = envlp, type = "l", frame.plot = FALSE,
yaxt = "n",
xaxt = "n")
polygon(rbind(c(0, 0), cbind(seq(0, duration(wave), along.with = envlp), envlp)), col = pol_fill)
box()
}
# plot time ticks
at_time <-
pretty(seq(0, duration(wave), length.out = 10)[-10], n = 4)
axis(1, at = at_time, labels = c("", at_time[c(-1,-length(at_time))], ""))
}
}
# loop to create spectrograms
for (i in grd$screen) {
# get id of signal
sgnl <-
Y$.sgnl.temp[Y$distance == grd$distance[grd$screen == i] &
Y$sound.id.seq == grd$sound.id.seq[grd$screen ==i]]
# if signal exists
if (length(sgnl) > 0){
# get row index for signals in X
indx <- which(X$.sgnl.temp == sgnl)
# read wave
wave <-
read_wave(
X = X,
index = indx,
from = if (X$start[indx] - mar < 0)
0
else
X$start[indx] - mar,
to = X$end[indx] + mar,
path = path
)
# set frequency limits
if (is.character(flm))
fl <- c(min(Y$bottom.freq[Y$.sgnl.temp == sgnl]) + as.numeric(flm[1]), max(Y$top.freq[Y$.sgnl.temp == sgnl]) + as.numeric(flm[2])) else
fl <- flm
if (fl[1] < 0) fl[1] <- 0
# start screen
screen(i)
par(mar = c(0, 0, 0, 0), new = TRUE)
# plot spectrogram
warbleR:::spectro_wrblr_int2(
wave = wave,
palette = pal,
axisX = FALSE,
axisY = FALSE,
grid = FALSE,
collevels = collevels,
flim = fl,
wl = wl
)
# add vertical lines
# add dotted lines
abline(
v = c(mar, X$end[indx] - X$start[indx] + mar) + if (X$start[indx] - mar < 0)  X$start[indx] - mar else 0,
col = "white",
lty = 3,
lwd = 1.5
)
if (spectrum){
# set screen
i <- i + 1
screen(i)
par(mar = c(0, 0, 0, 0), new = TRUE)
# get power spectrum
spc <- spec(wave = wave, plot = FALSE)
#smooth
spc[,2] <- warbleR::envelope(x = spc[,2], ssmooth = wl / 3)
# filter to flim
spc <- spc[spc[, 1] > fl[1] & spc[, 1] < fl[2], ]
# set white plot
plot(x = spc[,2], y = spc[,1], type = "l", frame.plot = FALSE,
yaxt = "n",
xaxt = "n")
polygon(rbind(c(0, 0), spc[, 2:1]), col = pol_fill)
box()
}
# plot frequency ticks
if (page_layout[i, 1] == min(page_layout[1:(nrow * ncol * (sum(c(envelope, spectrum)) + 1)), 1])) {
at_freq <-
pretty(seq(0, wave@samp.rate / 2000, length.out = 10)[-10], n = 10)
axis(2, at = at_freq, labels = c(at_freq[-length(at_freq)], ""))
}
if (envelope){
# set screen
i <- i + 1
screen(i)
par(mar = c(0, 0, 0, 0), new = TRUE)
# get power spectrum
envlp <- warbleR::envelope(x = seewave::ffilter(wave = wave, from = fl[1] * 1000, to = fl[2]* 1000), ssmooth = wl)
# set white plot
plot(x = seq(0, duration(wave), along.with = envlp), y = envlp, type = "l", frame.plot = FALSE,
yaxt = "n",
xaxt = "n")
polygon(rbind(c(0, 0), cbind(seq(0, duration(wave), along.with = envlp), envlp)), col = pol_fill)
box()
}
# plot time ticks
at_time <-
pretty(seq(0, duration(wave), length.out = 10)[-10], n = 4)
axis(1, at = at_time, labels = c("", at_time[c(-1,-length(at_time))], ""))
}
}
# add vertical lines
# add dotted lines
abline(
v = c(mar, X$end[indx] - X$start[indx] + mar) + if (X$start[indx] - mar < 0)  X$start[indx] - mar else 0,
col = "white",
lty = 3,
lwd = 1.5
)
if (spectrum){
# set screen
i <- i + 1
screen(i)
par(mar = c(0, 0, 0, 0), new = TRUE)
# get power spectrum
spc <- spec(wave = wave, plot = FALSE)
#smooth
spc[,2] <- warbleR::envelope(x = spc[,2], ssmooth = wl / 3)
# filter to flim
spc <- spc[spc[, 1] > fl[1] & spc[, 1] < fl[2], ]
# set white plot
plot(x = spc[,2], y = spc[,1], type = "l", frame.plot = FALSE,
yaxt = "n",
xaxt = "n")
polygon(rbind(c(0, 0), spc[, 2:1]), col = pol_fill)
box()
}
# plot distance labels
dist_labs <- paste(distances, "m")
par(mar = c(0, 0, 0, 0),
bg = bg_titles,
new = TRUE)
# add labels
for (e in seq_len(ncol) + ((nrow * (ncol) * (sum(c(envelope, spectrum)) + 1)) + nrow)) {
screen(e)
# par(mar = c(0, 0, 0, 0))
par(mar = c(0, 0, 0, 0),
bg = bg_titles,
new = TRUE)
plot(
1,
frame.plot = FALSE,
type = "n",
yaxt = "n",
xaxt = "n"
)
text(
x = 1,
y = 1,
dist_labs[e - ((nrow * (ncol) * (sum(c(envelope, spectrum)) + 1)) + nrow)],
cex = 1.2,
col = "white",
font = 2
)
box()
# get sound id transect labels
soundid_transect_labs <-
unique(Y$sound.id.transect[!Y$.sgnl.temp %in% Y$reference])
par(mar = c(0, 0, 0, 0),
bg = bg_titles,
new = TRUE)
# plot sound id transect labels
for (e in (seq_len(nrow) +  (nrow * ncol * (sum(c(envelope, spectrum)) + 1)))[seq_along(soundid_transect_labs)]) {
print(e)
screen(e)
# par(mar = c(0, 0, 0, 0))
par(mar = c(0, 0, 0, 0),
bg = bg_titles,
new = TRUE)
plot(
1,
frame.plot = FALSE,
type = "n",
yaxt = "n",
xaxt = "n"
)
text(
x = 1,
y = 1,
soundid_transect_labs[e - (nrow * ncol * (sum(c(envelope, spectrum)) + 1))],
font = 2,
srt = 270,
cex = 1.2,
col = "white"
)
box()
}
}
source("~/Dropbox/R_package_testing/baRulho/R/plot_degradation.R")
source("~/Dropbox/R_package_testing/baRulho/R/plot_degradation.R")
# all spectros
plot_degradation(X = W, nrow = 4, ovlp = 95); last.img(); rm.img()
FUN <- "plot_degradation"
#run function
run.all()
source(file.path("./R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/degradation_est.rda")
options(sound.files.path = tempdir(), dest.path = tempdir())
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
W <- X <- degradation_est[degradation_est$sound.files != "master.wav", ]
# all spectros
plot_degradation(X = W, nrow = 4, ovlp = 95); last.img(); rm.img()
# removing one row
plot_degradation(X = W[-5, ], nrow = 4, ovlp = 95); last.img(); rm.img()
plot_degradation(X = W[-3, ], mar = 0.1, nrow = 4, ovlp = 95); last.img(); rm.img()
plot_degradation(X = W[-nrow(W), ], mar = 0.1, nrow = 4, ovlp = 95); last.img(); rm.img()
plot_degradation(X = W[-12, ], mar = 0.1, nrow = 4, ovlp = 95); last.img(); rm.img()
# changin marging
plot_degradation(X = W, mar = 0.4, nrow = 4, ovlp = 95); last.img(); rm.img()
plot_degradation(X = W, mar = 0.4, nrow = 14, ovlp = 90); last.img(); rm.img()
# with spectrum and envelope
plot_degradation(X = W, mar = 0.4, nrow = 3, ovlp = 95, envelope = TRUE, spectrum = TRUE); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/plot_degradation.R")
# all spectros
plot_degradation(X = W, nrow = 4, ovlp = 95); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/plot_degradation.R")
# all spectros
plot_degradation(X = W, nrow = 4, ovlp = 95); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/plot_degradation.R")
# all spectros
plot_degradation(X = W, nrow = 4, ovlp = 95); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/plot_degradation.R")
# all spectros
plot_degradation(X = W, nrow = 4, ovlp = 95); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/plot_degradation.R")
# all spectros
plot_degradation(X = W, nrow = 4, ovlp = 95); last.img(); rm.img()
# all spectros
plot_degradation(X = W, nrow = 4, ovlp = 95); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/plot_degradation.R")
# all spectros
plot_degradation(X = W, nrow = 4, ovlp = 95); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/plot_degradation.R")
source("~/Dropbox/R_package_testing/baRulho/R/plot_degradation.R")
# all spectros
plot_degradation(X = W, nrow = 4, ovlp = 95); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/plot_degradation.R")
# all spectros
plot_degradation(X = W, nrow = 4, ovlp = 95); last.img(); rm.img()
