writeWave(Phae.long1, file.path(td, "Phae.long1.wav"))
writeWave(Phae.long2, file.path(td, "Phae.long2.wav"))
writeWave(Phae.long3, file.path(td, "Phae.long3.wav"))
writeWave(Phae.long4, file.path(td, "Phae.long4.wav"))
# make an extended selection table
est <- selection_table(X = lbh_selec_table, extended = TRUE, confirm.extended = FALSE,
path = td)
# create master sound file
master.sf <- master_sound_file(X = est, file.name = "example_master",
dest.path = td, gap.duration = 0.3)
spectrograms(master.sf, path = td, by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5), osci = TRUE); last.img()
# read master
exmp.master <- readWave(file.path(td, "example_master.wav"))
# add 1 s silence
exmp.test1 <- addsilw(wave = exmp.master, at = "start", d = 1, output = "Wave", f = exmp.master@samp.rate)
exmp.test2 <- addsilw(wave = exmp.master, at = "start", d = 2, output = "Wave", f = exmp.master@samp.rate)
# create noise
ns <- noisew(f = exmp.master@samp.rate, d = duration(exmp.test2) + 1, output = "Wave")
# make noise exactly the same length and add noise to 2 examples
exmp.test1@left <- exmp.test1@left + (ns@left[1:length(exmp.test1@left)] * 500)
exmp.test2@left <- exmp.test2@left + (ns@left[1:length(exmp.test2@left)] * 500)
exmp.test1 <- normalize(exmp.test1, unit = "16")
exmp.test2 <- normalize(exmp.test2, unit = "16")
# save examples
writeWave(object = exmp.test1, filename = file.path(td, "example_test1.wav"), extensible = FALSE)
writeWave(object = exmp.test2, filename = file.path(td, "example_test2.wav"), extensible = FALSE)
pks <- find_markers(X = master.sf, path = td); pks
# create master sound file
master.sf <- master_sound_file(X = est, file.name = "example_master",
dest.path = td, gap.duration = 0.3)
spectrograms(master.sf, path = td, by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5), osci = TRUE); last.img()
# read master
exmp.master <- readWave(file.path(td, "example_master.wav"))
# add 1 s silence
exmp.test1 <- addsilw(wave = exmp.master, at = "start", d = 1, output = "Wave", f = exmp.master@samp.rate)
exmp.test2 <- addsilw(wave = exmp.master, at = "start", d = 2, output = "Wave", f = exmp.master@samp.rate)
# create noise
ns <- noisew(f = exmp.master@samp.rate, d = duration(exmp.test2) + 1, output = "Wave")
# make noise exactly the same length and add noise to 2 examples
exmp.test1@left <- exmp.test1@left + (ns@left[1:length(exmp.test1@left)] * 500)
exmp.test2@left <- exmp.test2@left + (ns@left[1:length(exmp.test2@left)] * 500)
exmp.test1 <- normalize(exmp.test1, unit = "16")
exmp.test2 <- normalize(exmp.test2, unit = "16")
# save examples
writeWave(object = exmp.test1, filename = file.path(td, "example_test1.wav"), extensible = FALSE)
writeWave(object = exmp.test2, filename = file.path(td, "example_test2.wav"), extensible = FALSE)
pks <- find_markers(X = master.sf, path = td); pks
source("~/Dropbox/R_package_testing/baRulho/R/find_markers.R")
pks <- find_markers(X = master.sf, path = td); pks
path = td
X
master.sf
pks <- find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"), ], test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
X = master.sf[which(master.sf$orig.sound.file == "start_marker"), ]
test.files = c("example_test1.wav", "example_test2.wav")
path = td
pb = TRUE
cores = 1
# deprecated message
if (exists("template.rows"))
stop2("'template.rows' has been deprecated")
# get sound files in path
files_in_path <- list.files(path = path, pattern = "\\.wav$", ignore.case = TRUE)
# check if there are files
if (length(files_in_path) == 0) stop2("No .wav files found in 'path'")
# check for master sound file
if (!any(files_in_path %in% unique(X$sound.files))) stop2("sound file referenced in 'X' not found in 'path' (make sure you put the master sound file in the same folder than the re-recorded files)")
# remove sound files
if (!is.null(test.files)) {
if (!all(test.files %in% files_in_path)) stop2("Not all 'test.files' were found in 'path'")
} else test.files <- files_in_path[!files_in_path %in% unique(X$sound.files)] # remove master sound file
# get metadata of sound files to get sampling rates
wi <- warbleR::info_sound_files(path = path, parallel = 1, pb = FALSE, skip.error = TRUE, files = c(test.files, unique(X$sound.files)))
if (length(unique(wi$sample.rate)) > 1)
stop2("Not all sound files share the same sampling rate (check wave properties with warbleR::wav_info())")
# run cross correlation
if (pb)
write(file = "", x = paste0("running cross-correlation (step 1 out of 2):"))
templ_corrs <- ohun::template_correlator(templates = X, files = test.files, path = path, cores = cores, pb = pb)
# find peaks
if (pb)
write(file = "", x = paste0("running peak detection (step 2 out of 2):"))
pks <- as.data.frame(ohun::template_detector(template.correlations = templ_corrs, cores = cores, threshold = 0.00001, pb = pb))
pks <- pks[stats::ave(x = -pks$scores, as.factor(pks$sound.files), as.factor(pks$template), FUN = rank) <= 1, ]
pks$time <- vapply(seq_len(nrow(pks)), function(x) mean(c(pks$end[x], pks$start[x])), FUN.VALUE = numeric(1))
# rename sound file column
try(names(pks)[names(pks) == "sound.files"] <- "test.files")
source("~/Dropbox/R_package_testing/baRulho/R/find_markers.R")
pks <- find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"), ], test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
FUN <- "align_test_files"
#run function
run.all()
source(file.path("./R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
# set temporary directory
td <- tempdir()
# load example data from warbleR
data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4",
"lbh_selec_table"))
# save sound files to temporary folder
writeWave(Phae.long1, file.path(td, "Phae.long1.wav"))
writeWave(Phae.long2, file.path(td, "Phae.long2.wav"))
writeWave(Phae.long3, file.path(td, "Phae.long3.wav"))
writeWave(Phae.long4, file.path(td, "Phae.long4.wav"))
# make an extended selection table
est <- selection_table(X = lbh_selec_table, extended = TRUE, confirm.extended = FALSE,
path = td)
# create master sound file
master.sf <- master_sound_file(X = est, file.name = "example_master",
dest.path = td, gap.duration = 0.3)
spectrograms(master.sf, path = td, by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5), osci = TRUE); last.img()
# read master
exmp.master <- readWave(file.path(td, "example_master.wav"))
# add 1 s silence
exmp.test1 <- addsilw(wave = exmp.master, at = "start", d = 1, output = "Wave", f = exmp.master@samp.rate)
exmp.test2 <- addsilw(wave = exmp.master, at = "start", d = 2, output = "Wave", f = exmp.master@samp.rate)
# create noise
ns <- noisew(f = exmp.master@samp.rate, d = duration(exmp.test2) + 1, output = "Wave")
# make noise exactly the same length and add noise to 2 examples
exmp.test1@left <- exmp.test1@left + (ns@left[1:length(exmp.test1@left)] * 500)
exmp.test2@left <- exmp.test2@left + (ns@left[1:length(exmp.test2@left)] * 500)
exmp.test1 <- normalize(exmp.test1, unit = "16")
exmp.test2 <- normalize(exmp.test2, unit = "16")
# save examples
writeWave(object = exmp.test1, filename = file.path(td, "example_test1.wav"), extensible = FALSE)
writeWave(object = exmp.test2, filename = file.path(td, "example_test2.wav"), extensible = FALSE)
pks <- find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"), ], test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
pks <- find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"), ], test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
source("~/Dropbox/R_package_testing/baRulho/R/find_markers.R")
pks <- find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"), ], test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
source("~/Dropbox/R_package_testing/baRulho/R/find_markers.R")
pks <- find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"), ], test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
source("~/Dropbox/R_package_testing/baRulho/R/find_markers.R")
pks <- find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"), ], test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
source("~/Dropbox/R_package_testing/baRulho/R/find_markers.R")
pks <- find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"), ], test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
X
source("~/Dropbox/R_package_testing/baRulho/R/find_markers.R")
X
pks <- find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"), ], test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
test.files
templ_corrs <- ohun::template_correlator(templates = X, files = test.files, path = path, cores = cores, pb = pb, ...)
templ_corrs <- ohun::template_correlator(templates = X, files = test.files, path = path, cores = cores, pb = pb)
source("~/Dropbox/R_package_testing/baRulho/R/find_markers.R")
pks <- find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"), ], test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
Z <- master.sf[which(master.sf$orig.sound.file == "start_marker"), ]
pks <- find_markers(X = Z, test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
source("~/Dropbox/R_package_testing/ohun/R/template_correlator.R")
source("~/Dropbox/R_package_testing/baRulho/R/find_markers.R")
pks <- find_markers(X = Z, test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
source("~/Dropbox/R_package_testing/baRulho/R/find_markers.R")
source("~/Dropbox/R_package_testing/ohun/R/template_correlator.R")
source("~/Dropbox/R_package_testing/baRulho/R/find_markers.R")
pks <- find_markers(X = Z, test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
FUN <- "align_test_files"
#run function
run.all()
source(file.path("./R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
# set temporary directory
td <- tempdir()
# load example data from warbleR
data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4",
"lbh_selec_table"))
# save sound files to temporary folder
writeWave(Phae.long1, file.path(td, "Phae.long1.wav"))
writeWave(Phae.long2, file.path(td, "Phae.long2.wav"))
writeWave(Phae.long3, file.path(td, "Phae.long3.wav"))
writeWave(Phae.long4, file.path(td, "Phae.long4.wav"))
# make an extended selection table
est <- selection_table(X = lbh_selec_table, extended = TRUE, confirm.extended = FALSE,
path = td)
# create master sound file
master.sf <- master_sound_file(X = est, file.name = "example_master",
dest.path = td, gap.duration = 0.3)
spectrograms(master.sf, path = td, by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5), osci = TRUE); last.img()
# read master
exmp.master <- readWave(file.path(td, "example_master.wav"))
# add 1 s silence
exmp.test1 <- addsilw(wave = exmp.master, at = "start", d = 1, output = "Wave", f = exmp.master@samp.rate)
exmp.test2 <- addsilw(wave = exmp.master, at = "start", d = 2, output = "Wave", f = exmp.master@samp.rate)
# create noise
ns <- noisew(f = exmp.master@samp.rate, d = duration(exmp.test2) + 1, output = "Wave")
# make noise exactly the same length and add noise to 2 examples
exmp.test1@left <- exmp.test1@left + (ns@left[1:length(exmp.test1@left)] * 500)
exmp.test2@left <- exmp.test2@left + (ns@left[1:length(exmp.test2@left)] * 500)
exmp.test1 <- normalize(exmp.test1, unit = "16")
exmp.test2 <- normalize(exmp.test2, unit = "16")
# save examples
writeWave(object = exmp.test1, filename = file.path(td, "example_test1.wav"), extensible = FALSE)
writeWave(object = exmp.test2, filename = file.path(td, "example_test2.wav"), extensible = FALSE)
Z <- master.sf[which(master.sf$orig.sound.file == "start_marker"), ]
pks <- find_markers(X = Z, test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = td)
master.sf
master.sf$sound.id <- master.sf$orig.sound.file
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = td)
FUN <- "align_test_files"
#run function
run.all()
source(file.path("./R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
# set temporary directory
td <- tempdir()
# load example data from warbleR
data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4",
"lbh_selec_table"))
# save sound files to temporary folder
writeWave(Phae.long1, file.path(td, "Phae.long1.wav"))
writeWave(Phae.long2, file.path(td, "Phae.long2.wav"))
writeWave(Phae.long3, file.path(td, "Phae.long3.wav"))
writeWave(Phae.long4, file.path(td, "Phae.long4.wav"))
# make an extended selection table
est <- selection_table(X = lbh_selec_table, extended = TRUE, confirm.extended = FALSE,
path = td)
# create master sound file
master.sf <- master_sound_file(X = est, file.name = "example_master",
dest.path = td, gap.duration = 0.3)
spectrograms(master.sf, path = td, by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5), osci = TRUE); last.img()
# read master
exmp.master <- readWave(file.path(td, "example_master.wav"))
# add 1 s silence
exmp.test1 <- addsilw(wave = exmp.master, at = "start", d = 1, output = "Wave", f = exmp.master@samp.rate)
exmp.test2 <- addsilw(wave = exmp.master, at = "start", d = 2, output = "Wave", f = exmp.master@samp.rate)
# create noise
ns <- noisew(f = exmp.master@samp.rate, d = duration(exmp.test2) + 1, output = "Wave")
# make noise exactly the same length and add noise to 2 examples
exmp.test1@left <- exmp.test1@left + (ns@left[1:length(exmp.test1@left)] * 500)
exmp.test2@left <- exmp.test2@left + (ns@left[1:length(exmp.test2@left)] * 500)
exmp.test1 <- normalize(exmp.test1, unit = "16")
exmp.test2 <- normalize(exmp.test2, unit = "16")
# save examples
writeWave(object = exmp.test1, filename = file.path(td, "example_test1.wav"), extensible = FALSE)
writeWave(object = exmp.test2, filename = file.path(td, "example_test2.wav"), extensible = FALSE)
Z <- master.sf[which(master.sf$orig.sound.file == "start_marker"), ]
pks <- find_markers(X = Z, test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
master.sf$sound.id <- master.sf$orig.sound.file
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = td)
warbleR::spectrograms(alg.tests, by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5), dest.path = td, path = td, osci = TRUE, mar = 3); last.img(); rm.img()
### by end marker
pks <- find_markers(X = master.sf, template.rows = which(master.sf$orig.sound.file == "end_marker"), test.files = c("example_test1.wav", "example_test2.wav"), path = td); pks
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = td)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
source("~/Dropbox/R_package_testing/baRulho/R/find_markers.R")
source("~/Dropbox/R_package_testing/baRulho/R/find_markers.R")
remove.packages("ohun")
remove.packages("warbleR")
source("https://raw.githubusercontent.com/maRce10/sketchy/main/R/load_packages.R")
x <- c("RColorBrewer", "devtools", "seewave", github = "maRce10/warbleR", "monitoR", "pkgdown", "ape", "spelling", "ggplot2", "png", "viridis", "formatR", "kableExtra", github = "maRce10/ohun")
load_packages(x)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
library(ohun)
?ohun
remove.packages("ohun")
source("https://raw.githubusercontent.com/maRce10/sketchy/main/R/load_packages.R")
x <- c("RColorBrewer", "devtools", "seewave", github = "maRce10/warbleR", "monitoR", "pkgdown", "ape", "spelling", "ggplot2", "png", "viridis", "formatR", "kableExtra", github = "maRce10/ohun")
load_packages(x)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
source("~/Dropbox/R_package_testing/baRulho/R/find_markers.R")
FUN <- "find_markers"
#run function
run.all()
source(file.path("./R", paste0(FUN, ".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# set temporary directory
td <- tempdir()
# load example data from warbleR
data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4",
"lbh_selec_table"))
# save sound files to temporary folder
writeWave(Phae.long1, file.path(td, "Phae.long1.wav"))
writeWave(Phae.long2, file.path(td, "Phae.long2.wav"))
writeWave(Phae.long3, file.path(td, "Phae.long3.wav"))
writeWave(Phae.long4, file.path(td, "Phae.long4.wav"))
# make an extended selection table
est <- selection_table(X = lbh_selec_table, extended = TRUE, confirm.extended = FALSE,
path = td)
# create master sound file
master.sf <- master_sound_file(X = est, file.name = "example_master",
dest.path = td, gap.duration = 0.3)
# read master
exmp.master <- readWave(file.path(td, "example_master.wav"))
# add 1 s silence
exmp.test1 <- addsilw(wave = exmp.master, at = "start", d = 1, output = "Wave", f = exmp.master@samp.rate)
exmp.test2 <- addsilw(wave = exmp.master, at = "start", d = 2, output = "Wave", f = exmp.master@samp.rate)
# create noise
ns <- noisew(f = exmp.master@samp.rate, d = duration(exmp.test2) + 1, output = "Wave")
# make noise exactly the same length and add noise to 2 examples
exmp.test1@left <- exmp.test1@left + (ns@left[1:length(exmp.test1@left)] * 500)
exmp.test2@left <- exmp.test2@left + (ns@left[1:length(exmp.test2@left)] * 500)
exmp.test1 <- normalize(exmp.test1, unit = "16")
exmp.test2 <- normalize(exmp.test2, unit = "16")
# save examples
writeWave(object = exmp.test1, filename = file.path(td, "example_test1.wav"), extensible = FALSE)
writeWave(object = exmp.test2, filename = file.path(td, "example_test2.wav"), extensible = FALSE)
# search using start marker as template
find_markers(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker"), test.files = c("example_test1.wav", "example_test2.wav"), path = td, pb = FALSE)
# search using start marker as template
find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"),], test.files = c("example_test1.wav", "example_test2.wav"), path = td, pb = FALSE)
master.sf[which(master.sf$orig.sound.file == "start_marker"),]
# search using start marker as template
find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"),], test.files = c("example_test1.wav", "example_test2.wav"), path = td, pb = FALSE)
source("~/Dropbox/R_package_testing/baRulho/R/find_markers.R")
# search using start marker as template
find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"),], test.files = c("example_test1.wav", "example_test2.wav"), path = td, pb = FALSE)
# search using start marker as template
find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"),], test.files = c("example_test1.wav", "example_test2.wav"), path = td, pb = FALSE)
# search using start marker as template
find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"),], test.files = c("example_test1.wav", "example_test2.wav"), path = td, pb = FALSE)
# search using start marker as template
find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"),], test.files = c("example_test1.wav", "example_test2.wav"), path = td, pb = FALSE)
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
# search using start marker as template
find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"),], test.files = c("example_test1.wav", "example_test2.wav"), path = td, pb = FALSE)
# search using start marker as template
find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"),], test.files = c("example_test1.wav", "example_test2.wav"), path = td, pb = FALSE)
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
# search using start marker as template
find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"),], test.files = c("example_test1.wav", "example_test2.wav"), path = td, pb = FALSE)
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
# search using start marker as template
find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"),], test.files = c("example_test1.wav", "example_test2.wav"), path = td, pb = FALSE)
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
# search using start marker as template
find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"),], test.files = c("example_test1.wav", "example_test2.wav"), path = td, pb = FALSE)
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
source("~/Dropbox/R_package_testing/ohun/R/template_correlator.R")
# search using start marker as template
find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"),], test.files = c("example_test1.wav", "example_test2.wav"), path = td, pb = FALSE)
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
source("~/Dropbox/R_package_testing/ohun/R/template_correlator.R")
source("~/Dropbox/R_package_testing/baRulho/R/find_markers.R")
# search using start marker as template
find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"),], test.files = c("example_test1.wav", "example_test2.wav"), path = td, pb = FALSE)
source("~/Dropbox/R_package_testing/baRulho/R/find_markers.R")
# search using start marker as template
find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"),], test.files = c("example_test1.wav", "example_test2.wav"), path = td, pb = FALSE)
source("~/Dropbox/R_package_testing/ohun/R/template_detector.R")
source("~/Dropbox/R_package_testing/baRulho/R/find_markers.R")
# search using start marker as template
find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"),], test.files = c("example_test1.wav", "example_test2.wav"), path = td, pb = FALSE)
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
# search using start marker as template
find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"),], test.files = c("example_test1.wav", "example_test2.wav"), path = td, pb = FALSE)
source("~/Dropbox/R_package_testing/baRulho/R/find_markers.R")
find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"),], test.files = c("example_test1.wav", "example_test2.wav"), path = td, pb = FALSE)
source("~/Dropbox/R_package_testing/ohun/R/template_detector.R")
source("~/Dropbox/R_package_testing/ohun/R/template_correlator.R")
source("~/Dropbox/R_package_testing/ohun/R/template_detector.R")
source("~/Dropbox/R_package_testing/ohun/R/template_correlator.R")
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"),], test.files = c("example_test1.wav", "example_test2.wav"), path = td, pb = FALSE)
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"),], test.files = c("example_test1.wav", "example_test2.wav"), path = td, pb = FALSE)
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
source("~/Dropbox/R_package_testing/baRulho/R/find_markers.R")
source("~/Dropbox/R_package_testing/ohun/R/template_detector.R")
source("~/Dropbox/R_package_testing/ohun/R/template_correlator.R")
source("~/Dropbox/R_package_testing/ohun/R/internal_functions.R")
remove.packages("ohun")
source("https://raw.githubusercontent.com/maRce10/sketchy/main/R/load_packages.R")
x <- c("RColorBrewer", "devtools", "seewave", github = "maRce10/warbleR", "monitoR", "pkgdown", "ape", "spelling", "ggplot2", "png", "viridis", "formatR", "kableExtra", github = "maRce10/ohun")
load_packages(x)
FUN <- "find_markers"
#run function
run.all()
source(file.path("./R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
# set temporary directory
td <- tempdir()
# load example data from warbleR
data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4",
"lbh_selec_table"))
# save sound files to temporary folder
writeWave(Phae.long1, file.path(td, "Phae.long1.wav"))
writeWave(Phae.long2, file.path(td, "Phae.long2.wav"))
writeWave(Phae.long3, file.path(td, "Phae.long3.wav"))
writeWave(Phae.long4, file.path(td, "Phae.long4.wav"))
# make an extended selection table
est <- selection_table(X = lbh_selec_table, extended = TRUE, confirm.extended = FALSE,
path = td)
# create master sound file
master.sf <- master_sound_file(X = est, file.name = "example_master",
dest.path = td, gap.duration = 0.3)
# read master
exmp.master <- readWave(file.path(td, "example_master.wav"))
# add 1 s silence
exmp.test1 <- addsilw(wave = exmp.master, at = "start", d = 1, output = "Wave", f = exmp.master@samp.rate)
exmp.test2 <- addsilw(wave = exmp.master, at = "start", d = 2, output = "Wave", f = exmp.master@samp.rate)
# create noise
ns <- noisew(f = exmp.master@samp.rate, d = duration(exmp.test2) + 1, output = "Wave")
# make noise exactly the same length and add noise to 2 examples
exmp.test1@left <- exmp.test1@left + (ns@left[1:length(exmp.test1@left)] * 500)
exmp.test2@left <- exmp.test2@left + (ns@left[1:length(exmp.test2@left)] * 500)
exmp.test1 <- normalize(exmp.test1, unit = "16")
exmp.test2 <- normalize(exmp.test2, unit = "16")
# save examples
writeWave(object = exmp.test1, filename = file.path(td, "example_test1.wav"), extensible = FALSE)
writeWave(object = exmp.test2, filename = file.path(td, "example_test2.wav"), extensible = FALSE)
# search using start marker as template
find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"),], test.files = c("example_test1.wav", "example_test2.wav"), path = td, pb = FALSE)
# search using end marker as template
find_markers(X = master.sf[which(master.sf$orig.sound.file == "end_marker"),], test.files = c("example_test1.wav", "example_test2.wav"), path = td, pb = FALSE)
# search using both start and end markers as template
find_markers(X = master.sf, template.rows = which(master.sf$orig.sound.file == "start_marker" | master.sf$orig.sound.file == "end_marker"), test.files = c("example_test1.wav", "example_test2.wav"), path = td, pb = FALSE)
FUN <- "find_markers"
#run function
run.all()
source(file.path("./R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
# set temporary directory
td <- tempdir()
# load example data from warbleR
data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4",
"lbh_selec_table"))
# save sound files to temporary folder
writeWave(Phae.long1, file.path(td, "Phae.long1.wav"))
writeWave(Phae.long2, file.path(td, "Phae.long2.wav"))
writeWave(Phae.long3, file.path(td, "Phae.long3.wav"))
writeWave(Phae.long4, file.path(td, "Phae.long4.wav"))
# make an extended selection table
est <- selection_table(X = lbh_selec_table, extended = TRUE, confirm.extended = FALSE,
path = td)
# create master sound file
master.sf <- master_sound_file(X = est, file.name = "example_master",
dest.path = td, gap.duration = 0.3)
# read master
exmp.master <- readWave(file.path(td, "example_master.wav"))
# add 1 s silence
exmp.test1 <- addsilw(wave = exmp.master, at = "start", d = 1, output = "Wave", f = exmp.master@samp.rate)
exmp.test2 <- addsilw(wave = exmp.master, at = "start", d = 2, output = "Wave", f = exmp.master@samp.rate)
# create noise
ns <- noisew(f = exmp.master@samp.rate, d = duration(exmp.test2) + 1, output = "Wave")
# make noise exactly the same length and add noise to 2 examples
exmp.test1@left <- exmp.test1@left + (ns@left[1:length(exmp.test1@left)] * 500)
exmp.test2@left <- exmp.test2@left + (ns@left[1:length(exmp.test2@left)] * 500)
exmp.test1 <- normalize(exmp.test1, unit = "16")
exmp.test2 <- normalize(exmp.test2, unit = "16")
# save examples
writeWave(object = exmp.test1, filename = file.path(td, "example_test1.wav"), extensible = FALSE)
writeWave(object = exmp.test2, filename = file.path(td, "example_test2.wav"), extensible = FALSE)
# search using start marker as template
find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker"),], test.files = c("example_test1.wav", "example_test2.wav"), path = td, pb = FALSE)
# search using end marker as template
find_markers(X = master.sf[which(master.sf$orig.sound.file == "end_marker"),], test.files = c("example_test1.wav", "example_test2.wav"), path = td, pb = FALSE)
# search using both start and end markers as template
find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker" | master.sf$orig.sound.file == "end_marker"),], test.files = c("example_test1.wav", "example_test2.wav"), path = td, pb = FALSE)
writeWave(object = exmp.test2, filename = file.path(td, "example_test3.wav"), extensible = FALSE)
# search using both start and end markers as template
find_markers(X = master.sf[which(master.sf$orig.sound.file == "start_marker" | master.sf$orig.sound.file == "end_marker"),], test.files = c("example_test1.wav", "example_test2.wav", "example_test3.wav"), path = td, pb = FALSE)
