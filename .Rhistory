##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/degradation_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
print("method 1")
X <- set_reference_sounds(X = degradation_est[degradation_est$sound.files != "master.wav", ])
spectrum_blur_ratio(X = X, img = T, dest.path = tempdir(), ssmooth = 10); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
FUN <- "spectrum_blur_ratio"
#run function
source(file.path("./R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/degradation_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
print("method 1")
X <- set_reference_sounds(X = degradation_est[degradation_est$sound.files != "master.wav", ])
spectrum_blur_ratio(X = X, img = T, dest.path = tempdir(), ssmooth = 10); last.img(); rm.img()
print("method 2")
X <- set_reference_sounds(X = degradation_est[degradation_est$sound.files != "master.wav", ], method = 2)
a <- spectrum_blur_ratio(X = X, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2 and ssmooth = 100")
b <- spectrum_blur_ratio(X = X,  ssmooth = 100, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2")
a <- spectrum_blur_ratio(X = X,  collevels = seq(-40, 0, 5), pal = reverse.topo.colors, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2 and ssmooth = 100,  no pb")
spectrum_blur_ratio(X = X,  ssmooth = 300, pb = FALSE, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
X <- set_reference_sounds(X = degradation_est[degradation_est$sound.files != "master.wav", ])
print("using method 1 and ssmooth = 200")
b <- spectrum_blur_ratio(X = X,  ssmooth = 250, img = TRUE, dest.path = tempdir(), wl = 250, ovlp = 95, res = 200); last.img(); rm.img()
print(" returning spectra")
brs <- attributes(spectrum_blur_ratio(X = X, ssmooth = 600, spectra = TRUE))$spectra
print("using data frame and sound files")
playback_sels <- read.csv("./testing/example_data/aligned_test_sounds.csv")
playback_sels <- playback_sels[playback_sels$sound.id != "start_marker", ]
X <- set_reference_sounds(playback_sels)
sbr1 <- spectrum_blur_ratio(X = X, ssmooth = 600, path = "./testing/example_data/")
sbr1 <- spectrum_blur_ratio(X = X, ssmooth = 600, path = "./testing/example_data/")
source("~/Dropbox/R_package_testing/baRulho/R/spectrum_blur_ratio.R")
sbr1 <- spectrum_blur_ratio(X = X, ssmooth = 600, path = "./testing/example_data/")
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
sbr1 <- spectrum_blur_ratio(X = X, ssmooth = 600, path = "./testing/example_data/")
FUN <- "spectrum_blur_ratio"
#run function
source(file.path("./R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/degradation_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
print("method 1")
X <- set_reference_sounds(X = degradation_est[degradation_est$sound.files != "master.wav", ])
spectrum_blur_ratio(X = X, img = T, dest.path = tempdir(), ssmooth = 10); last.img(); rm.img()
print("method 2")
X <- set_reference_sounds(X = degradation_est[degradation_est$sound.files != "master.wav", ], method = 2)
a <- spectrum_blur_ratio(X = X, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2 and ssmooth = 100")
b <- spectrum_blur_ratio(X = X,  ssmooth = 100, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2")
a <- spectrum_blur_ratio(X = X,  collevels = seq(-40, 0, 5), pal = reverse.topo.colors, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2 and ssmooth = 100,  no pb")
spectrum_blur_ratio(X = X,  ssmooth = 300, pb = FALSE, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
X <- set_reference_sounds(X = degradation_est[degradation_est$sound.files != "master.wav", ])
print("using method 1 and ssmooth = 200")
b <- spectrum_blur_ratio(X = X,  ssmooth = 250, img = TRUE, dest.path = tempdir(), wl = 250, ovlp = 95, res = 200); last.img(); rm.img()
print(" returning spectra")
brs <- attributes(spectrum_blur_ratio(X = X, ssmooth = 600, spectra = TRUE))$spectra
print("using data frame and sound files")
playback_sels <- read.csv("./testing/example_data/aligned_test_sounds.csv")
playback_sels <- playback_sels[playback_sels$sound.id != "start_marker", ]
X <- set_reference_sounds(playback_sels)
sbr1 <- spectrum_blur_ratio(X = X, ssmooth = 600, path = "./testing/example_data/")
est <- selection_table(X = playback_sels, extended = TRUE, confirm.extended = FALSE, path = "./testing/example_data", mar = 0.2)
X <- set_reference_sounds(playback_sels)
est_bs <- selection_table(X = playback_sels, extended = TRUE, confirm.extended = FALSE, path = "./testing/example_data", mar = 0.2, by.song = "sound.files")
Xbs <- set_reference_sounds(est_bs)
sbr2 <- spectrum_blur_ratio(X = Xbs, ssmooth = 600)
sbr3 <- spectrum_blur_ratio(X = Xbs, ssmooth = 600)
cor(sbr1$spectrum.blur.ratio, sbr2$spectrum.blur.ratio, use = "pairwise.complete.obs")
cor(sbr2$spectrum.blur.ratio, sbr3$spectrum.blur.ratio, use = "pairwise.complete.obs")
print("all is good!")
source("~/Dropbox/R_package_testing/baRulho/R/spectrum_blur_ratio.R")
FUN <- "spectrum_blur_ratio"
#run function
source(file.path("./R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/degradation_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
print("method 1")
X <- set_reference_sounds(X = degradation_est[degradation_est$sound.files != "master.wav", ])
spectrum_blur_ratio(X = X, img = T, dest.path = tempdir(), ssmooth = 10); last.img(); rm.img()
print("method 2")
X <- set_reference_sounds(X = degradation_est[degradation_est$sound.files != "master.wav", ], method = 2)
a <- spectrum_blur_ratio(X = X, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2 and ssmooth = 100")
b <- spectrum_blur_ratio(X = X,  ssmooth = 100, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2")
a <- spectrum_blur_ratio(X = X,  collevels = seq(-40, 0, 5), pal = reverse.topo.colors, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2 and ssmooth = 100,  no pb")
spectrum_blur_ratio(X = X,  ssmooth = 300, pb = FALSE, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
X <- set_reference_sounds(X = degradation_est[degradation_est$sound.files != "master.wav", ])
print("using method 1 and ssmooth = 200")
b <- spectrum_blur_ratio(X = X,  ssmooth = 250, img = TRUE, dest.path = tempdir(), wl = 250, ovlp = 95, res = 200); last.img(); rm.img()
print(" returning spectra")
brs <- attributes(spectrum_blur_ratio(X = X, ssmooth = 600, spectra = TRUE))$spectra
print("using data frame and sound files")
playback_sels <- read.csv("./testing/example_data/aligned_test_sounds.csv")
playback_sels <- playback_sels[playback_sels$sound.id != "start_marker", ]
X <- set_reference_sounds(playback_sels)
sbr1 <- spectrum_blur_ratio(X = X, ssmooth = 600, path = "./testing/example_data/")
est <- selection_table(X = playback_sels, extended = TRUE, confirm.extended = FALSE, path = "./testing/example_data", mar = 0.2)
X <- set_reference_sounds(playback_sels)
est_bs <- selection_table(X = playback_sels, extended = TRUE, confirm.extended = FALSE, path = "./testing/example_data", mar = 0.2, by.song = "sound.files")
Xbs <- set_reference_sounds(est_bs)
sbr2 <- spectrum_blur_ratio(X = Xbs, ssmooth = 600)
sbr3 <- spectrum_blur_ratio(X = Xbs, ssmooth = 600)
cor(sbr1$spectrum.blur.ratio, sbr2$spectrum.blur.ratio, use = "pairwise.complete.obs")
cor(sbr2$spectrum.blur.ratio, sbr3$spectrum.blur.ratio, use = "pairwise.complete.obs")
print("all is good!")
source("~/Dropbox/R_package_testing/baRulho/R/spectrum_blur_ratio.R")
FUN <- "spectrum_blur_ratio"
#run function
source(file.path("./R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/degradation_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
print("method 1")
X <- set_reference_sounds(X = degradation_est[degradation_est$sound.files != "master.wav", ])
spectrum_blur_ratio(X = X, img = T, dest.path = tempdir(), ssmooth = 10); last.img(); rm.img()
print("method 2")
X <- set_reference_sounds(X = degradation_est[degradation_est$sound.files != "master.wav", ], method = 2)
a <- spectrum_blur_ratio(X = X, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2 and ssmooth = 100")
b <- spectrum_blur_ratio(X = X,  ssmooth = 100, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/spectrum_blur_ratio.R")
FUN <- "spectrum_blur_ratio"
#run function
source(file.path("./R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/degradation_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
print("method 1")
X <- set_reference_sounds(X = degradation_est[degradation_est$sound.files != "master.wav", ])
spectrum_blur_ratio(X = X, img = T, dest.path = tempdir(), ssmooth = 10); last.img(); rm.img()
print("method 2")
X <- set_reference_sounds(X = degradation_est[degradation_est$sound.files != "master.wav", ], method = 2)
a <- spectrum_blur_ratio(X = X, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2 and ssmooth = 100")
b <- spectrum_blur_ratio(X = X,  ssmooth = 100, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/spectrum_blur_ratio.R")
FUN <- "spectrum_blur_ratio"
#run function
source(file.path("./R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/degradation_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
print("method 1")
X <- set_reference_sounds(X = degradation_est[degradation_est$sound.files != "master.wav", ])
spectrum_blur_ratio(X = X, img = T, dest.path = tempdir(), ssmooth = 10); last.img(); rm.img()
print("method 2")
X <- set_reference_sounds(X = degradation_est[degradation_est$sound.files != "master.wav", ], method = 2)
a <- spectrum_blur_ratio(X = X, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2 and ssmooth = 100")
b <- spectrum_blur_ratio(X = X,  ssmooth = 100, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2")
a <- spectrum_blur_ratio(X = X,  collevels = seq(-40, 0, 5), pal = reverse.topo.colors, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2 and ssmooth = 100,  no pb")
spectrum_blur_ratio(X = X,  ssmooth = 300, pb = FALSE, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
# matrix for layout
ly.mat <-
matrix(c(0, 0.3, 0, 0.5, # bottom left spectrogram
0, 0.3, 0.5, 1, # top left spectrogram
0.2, 1, 0, 1),
# right pannel spectra
nrow = 3,
byrow = TRUE)
ly.mat
FUN <- "spectrum_blur_ratio"
#run function
source(file.path("./R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/degradation_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
print("method 1")
X <- set_reference_sounds(X = degradation_est[degradation_est$sound.files != "master.wav", ])
spectrum_blur_ratio(X = X, img = T, dest.path = tempdir(), ssmooth = 10); last.img(); rm.img()
print("method 2")
X <- set_reference_sounds(X = degradation_est[degradation_est$sound.files != "master.wav", ], method = 2)
a <- spectrum_blur_ratio(X = X, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2 and ssmooth = 100")
b <- spectrum_blur_ratio(X = X,  ssmooth = 100, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/spectrum_blur_ratio.R")
FUN <- "spectrum_blur_ratio"
#run function
source(file.path("./R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/degradation_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
print("method 1")
X <- set_reference_sounds(X = degradation_est[degradation_est$sound.files != "master.wav", ])
spectrum_blur_ratio(X = X, img = T, dest.path = tempdir(), ssmooth = 10); last.img(); rm.img()
print("method 2")
X <- set_reference_sounds(X = degradation_est[degradation_est$sound.files != "master.wav", ], method = 2)
a <- spectrum_blur_ratio(X = X, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2 and ssmooth = 100")
b <- spectrum_blur_ratio(X = X,  ssmooth = 100, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2")
a <- spectrum_blur_ratio(X = X,  collevels = seq(-40, 0, 5), pal = reverse.topo.colors, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/spectrum_blur_ratio.R")
FUN <- "spectrum_blur_ratio"
#run function
source(file.path("./R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/degradation_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
print("method 1")
X <- set_reference_sounds(X = degradation_est[degradation_est$sound.files != "master.wav", ])
spectrum_blur_ratio(X = X, img = T, dest.path = tempdir(), ssmooth = 10); last.img(); rm.img()
print("method 2")
X <- set_reference_sounds(X = degradation_est[degradation_est$sound.files != "master.wav", ], method = 2)
a <- spectrum_blur_ratio(X = X, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2 and ssmooth = 100")
b <- spectrum_blur_ratio(X = X,  ssmooth = 100, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
print("using method 2")
a <- spectrum_blur_ratio(X = X,  collevels = seq(-40, 0, 5), pal = reverse.topo.colors, img = TRUE, dest.path = tempdir()); last.img(); rm.img()
FUN <- "spectrum_correlation"
#run function
source(file.path("./R", paste0(FUN, ".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/degradation_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
X = degradation_est
X <- set_reference_sounds(degradation_est)
a <- spectrum_correlation(X = X)
X <- set_reference_sounds(degradation_est[degradation_est$sound.files != "master.wav", ])
a <- spectrum_correlation(X = X)
if (is.null(wl)) {
wl <-
round(
read_sound_file(
X,
index = 1,
header = TRUE,
path = path
)$sample.rate * hop.size / 1000,
0
)
}
# make wl even if odd
if (!(wl %% 2) == 0) {
wl <- wl + 1
}
# set clusters for windows OS
if (Sys.info()[1] == "Windows" & cores > 1) {
cl <-
parallel::makePSOCKcluster(getOption("cl.cores", cores))
} else {
cl <- cores
}
if (pb) {
write(file = "", x = "Calculating frequency spectrums (step 1 out of 2):")
}
# calculate all spectra apply function
spcs <-
warbleR:::pblapply_wrblr_int(
pbar = pb,
X = seq_len(nrow(X)),
cl = cl,
FUN = function(y, wle = wl, ovl = ovlp) {
# load clip
clp <- warbleR::read_sound_file(
X = X,
index = y,
path = path
)
# mean spec
mspc <-
meanspec(
wave = clp,
f = clp@samp.rate,
plot = FALSE,
wl = wle,
ovlp = ovl
)
return(mspc)
}
)
spcs
# calculate all spectra apply function
spcs <-
warbleR:::pblapply_wrblr_int(
pbar = pb,
X = seq_len(nrow(X)),
cl = cl,
FUN = function(y, wle = wl, ovl = ovlp) {
# load clip
clp <- warbleR::read_sound_file(
X = X,
index = y,
path = path
)
# mean spec
mspc <-
spec(
wave = clp,
f = clp@samp.rate,
plot = FALSE,
wl = wle,
ovlp = ovl
)
return(mspc)
}
)
sapply(spcs, nrow)
# calculate all spectra apply function
spcs2 <-
warbleR:::pblapply_wrblr_int(
pbar = pb,
X = seq_len(nrow(X)),
cl = cl,
FUN = function(y, wle = wl, ovl = ovlp) {
# load clip
clp <- warbleR::read_sound_file(
X = X,
index = y,
path = path
)
# mean spec
mspc <-
meanspec(
wave = clp,
f = clp@samp.rate,
plot = FALSE,
wl = wle,
ovlp = ovl
)
return(mspc)
}
)
sapply(spcs, nrow)
sapply(spcs2, nrow)
# add sound file selec colums to X (weird column name so it does not overwrite user columns)
X$.sgnl.temp <- paste(X$sound.files, X$selec, sep = "-")
# get names of envelopes involved (those as test with reference or as reference)
target_sgnl_temp <- unique(c(X$.sgnl.temp[!is.na(X$reference)], X$reference[!is.na(X$reference)]))
# set clusters for windows OS
if (Sys.info()[1] == "Windows" & cores > 1) {
cl <-
parallel::makePSOCKcluster(getOption("cl.cores", cores))
} else {
cl <- cores
}
source("~/Dropbox/R_package_testing/baRulho/R/envelope_correlation.R")
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
x = 2
# get names of sound and reference
sgnl <- X$.sgnl.temp[x]
rfrnc <- X$reference[x]
is.na(rfrnc)
# extract envelope for sound and model
sgnl.env <- envs[[which(names(envs) == sgnl)]]
mdl.env <- envs[[which(names(envs) == rfrnc)]]
### filter to freq range of sounds and remove freq column
# get range as lowest bottom and highest top
frng <-
c(min(X$bottom.freq[X$.sgnl.temp %in% c(sgnl, rfrnc)]), max(X$top.freq[X$.sgnl.temp %in% c(sgnl, rfrnc)]))
sgnl.spctr <-
sgnl.spctr[sgnl.spctr[, 1] > frng[1] &
sgnl.spctr[, 1] < frng[2], 2]
mdl.spctr <-
mdl.spctr[mdl.spctr[, 1] > frng[1] &
mdl.spctr[, 1] < frng[2], 2]
# extract envelope for sound and model
sgnl.spctr <- specs[[which(names(specs) == sgnl)]]
mdl.spctr <- specs[[which(names(specs) == rfrnc)]]
# calculate all spectra apply function
specs <-
warbleR:::pblapply_wrblr_int(
pbar = pb,
X = target_sgnl_temp,
cl = cl,
FUN = function(y, ssmth = ssmooth, wln = wl, Q = X, pth = path){
spctr_FUN(y, ssmooth = ssmth, wl = wln, X = Q, path = pth)
}
)
ssmooth = 10
# calculate all spectra apply function
specs <-
warbleR:::pblapply_wrblr_int(
pbar = pb,
X = target_sgnl_temp,
cl = cl,
FUN = function(y, ssmth = ssmooth, wln = wl, Q = X, pth = path){
spctr_FUN(y, ssmooth = ssmth, wl = wln, X = Q, path = pth)
}
)
# extract envelope for sound and model
sgnl.spctr <- specs[[which(names(specs) == sgnl)]]
mdl.spctr <- specs[[which(names(specs) == rfrnc)]]
# add sound file selec names to envelopes (weird column name so it does not overwrite user columns)
names(specs) <- target_sgnl_temp
# extract envelope for sound and model
sgnl.spctr <- specs[[which(names(specs) == sgnl)]]
mdl.spctr <- specs[[which(names(specs) == rfrnc)]]
### filter to freq range of sounds and remove freq column
# get range as lowest bottom and highest top
frng <-
c(min(X$bottom.freq[X$.sgnl.temp %in% c(sgnl, rfrnc)]), max(X$top.freq[X$.sgnl.temp %in% c(sgnl, rfrnc)]))
sgnl.spctr <-
sgnl.spctr[sgnl.spctr[, 1] > frng[1] &
sgnl.spctr[, 1] < frng[2], 2]
mdl.spctr <-
mdl.spctr[mdl.spctr[, 1] > frng[1] &
mdl.spctr[, 1] < frng[2], 2]
# get correlation assuming they have same length
cor.spctr <- cor(sgnl.spctr, mdl.spctr, method = cor.method)
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
# calculate all envelops apply function
X$spectrum.correlation <- unlist(warbleR:::pblapply_wrblr_int(X = seq_len(nrow(X)), pbar = pb, cl = cl, FUN =
function(x, spcs = specs, cm = cor.method, Q = X){
# env_FUN(X = Q, y = x, ssmooth = ssmth, ovlp = ovl, wl = wln, path = pth)
spctr_cor_FUN(y, specs = spcs, X = Q, cor.method = cm)}
))
# calculate all envelops apply function
X$spectrum.correlation <- unlist(warbleR:::pblapply_wrblr_int(X = seq_len(nrow(X)), pbar = pb, cl = cl, FUN =
function(x, spcs = specs, cm = cor.method, Q = X){
# env_FUN(X = Q, y = x, ssmooth = ssmth, ovlp = ovl, wl = wln, path = pth)
spctr_cor_FUN(y = x, specs = spcs, X = Q, cor.method = cm)}
))
# calculate all envelops apply function
X$spectrum.correlation <-
unlist(warbleR:::pblapply_wrblr_int(
X = seq_len(nrow(X)),
cl = cl,
pbar = pb,
FUN = function(x) {
spctr_cor_FUN(y = X$.sgnl.temp[x], z = X$reference[x], specs, X, cor.method)
}
)
)
source("~/Dropbox/R_package_testing/baRulho/R/spectrum_correlation.R")
FUN <- "spectrum_correlation"
#run function
source(file.path("./R", paste0(FUN, ".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/degradation_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
print("using method 1")
X <- set_reference_sounds(degradation_est[degradation_est$sound.files != "master.wav", ])
a <- spectrum_correlation(X = X)
