wl = wle,
spl.cutoff = spl.cutoffe,
temp = tempe,
rh = rhe,
pa = pae,
hab.att.coef = hab.att.coefe,
max.distance = max.distancee,
resolution = resolution,
...)
}
)
# get blur ratio
# calculate all spectra apply function
X$detection_distance <-
pbapply::pbsapply(
X = 1:nrow(X),
cl = cl,
FUN = function(x,
wle = wl,
spl.cutoffe = spl.cutoff,
tempe = temp,
rhe, = rh,
# get blur ratio
# calculate all spectra apply function
X$detection_distance <-
pbapply::pbsapply(
X = 1:nrow(X),
cl = cl,
FUN = function(x,
wle = wl,
spl.cutoffe = spl.cutoff,
tempe = temp,
rhe = rh,
pae = pa,
hab.att.coefe = hab.att.coef,
max.distancee = max.distance,
resolutione resolutione,
# get blur ratio
# calculate all spectra apply function
X$detection_distance <-
pbapply::pbsapply(
X = 1:nrow(X),
cl = cl,
FUN = function(x,
wle = wl,
spl.cutoffe = spl.cutoff,
tempe = temp,
rhe = rh,
pae = pa,
hab.att.coefe = hab.att.coef,
max.distancee = max.distance,
resolution = resolutione,
...)   {
detection_dist_FUN(x,
wl = wle,
spl.cutoff = spl.cutoffe,
temp = tempe,
rh = rhe,
pa = pae,
hab.att.coef = hab.att.coefe,
max.distance = max.distancee,
resolution = resolution,
...)
}
)
spl.cutoff
spl.cutoff <- 5
# get blur ratio
# calculate all spectra apply function
X$detection_distance <-
pbapply::pbsapply(
X = 1:nrow(X),
cl = cl,
FUN = function(x,
wle = wl,
spl.cutoffe = spl.cutoff,
tempe = temp,
rhe = rh,
pae = pa,
hab.att.coefe = hab.att.coef,
max.distancee = max.distance,
resolution = resolutione,
...)   {
detection_dist_FUN(x,
wl = wle,
spl.cutoff = spl.cutoffe,
temp = tempe,
rh = rhe,
pa = pae,
hab.att.coef = hab.att.coefe,
max.distance = max.distancee,
resolution = resolution,
...)
}
)
# get blur ratio
# calculate all spectra apply function
X$detection_distance <-
pbapply::pbsapply(
X = 1:nrow(X),
cl = cl,
FUN = function(x,
wle = wl,
spl.cutoffe = spl.cutoff,
tempe = temp,
rhe = rh,
pae = pa,
hab.att.coefe = hab.att.coef,
max.distancee = max.distance,
resolutione = resolution,
...)   {
detection_dist_FUN(x,
wl = wle,
spl.cutoff = spl.cutoffe,
temp = tempe,
rh = rhe,
pa = pae,
hab.att.coef = hab.att.coefe,
max.distance = max.distancee,
resolution = resolution,
...)
}
)
source("~/Dropbox/R_package_testing/baRulho/R/detection_distance.R")
# get blur ratio
# calculate all spectra apply function
X$detection_distance <-
pbapply::pbsapply(
X = 1:nrow(X),
cl = cl,
FUN = function(x,
wle = wl,
spl.cutoffe = spl.cutoff,
tempe = temp,
rhe = rh,
pae = pa,
hab.att.coefe = hab.att.coef,
max.distancee = max.distance,
resolutione = resolution,
...)   {
detection_dist_FUN(x,
wl = wle,
spl.cutoff = spl.cutoffe,
temp = tempe,
rh = rhe,
pa = pae,
hab.att.coef = hab.att.coefe,
max.distance = max.distancee,
resolution = resolution,
...)
}
)
# remove temporal columns
X$TEMP....sgnl <- NULL
source("~/Dropbox/R_package_testing/baRulho/R/detection_distance.R")
detection_distance_ohn_int(spl.cutoff = 5, spl = 80, frequency = 6000, dist = 1)
detection_distance(X)
source("~/Dropbox/R_package_testing/baRulho/R/detection_distance.R")
detection_distance(X)
detection_distance(X, spl.cutoff = 5)
Y <- detection_distance(X, spl.cutoff = 5)
View(Y)
source("~/Dropbox/R_package_testing/baRulho/R/detection_distance.R")
Y <- detection_distance(X, spl.cutoff = 5)
source("~/Dropbox/R_package_testing/baRulho/R/detection_distance.R")
source("~/Dropbox/R_package_testing/baRulho/R/detection_distance.R")
Y <- detection_distance(X, spl.cutoff = 5)
Y <- detection_distance(X, spl.cutoff = 5, spl = 85)
source("~/Dropbox/R_package_testing/baRulho/R/detection_distance.R")
source("~/Dropbox/R_package_testing/baRulho/R/detection_distance.R")
Y <- detection_distance(X, spl.cutoff = 5, spl = 85)
aggregate(detction.distance ~ distance, Y, mean)
aggregate(detection.distance ~ distance, Y, mean)
aggregate(detection.distance ~ distance, Y, mean, spl = 85)
Y <- detection_distance(X, spl.cutoff = 5)
aggregate(detection.distance ~ distance, Y, mean)
aggregate(detection.distance ~ sound.id, Y, mean)
aggregate(detection.distance ~ sound.id, Y, min)
aggregate(detection.distance ~ sound.id, Y, min)
aggregate(detection.distance ~ sound.id, Y, max)
source("~/Dropbox/R_package_testing/baRulho/R/detection_distance.R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
source("~/Dropbox/R_package_testing/baRulho/R/detection_distance.R")
source("~/Dropbox/R_package_testing/baRulho/R/detection_distance.R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
source("~/Dropbox/R_package_testing/baRulho/R/detection_distance.R")
Y <- detection_distance(X, spl.cutoff = 5, spl = 85)
Y <- detection_distance(X, spl.cutoff = 5, mar = 0.05)
Y <- detection_distance(X, spl.cutoff = 5, spl = 85, mar = 0.05)
Y <- detection_distance(X[X$distance == 1,], spl.cutoff = 5, mar = 0.05)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
source("~/Dropbox/R_package_testing/baRulho/R/detection_distance.R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
FUN <- "detection_distance"
#run function
run.all()
source(file.path("./R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
X = playback_est
print("basic")
detection_distance_ohn_int(spl.cutoff = 5, spl = 80, frequency = 6000, distance = 1)
#175.7
Y <- detection_distance(X[X$distance == 1,], spl.cutoff = 5, mar = 0.05)
Y <- detection_distance(X, spl.cutoff = 5, spl = 85, mar = 0.05)
View(Y)
aggregate(detection.distance ~ distance, Y, mean)
aggregate(detection.distance ~ sound.id, Y, min)
Y <- detection_distance(X[X$distance == 1,], spl.cutoff = 5, spl = 85, mar = 0.05)
aggregate(detection.distance ~ distance, Y, mean)
aggregate(detection.distance ~ sound.id, Y, min)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
#built site
pkgdown::build_site(lazy = TRUE)
#built site
pkgdown::build_site(lazy = TRUE)
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
#built site
pkgdown::build_site(lazy = TRUE)
#built site
pkgdown::build_site(lazy = TRUE)
#built site
pkgdown::build_site(lazy = TRUE)
#built site
pkgdown::build_site(lazy = TRUE)
#built site
pkgdown::build_site(lazy = TRUE)
install()
devtools::install()
#built site
pkgdown::build_site(lazy = TRUE)
#built site
pkgdown::build_site(lazy = TRUE)
rm(list = ls())
#
# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))
x <- c("RColorBrewer", "devtools", "seewave", "maRce10/warbleR", "monitoR", "pkgdown", "ape", "spelling", "ggplot2", "png", "viridis", "formatR", "kableExtra")
out <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
# install()
#open function in rstudio
open.fun <- function(fun) system(paste("rstudio", file.path("./R", paste0(fun, ".R"))))
# run default arguments in a function
run.def.args <- function(fun = NULL){
#list functions in package
rfiles <- list.files(pattern = ".R", path = "./R", full.names = T)
# select target function file
funfile <- rfiles[gsub(".R", "", basename(rfiles)) == fun]
x <- readLines(funfile, warn = F)
st <- grep('@usage', x, fixed = T)
en <- grep('@param', x, fixed = T)[1]
x <- paste(x[st:(en-1)], collapse = " ")
x <- gsub("usage|\\@|\\#\\'", "", x)
b <- gregexpr(pattern ='\\(|\\)',x)[1][[1]]
x <- substr(x, start = b[1] + 1, stop = b[length(b)] - 1)
spltx <- strsplit(x, "\\,")[[1]]
sl <- vector()
y = 1
while(y <= length(spltx))
{
w <- spltx[y]
z <- 1
if(grepl('\\(', spltx[y]))
{z  <- 0
while(!grepl('\\)', w))
{
z <- z+ 1
w <- paste(w, ",", spltx[y + z], collapse = "")
}
z <- z + 1
}
y = y + z
sl[length(sl) + 1] <- w
}
sl <- sl[sl != "X"]
return(sl)
}
# run it like this:
# for(i in run.def.args("dfts")) try(eval(parse(text = i)), silent = T)
# remove sound files and or image files
rm.sf <- function() unlink(list.files(path = tempdir(), pattern = "\\.wav$", ignore.case = T, full.names = TRUE))
rm.sf.img <- function(mp3 = TRUE) {if(mp3)
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.mp3$|\\.tiff$|\\.jpeg$|\\.jpg$|\\.png$", ignore.case = T, full.names = TRUE)) else
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.tiff$|\\.jpeg$|\\.jpg$|\\.png$", ignore.case = T, full.names = TRUE))}
rm.img <- function() unlink(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.jpg$|\\.png$|\\.pdf$", ignore.case = T, full.names = TRUE))
#open latest image
last.img <- function() system(paste("eog", list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.jpg$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.jpg$", ignore.case = T, full.names = TRUE)))]
))
#open pdf
last.pdf <- function() system(paste("xdg-open", list.files(path = tempdir(), pattern = "\\.pdf$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.pdf", ignore.case = T, full.names = TRUE)))]
))
#find text in functions
find.text <- function(pattern, fun.only = FALSE, path = "./R", ignore.case = T)
{
rfiles <- list.files(pattern = "\\.R$|\\.Rmd$", path = path, full.names = T, all.files = T)
#check where a word is found in each function an return the name of function where it was found and the time
res <- NULL
w <- 1
for(f in rfiles){
x <- readLines(f)
y <- grep(pattern, x, fixed = T, value = T, ignore.case = ignore.case)
if(length(y)>0 & !fun.only) {
print(gsub(pattern = "\\.R", "", (basename(f))))
for(i in y) print(i)
}
if(length(y)>0 & fun.only) res[w] <- gsub(pattern = "\\.R", "", (basename(f)))
# options(nwarnings = 0)
w = w + 1
}
if(fun.only)
{res <- res[!is.na(res)]
return(res)}
}
#replace text
repl.text <- function(pattern, repl, path = "./R", ignore.case = T){
rfiles <- list.files(pattern = "\\.R$|\\.Rmd", path = path, full.names = T, all.files = T)
for(f in rfiles){
#find and replace
x <- readLines(f)
y <- gsub(pattern, repl, x, fixed = T, ignore.case = ignore.case)
cat(y, file=f, sep="\n")
#reread
x <- readLines(f)
w <- grep(repl, x, fixed = T, value = T, ignore.case = T)
if(length(w)>0) {
print(f)
for(i in w) print(i)
}
}
}
#find functions with specific arguments
find.arg <- function(arg1, arg2 = NULL){
rfiles <- list.files(pattern = "\\.R$", path = "./R", full.names = T, all.files = T)
funs <- gsub(pattern = "\\.R", "", (basename(rfiles)))
funs <-grep("zzz|data|package", funs, invert = T, value = T)
l1 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg1, a))) return(x)
}      ))
if(!is.null(arg2))
{l2 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg2, a))) return(x)
}      ))
res <- intersect(l1, l2)
} else res <- l1
return(res)
}
# run default arguments
run.def.args2 <-function(FUN)
{
fm <- formals(FUN)
fm <- fm[sapply(fm, length) > 0 | sapply(fm, is.null)]
fm <- lapply(1:length(fm), function(x) paste(names(fm)[x], "=", fm[x]))
for(i in fm) try(eval(parse(text = i)), silent = T)
}
#find functions with specific arguments and text
find.arg.text <- function(arg1, arg2 = NULL, pattern) {
f1 <- find.text(pattern = pattern, fun.only = T)
f2 <- find.arg(arg1 = arg1, arg2 = arg2)
return(intersect(f1, f2))
}
#big data set
big.seltab <- function(X, nrow = 100){
Y <- X[rep(1:nrow(X), ceiling(nrow/nrow(X)))[1:nrow],]
Y$selec <- 1:nrow(Y)
if(is_selection_table(Y) | is_extended_selection_table(Y))
attr(Y, "check.results") <- attr(X, "check.results")[rep(1:nrow(attr(X, "check.results")), ceiling(nrow/nrow(attr(X, "check.results"))))[1:nrow],]
attr(Y, "check.results")$selec <- 1:nrow(Y)
return(Y)
}
# run all fuctions
run.all <- function() invisible(lapply(list.files(pattern = "\\.R$", path = "./R", full.names = T, all.files = T), function(x) try(source(x), silent = T)))
run.all()
FUN <- "master_sound_file"
#run function
source(file.path("./R", paste0(FUN, ".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4",
"lbh_selec_table"))
writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
# make extended selection table
est <- selection_table(X = lbh_selec_table, extended = TRUE,
confirm.extended = FALSE,
path = tempdir())
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
X = est
print("using margin for noise and method 1")
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 14)
open_wd(tempdir())
est <- readRDS("~/Dropbox/Projects/acoustic_fine_features_zebra_finch/data/processed/extended_selection_table_schroeders.RDS")
print("using margin for noise and method 1")
master.st <- master_sound_file(X = est, file.name = "example_master", dest.path = tempdir(), overwrite = T, gap.duration = 0.3, cex = 14)
