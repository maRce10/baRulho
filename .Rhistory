...)   {
detection_dist_FUN(x,
wl,
spl.cutoff,
temp,
rh,
pa,
hab.att.coef,
max.dist,
resolution,
...)
}
)
detection_dist_FUN <- function(x, spl.cutoff, temp, rh, pa, hab.att.coef, max.distance, resolution, ...) {
# get names of sound and reference
sgnl <- X$TEMP....sgnl[x]
rfrnc <- X$reference[x]
# if sounds are the same or the selection is noise return NA
if (any(c(X$sound.id[X$TEMP....sgnl == sgnl], X$sound.id[X$reference == rfrnc]) == "ambient"))
detect_dist <- NA else {
# extract spectrum for sound and model
sgnl.spl <- peak_freq_list[[which(names(peak_freq_list) == sgnl)]]$spl
rfrnc.pkf <-
peak_freq_list[[which(names(peak_freq_list) == rfrnc)]]$peakf
# get detection distance
detect_dist <- detection_distance_ohn_int(spl.cutoff = spl.cutoff, spl = sgnl.spl, frequency = rfrnc.pkf * 1000, dist = X$distance[x],   temp = temp,
rh = rh,
pa = pa,
hab.att.coef = hab.att.coef,
max.distance = max.distance,
resolution = resolution)
}
return(detect_dist)
}
# get blur ratio
# calculate all spectra apply function
X$detection_distance <-
pbapply::pbsapply(
X = 1:nrow(X),
cl = cl,
FUN = function(x,
wl,
spl.cutoff,
temp,
rh,
pa,
hab.att.coef,
max.distance,
resolution,
...)   {
detection_dist_FUN(x,
wl,
spl.cutoff,
temp,
rh,
pa,
hab.att.coef,
max.distance,
resolution,
...)
}
)
# internal function to get detection distance from spl and cutoff
detection_distance_ohn_int <-
function(spl.cutoff,
spl,
frequency,
distance,
temp = 20,
rh = 60,
pa = 101325,
hab.att.coef = 0.02,
max.distance = 1000,
resolution = 0.1) {
# initial SPL and distance
L <- spl
iter_dist <- 0
# loop until SPL is equal or lower than background noise
while (L - spl.cutoff > 0) {
iter_dist <- iter_dist + resolution
att <-
attenuation(
f = frequency,
temp = temp,
dist = iter_dist,
distance = distance,
rh = rh,
pa,
hab.att.coef = hab.att.coef
)
L <- spl - att$combined.attenuation
if (iter_dist >= max.distance) {
iter_dist <- NA
break
}
}
return(iter_dist)
}
# get blur ratio
# calculate all spectra apply function
X$detection_distance <-
pbapply::pbsapply(
X = 1:nrow(X),
cl = cl,
FUN = function(x,
wl,
spl.cutoff,
temp,
rh,
pa,
hab.att.coef,
max.distance,
resolution,
...)   {
detection_dist_FUN(x,
wl,
spl.cutoff,
temp,
rh,
pa,
hab.att.coef,
max.distance,
resolution,
...)
}
)
wl
x = 1
detection_dist_FUN(x,
wl,
spl.cutoff,
temp,
rh,
pa,
hab.att.coef,
max.distance,
resolution,
...)
detection_dist_FUN(x,
wl,
spl.cutoff,
temp,
rh,
pa,
hab.att.coef,
max.distance,
resolution)
detection_dist_FUN(2,
wl,
spl.cutoff,
temp,
rh,
pa,
hab.att.coef,
max.distance,
resolution)
detection_dist_FUN(3,
wl,
spl.cutoff,
temp,
rh,
pa,
hab.att.coef,
max.distance,
resolution)
detection_dist_FUN(5,
wl,
spl.cutoff,
temp,
rh,
pa,
hab.att.coef,
max.distance,
resolution)
detection_dist_FUN(6,
wl,
spl.cutoff,
temp,
rh,
pa,
hab.att.coef,
max.distance,
resolution)
# get blur ratio
# calculate all spectra apply function
X$detection_distance <-
pbapply::pbsapply(
X = 1:nrow(X),
cl = cl,
FUN = function(x,
wle,
spl.cutoffe,
tempe,
rhe,
pae,
hab.att.coefe,
max.distancee,
resolutione,
...)   {
detection_dist_FUN(x,
wl = wle,
spl.cutoff = spl.cutoffe,
temp = tempe,
rh = rhe,
pa = pae,
hab.att.coef = hab.att.coefe,
max.distance = max.distancee,
resolution = resolution,
...)
}
)
# get blur ratio
# calculate all spectra apply function
X$detection_distance <-
pbapply::pbsapply(
X = 1:nrow(X),
cl = cl,
FUN = function(x,
wle = wl,
spl.cutoffe = spl.cutoff,
tempe = temp,
rhe, = rh,
# get blur ratio
# calculate all spectra apply function
X$detection_distance <-
pbapply::pbsapply(
X = 1:nrow(X),
cl = cl,
FUN = function(x,
wle = wl,
spl.cutoffe = spl.cutoff,
tempe = temp,
rhe = rh,
pae = pa,
hab.att.coefe = hab.att.coef,
max.distancee = max.distance,
resolutione resolutione,
# get blur ratio
# calculate all spectra apply function
X$detection_distance <-
pbapply::pbsapply(
X = 1:nrow(X),
cl = cl,
FUN = function(x,
wle = wl,
spl.cutoffe = spl.cutoff,
tempe = temp,
rhe = rh,
pae = pa,
hab.att.coefe = hab.att.coef,
max.distancee = max.distance,
resolution = resolutione,
...)   {
detection_dist_FUN(x,
wl = wle,
spl.cutoff = spl.cutoffe,
temp = tempe,
rh = rhe,
pa = pae,
hab.att.coef = hab.att.coefe,
max.distance = max.distancee,
resolution = resolution,
...)
}
)
spl.cutoff
spl.cutoff <- 5
# get blur ratio
# calculate all spectra apply function
X$detection_distance <-
pbapply::pbsapply(
X = 1:nrow(X),
cl = cl,
FUN = function(x,
wle = wl,
spl.cutoffe = spl.cutoff,
tempe = temp,
rhe = rh,
pae = pa,
hab.att.coefe = hab.att.coef,
max.distancee = max.distance,
resolution = resolutione,
...)   {
detection_dist_FUN(x,
wl = wle,
spl.cutoff = spl.cutoffe,
temp = tempe,
rh = rhe,
pa = pae,
hab.att.coef = hab.att.coefe,
max.distance = max.distancee,
resolution = resolution,
...)
}
)
# get blur ratio
# calculate all spectra apply function
X$detection_distance <-
pbapply::pbsapply(
X = 1:nrow(X),
cl = cl,
FUN = function(x,
wle = wl,
spl.cutoffe = spl.cutoff,
tempe = temp,
rhe = rh,
pae = pa,
hab.att.coefe = hab.att.coef,
max.distancee = max.distance,
resolutione = resolution,
...)   {
detection_dist_FUN(x,
wl = wle,
spl.cutoff = spl.cutoffe,
temp = tempe,
rh = rhe,
pa = pae,
hab.att.coef = hab.att.coefe,
max.distance = max.distancee,
resolution = resolution,
...)
}
)
source("~/Dropbox/R_package_testing/baRulho/R/detection_distance.R")
# get blur ratio
# calculate all spectra apply function
X$detection_distance <-
pbapply::pbsapply(
X = 1:nrow(X),
cl = cl,
FUN = function(x,
wle = wl,
spl.cutoffe = spl.cutoff,
tempe = temp,
rhe = rh,
pae = pa,
hab.att.coefe = hab.att.coef,
max.distancee = max.distance,
resolutione = resolution,
...)   {
detection_dist_FUN(x,
wl = wle,
spl.cutoff = spl.cutoffe,
temp = tempe,
rh = rhe,
pa = pae,
hab.att.coef = hab.att.coefe,
max.distance = max.distancee,
resolution = resolution,
...)
}
)
# remove temporal columns
X$TEMP....sgnl <- NULL
source("~/Dropbox/R_package_testing/baRulho/R/detection_distance.R")
detection_distance_ohn_int(spl.cutoff = 5, spl = 80, frequency = 6000, dist = 1)
detection_distance(X)
source("~/Dropbox/R_package_testing/baRulho/R/detection_distance.R")
detection_distance(X)
detection_distance(X, spl.cutoff = 5)
Y <- detection_distance(X, spl.cutoff = 5)
View(Y)
source("~/Dropbox/R_package_testing/baRulho/R/detection_distance.R")
Y <- detection_distance(X, spl.cutoff = 5)
source("~/Dropbox/R_package_testing/baRulho/R/detection_distance.R")
source("~/Dropbox/R_package_testing/baRulho/R/detection_distance.R")
Y <- detection_distance(X, spl.cutoff = 5)
Y <- detection_distance(X, spl.cutoff = 5, spl = 85)
source("~/Dropbox/R_package_testing/baRulho/R/detection_distance.R")
source("~/Dropbox/R_package_testing/baRulho/R/detection_distance.R")
Y <- detection_distance(X, spl.cutoff = 5, spl = 85)
aggregate(detction.distance ~ distance, Y, mean)
aggregate(detection.distance ~ distance, Y, mean)
aggregate(detection.distance ~ distance, Y, mean, spl = 85)
Y <- detection_distance(X, spl.cutoff = 5)
aggregate(detection.distance ~ distance, Y, mean)
aggregate(detection.distance ~ sound.id, Y, mean)
aggregate(detection.distance ~ sound.id, Y, min)
aggregate(detection.distance ~ sound.id, Y, min)
aggregate(detection.distance ~ sound.id, Y, max)
source("~/Dropbox/R_package_testing/baRulho/R/detection_distance.R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
source("~/Dropbox/R_package_testing/baRulho/R/detection_distance.R")
source("~/Dropbox/R_package_testing/baRulho/R/detection_distance.R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
source("~/Dropbox/R_package_testing/baRulho/R/detection_distance.R")
Y <- detection_distance(X, spl.cutoff = 5, spl = 85)
Y <- detection_distance(X, spl.cutoff = 5, mar = 0.05)
Y <- detection_distance(X, spl.cutoff = 5, spl = 85, mar = 0.05)
Y <- detection_distance(X[X$distance == 1,], spl.cutoff = 5, mar = 0.05)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
source("~/Dropbox/R_package_testing/baRulho/R/detection_distance.R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
FUN <- "detection_distance"
#run function
run.all()
source(file.path("./R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
X = playback_est
print("basic")
detection_distance_ohn_int(spl.cutoff = 5, spl = 80, frequency = 6000, distance = 1)
#175.7
Y <- detection_distance(X[X$distance == 1,], spl.cutoff = 5, mar = 0.05)
Y <- detection_distance(X, spl.cutoff = 5, spl = 85, mar = 0.05)
View(Y)
aggregate(detection.distance ~ distance, Y, mean)
aggregate(detection.distance ~ sound.id, Y, min)
Y <- detection_distance(X[X$distance == 1,], spl.cutoff = 5, spl = 85, mar = 0.05)
aggregate(detection.distance ~ distance, Y, mean)
aggregate(detection.distance ~ sound.id, Y, min)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
