ifelse(grepl("no.harm", sim_sounds_est$sound.files),
"pure tone",
"harmonics")
# replicate treatments
if (replicates > 1) {
rep_est_list <- lapply(1:replicates, function(x) {
Y <- sim_sounds_est
Y$selec <- x
attr(Y, "check.results")$selec <- x
return(Y)
})
sim_sounds_est <- rep_est_list[[1]]
for (i in 2:replicates)
suppressMessages(sim_sounds_est <-
rbind(sim_sounds_est, rep_est_list[[i]]))
}
# rename sound files
sim_sounds_est <-
rename_est_waves(sim_sounds_est, new.sound.files =  paste0("synthetic_sound_", 1:length(unique(
sim_sounds_est$sound.files))))
sim_sounds_est
length(attr(W, 'wave.objects'))
length(attr(sim_sounds_est, 'wave.objects'))
paste0("synthetic_sound_", 1:length(unique(
sim_sounds_est$sound.files)))
source("~/Dropbox/R_package_testing/warbleR/R/rename_est_waves.R")
sim_sounds_est
paste0("synthetic_sound_", 1:length(unique(
sim_sounds_est$sound.files)))
# rename sound files
sim_sounds_est <-
rename_est_waves(sim_sounds_est, new.sound.files = paste0("synthetic_sound_", 1:length(unique(
sim_sounds_est$sound.files))))
new.sound.files = paste0("synthetic_sound_", 1:length(unique(
sim_sounds_est$sound.files)))
X = sim_sounds_est
# check length of new.sound.files
if (length(new.sound.files) !=  length(attr(W, "wave.objects"))) stop2("length of 'new.sound.files' must be equal to number of wave objects (length(attr(W, 'wave.objects')))")
length(new.sound.files)
length(attr(W, "wave.objects"))
W <- sim_sounds_est
length(attr(W, "wave.objects"))
source("~/Dropbox/R_package_testing/warbleR/R/rename_est_waves.R")
source("~/Dropbox/R_package_testing/baRulho/R/synth_sounds.R")
syso <- synth_sounds(mar = 0.01, frequencies = c(1, 2), steps = 10, durations = 0.1, fm =FALSE, am = FALSE, nharmonics = 2, shuffle = TRUE, mod.amps = rep(c(1:4, 3:2), length.out = 10), replicates = 1)
table(syso$treatments)
# rename sound files
sim_sounds_est <-
rename_est_waves(X = sim_sounds_est, new.sound.files = paste0("synthetic_sound_", 1:length(unique(
sim_sounds_est$sound.files))))
sim_sounds_est$old.sound.file.name <- NULL
# add single treatment column
dur_label <- if (any(treatments == "duration"))
paste0("dur=", sim_sounds_est$duration) else NULL
freq_label <- if (length(frequencies) > 1)
paste0("freq=", sim_sounds_est$frequency) else NULL
freq_dur_label <- paste(dur_label, freq_label, sep = ";")
sim_sounds_est$treatments <- paste(freq_dur_label, apply(sim_sounds_est[, 9:ncol(sim_sounds_est)], 1, paste, collapse = ';'), sep = ";")
rownames(sim_sounds_est) <- 1:nrow(sim_sounds_est)
source("~/Dropbox/R_package_testing/baRulho/R/synth_sounds.R")
eg
# simulate songs
sim.songs <-
warbleR:::pblapply_wrblr_int(1:nrow(eg), function(x) {
sm.sng <- simulate_songs(
n = length(frequencies),
durs = eg$dur[x],
freqs = frequencies,
gaps = mar * 3 / 2,
am.amps = if (eg$am[x] == "no.am")
1
else
mod.amps,
harms = if (eg$harm[x] == "no.harm")
1
else
nharmonics,
harm.amps = if (eg$harm[x] == "no.harm")
1
else
nharmonics:1,
diff.fun = if (eg$fm[x] == "fm")
"BB"
else
"pure.tone",
selec.table = TRUE,
sig2 = sig2,
steps = steps,
file.name = paste(eg[x,], collapse = "_"),
bgn = 0,
seed = seed,
path = temp_dir
)
# add freq room if pure tone
if (eg$fm[x] == "no.fm") {
sm.sng$selec.table$bottom.freq <-
sm.sng$selec.table$bottom.freq - 0.2
sm.sng$selec.table$top.freq <-
sm.sng$selec.table$top.freq + 0.2
}
sm.sng$selec.table$bottom.freq[sm.sng$selec.table$bottom.freq < 0] <-
0.1
sm.sng$selec.table$sim.freq <- as.character(frequencies)
return(sm.sng)
})
sim.songs
syso <- synth_sounds(mar = 0.01, frequencies = c(1, 2), steps = 10, durations = 0.1, fm =FALSE, am = FALSE, nharmonics = 2, shuffle = TRUE, mod.amps = rep(c(1:4, 3:2), length.out = 10), replicates = 1)
table(syso$treatments)
syso <- synth_sounds(mar = 0.01, frequencies = c(1, 2), steps = 10, durations = 0.1, fm =FALSE, am = FALSE, nharmonics = 1, shuffle = TRUE, mod.amps = rep(c(1:4, 3:2), length.out = 10), replicates = 2)
syso <- synth_sounds(mar = 0.01, frequencies = c(1, 2, 3), steps = 10, durations = 0.1, fm =FALSE, am = FALSE, nharmonics = 2, shuffle = TRUE, mod.amps = rep(c(1:4, 3:2), length.out = 10), replicates = 2)
table(syso$treatments)
syso <- synth_sounds(mar = 0.01, frequencies = c(1, 2, 3), steps = 10, durations = 0.1, fm =FALSE, am = FALSE, nharmonics = 1, shuffle = TRUE, mod.amps = rep(c(1:4, 3:2), length.out = 10), replicates = 2)
nharmonics = 1
# error message if Sim.DiffProc not installed
if (!requireNamespace("Sim.DiffProc", quietly = TRUE))
stop2("must install 'Sim.DiffProc' to use this function")
if (length(mod.amps) != steps)
stop("length of mod.aps should be the same as steps `(length(mod.aps) == steps)`")
if (any(treatments == "harmonics") & nharmonics < 2)
stop("when 'harmonics' is included as treatment 'nharmonics' should be higher than 1")
# make all possible combinations
eg <- expand.grid(
duration = durations,
frequency = frequencies,
fm = c("no.fm", "fm"),
am = c("no.am", "am"),
harmonics = c("no.harmonics", "harmonics"),
stringsAsFactors = FALSE
)
# remove levels when treatments not included
if (!fm)
eg <- eg[eg$fm == "no.fm",]
if (!am)
eg <- eg[eg$am == "no.am",]
if (nharmonics > 1)
eg <- eg[eg$harmonics == "no.harmonics",]
# create temporary directory
temp_dir <- tempfile()
dir.create(temp_dir)
# simulate songs
sim.songs <-
warbleR:::pblapply_wrblr_int(1:nrow(eg), function(x) {
sm.sng <- simulate_songs(
n = length(frequencies),
durs = eg$dur[x],
freqs = frequencies,
gaps = mar * 3 / 2,
am.amps = if (eg$am[x] == "no.am")
1
else
mod.amps,
harms = if (eg$harm[x] == "no.harm")
1
else
nharmonics,
harm.amps = if (eg$harm[x] == "no.harm")
1
else
nharmonics:1,
diff.fun = if (eg$fm[x] == "fm")
"BB"
else
"pure.tone",
selec.table = TRUE,
sig2 = sig2,
steps = steps,
file.name = paste(eg[x,], collapse = "_"),
bgn = 0,
seed = seed,
path = temp_dir
)
# add freq room if pure tone
if (eg$fm[x] == "no.fm") {
sm.sng$selec.table$bottom.freq <-
sm.sng$selec.table$bottom.freq - 0.2
sm.sng$selec.table$top.freq <-
sm.sng$selec.table$top.freq + 0.2
}
sm.sng$selec.table$bottom.freq[sm.sng$selec.table$bottom.freq < 0] <-
0.1
sm.sng$selec.table$sim.freq <- as.character(frequencies)
return(sm.sng)
})
# name with parameters
names(sim.songs) <-
sapply(1:nrow(eg), function(x)
paste(eg[x, ],  collapse = "_"))
# extract select tables
sim.song.sts <- lapply(sim.songs, function(X)
X$selec.table)
sim.song.st <- do.call(rbind, sim.song.sts)
if (shuffle)
sim.song.st <- sim.song.st[sample(1:nrow(sim.song.st)),]
# make a single extended selection table for simulation
sim_sounds_est <-
selection_table(
mar = mar,
X = sim.song.st,
extended = TRUE,
pb = FALSE,
confirm.extended = FALSE,
path = temp_dir,
)
# clean column names
sim_sounds_est$frequency <- sim_sounds_est$sim.freq
sim_sounds_est$sim.freq <- NULL
# add treatments
sim_sounds_est$duration <-
sim_sounds_est$end - sim_sounds_est$start
if (fm)
sim_sounds_est$frequency.modulation <-
ifelse(grepl("no.fm", sim_sounds_est$sound.files), "no.fm", "fm")
if (am)
sim_sounds_est$amplitude.modulation <-
ifelse(grepl("no.am", sim_sounds_est$sound.files), "no.am", "am")
if (nharmonics > 1)
sim_sounds_est$harmonics <-
ifelse(grepl("no.harm", sim_sounds_est$sound.files),
"pure tone",
"harmonics")
# replicate treatments
if (replicates > 1) {
rep_est_list <- lapply(1:replicates, function(x) {
Y <- sim_sounds_est
Y$selec <- x
attr(Y, "check.results")$selec <- x
return(Y)
})
sim_sounds_est <- rep_est_list[[1]]
for (i in 2:replicates)
suppressMessages(sim_sounds_est <-
rbind(sim_sounds_est, rep_est_list[[i]]))
}
# rename sound files
sim_sounds_est <-
rename_est_waves(X = sim_sounds_est, new.sound.files = paste0("synthetic_sound_", 1:length(unique(
sim_sounds_est$sound.files))))
sim_sounds_est$old.sound.file.name <- NULL
# add single treatment column
dur_label <- if (any(treatments == "duration"))
paste0("dur=", sim_sounds_est$duration) else NULL
freq_label <- if (length(frequencies) > 1)
paste0("freq=", sim_sounds_est$frequency) else NULL
freq_dur_label <- paste(dur_label, freq_label, sep = ";")
sim_sounds_est$treatments <- paste(freq_dur_label, apply(sim_sounds_est[, 9:ncol(sim_sounds_est)], 1, paste, collapse = ';'), sep = ";")
sim_sounds_est$treatments
sim_sounds_est
ncol(sim_sounds_est)
source("~/Dropbox/R_package_testing/baRulho/R/synth_sounds.R")
syso <- synth_sounds(mar = 0.01, frequencies = c(1, 2, 3), steps = 10, durations = 0.1, fm =FALSE, am = FALSE, nharmonics = 1, shuffle = TRUE, mod.amps = rep(c(1:4, 3:2), length.out = 10), replicates = 2)
table(syso$treatments)
syso <- synth_sounds(mar = 0.01, frequencies = c(1, 2, 3), steps = 10, durations = 0.1, fm =FALSE, am = FALSE, nharmonics = 1, shuffle = TRUE, mod.amps = rep(c(1:4, 3:2), length.out = 10), replicates = 1)
table(syso$treatments)
syso <- synth_sounds(mar = 0.01, frequencies = c(1, 2), steps = 10, durations = 0.1, fm =FALSE, am = FALSE, nharmonics = 1, shuffle = TRUE, mod.amps = rep(c(1:4, 3:2), length.out = 10), replicates = 1)
table(syso$treatments)
frequencies = c(1, 2)
durations = 0.1
fm =FALSE
am = FALSE
nharmonics = 1
# error message if Sim.DiffProc not installed
if (!requireNamespace("Sim.DiffProc", quietly = TRUE))
stop2("must install 'Sim.DiffProc' to use this function")
if (length(mod.amps) != steps)
stop("length of mod.aps should be the same as steps `(length(mod.aps) == steps)`")
if (any(treatments == "harmonics") & nharmonics < 2)
stop("when 'harmonics' is included as treatment 'nharmonics' should be higher than 1")
# make all possible combinations
eg <- expand.grid(
duration = durations,
frequency = frequencies,
fm = c("no.fm", "fm"),
am = c("no.am", "am"),
harmonics = c("no.harmonics", "harmonics"),
stringsAsFactors = FALSE
)
# remove levels when treatments not included
if (!fm)
eg <- eg[eg$fm == "no.fm",]
if (!am)
eg <- eg[eg$am == "no.am",]
if (nharmonics > 1)
eg <- eg[eg$harmonics == "no.harmonics",]
# create temporary directory
temp_dir <- tempfile()
dir.create(temp_dir)
eg
# make all possible combinations
eg <- expand.grid(
duration = durations,
frequency = frequencies,
fm = c("no.fm", "fm"),
am = c("no.am", "am"),
harmonics = c("no.harmonics", "harmonics"),
stringsAsFactors = FALSE
)
# remove levels when treatments not included
if (!fm)
eg <- eg[eg$fm == "no.fm",]
if (!am)
eg <- eg[eg$am == "no.am",]
if (nharmonics > 1)
eg <- eg[eg$harmonics == "no.harmonics",]
eg
source("~/Dropbox/R_package_testing/baRulho/R/synth_sounds.R")
if (nharmonics == 1)
eg <- eg[eg$harmonics == "no.harmonics",]
eg
source("~/Dropbox/R_package_testing/baRulho/R/synth_sounds.R")
syso <- synth_sounds(mar = 0.01, frequencies = c(1, 2), steps = 10, durations = 0.1, fm =FALSE, am = FALSE, nharmonics = 1, shuffle = TRUE, mod.amps = rep(c(1:4, 3:2), length.out = 10), replicates = 1)
table(syso$treatments)
# create temporary directory
temp_dir <- tempfile()
dir.create(temp_dir)
# simulate songs
sim.songs <-
warbleR:::pblapply_wrblr_int(1:nrow(eg), function(x) {
sm.sng <- simulate_songs(
n = length(frequencies),
durs = eg$dur[x],
freqs = frequencies,
gaps = mar * 3 / 2,
am.amps = if (eg$am[x] == "no.am")
1
else
mod.amps,
harms = if (eg$harm[x] == "no.harm")
1
else
nharmonics,
harm.amps = if (eg$harm[x] == "no.harm")
1
else
nharmonics:1,
diff.fun = if (eg$fm[x] == "fm")
"BB"
else
"pure.tone",
selec.table = TRUE,
sig2 = sig2,
steps = steps,
file.name = paste(eg[x,], collapse = "_"),
bgn = 0,
seed = seed,
path = temp_dir
)
# add freq room if pure tone
if (eg$fm[x] == "no.fm") {
sm.sng$selec.table$bottom.freq <-
sm.sng$selec.table$bottom.freq - 0.2
sm.sng$selec.table$top.freq <-
sm.sng$selec.table$top.freq + 0.2
}
sm.sng$selec.table$bottom.freq[sm.sng$selec.table$bottom.freq < 0] <-
0.1
sm.sng$selec.table$sim.freq <- as.character(frequencies)
return(sm.sng)
})
sim.songs
length(frequencies)
source("~/Dropbox/R_package_testing/baRulho/R/synth_sounds.R")
syso <- synth_sounds(mar = 0.01, frequencies = c(1, 2), steps = 10, durations = 0.1, fm =FALSE, am = FALSE, nharmonics = 1, shuffle = TRUE, mod.amps = rep(c(1:4, 3:2), length.out = 10), replicates = 1)
table(syso$treatments)
syso <- synth_sounds(mar = 0.01, frequencies = c(1, 2, 3), steps = 10, durations = 0.1, fm =FALSE, am = FALSE, nharmonics = 1, shuffle = TRUE, mod.amps = rep(c(1:4, 3:2), length.out = 10), replicates = 1)
table(syso$treatments)
syso <- synth_sounds(mar = 0.01, frequencies = c(1, 2, 3), steps = 10, durations = 0.1, fm =FALSE, am = FALSE, nharmonics = 2, shuffle = TRUE, mod.amps = rep(c(1:4, 3:2), length.out = 10), replicates = 1)
table(syso$treatments)
# add single treatment column
dur_label <- if (any(treatments == "duration"))
paste0("dur=", sim_sounds_est$duration) else NULL
freq_label <- if (length(frequencies) > 1)
paste0("freq=", sim_sounds_est$frequency) else NULL
freq_dur_label <- paste(dur_label, freq_label, sep = ";")
freq_dur_label
source("~/Dropbox/R_package_testing/baRulho/R/synth_sounds.R")
syso <- synth_sounds(mar = 0.01, frequencies = c(1, 2, 3), steps = 10, durations = 0.1, fm =FALSE, am = FALSE, nharmonics = 2, shuffle = TRUE, mod.amps = rep(c(1:4, 3:2), length.out = 10), replicates = 1)
table(syso$treatments)
master.sf <- master_sound_file(X = syso, file.name = "consolidated_master", gap.duration = 0.05, dest.path = "~/Downloads/", overwrite = TRUE, amp.marker = 1)
source("~/Dropbox/R_package_testing/warbleR/R/simulate_songs.R")
source("~/Dropbox/R_package_testing/baRulho/R/synth_sounds.R")
source("~/Dropbox/R_package_testing/baRulho/R/synth_sounds.R")
source("~/Dropbox/R_package_testing/baRulho/R/synth_sounds.R")
source("~/Dropbox/R_package_testing/baRulho/R/synth_sounds.R")
source("~/Dropbox/R_package_testing/baRulho/R/synth_sounds.R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
source("~/Dropbox/R_package_testing/baRulho/R/synth_sounds.R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
source("~/Dropbox/R_package_testing/baRulho/R/synth_sounds.R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
FUN <- "synth_sounds"
#run function
source(file.path("./R", paste0(FUN, ".R")))
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
syso <- synth_sounds(mar = 0.01, frequencies = c(1, 2, 3), steps = 10, durations = 0.1, fm = FALSE, am = FALSE, nharmonics = 2, shuffle = TRUE, mod.amps = rep(c(1:4, 3:2), length.out = 10), replicates = 1)
syso <- synth_sounds(mar = 0.01, frequencies = c(1, 2, 3), steps = 10, durations = 0.1, fm = FALSE, am = FALSE, nharmonics = 2, shuffle = TRUE, am.amps = rep(c(1:4, 3:2), length.out = 10), replicates = 1)
remove.packages("warbleR")
rm(list = ls())
#
# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))
x <- c("RColorBrewer", "devtools", "seewave", "maRce10/warbleR", "monitoR", "pkgdown", "ape", "spelling", "ggplot2", "png", "viridis", "formatR", "kableExtra")
out <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
install()
FUN <- "synth_sounds"
#run function
source(file.path("./R", paste0(FUN, ".R")))
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
syso <- synth_sounds(mar = 0.01, frequencies = c(1, 2, 3), steps = 10, durations = 0.1, fm = FALSE, am = FALSE, nharmonics = 2, shuffle = TRUE, am.amps = rep(c(1:4, 3:2), length.out = 10), replicates = 1)
table(syso$treatments)
syso <- synth_sounds(mar = 0.01, frequencies = c(1, 2, 3), steps = 10, durations = 0.1, fm = FALSE, am = FALSE, nharmonics = 2, shuffle = TRUE, am.amps = rep(c(1:4, 3:2), length.out = 10), replicates = 2)
table(syso$treatments)
master.sf <- master_sound_file(X = syso, file.name = "consolidated_master", gap.duration = 0.05, dest.path = "~/Downloads/", overwrite = TRUE, amp.marker = 1)
source("~/Dropbox/R_package_testing/baRulho/R/master_sound_file.R")
master.sf <- master_sound_file(X = syso, file.name = "consolidated_master", gap.duration = 0.05, dest.path = "~/Downloads/", overwrite = TRUE, amp.marker = 1)
syso <- synth_sounds(mar = 0.01, frequencies = c(1, 2, 3, 5), steps = 10, durations = 0.1, fm = TRUE, am = TRUE, nharmonics = 4, shuffle = TRUE, am.amps = rep(c(1:4, 3:2), length.out = 10), replicates = 3)
master.sf <- master_sound_file(X = syso, file.name = "consolidated_master", gap.duration = 0.05, dest.path = "~/Downloads/", overwrite = TRUE, amp.marker = 1)
source("~/Dropbox/R_package_testing/baRulho/R/synth_sounds.R")
syso <- synth_sounds(mar = 0.01, frequencies = c(1, 2, 3, 5), steps = 10, durations = 0.1, fm = TRUE, am = TRUE, nharmonics = 4, shuffle = TRUE, am.amps = rep(c(1:4, 3:2), length.out = 10), replicates = 3)
master.sf <- master_sound_file(X = syso, file.name = "consolidated_master", gap.duration = 0.05, dest.path = "~/Downloads/", overwrite = TRUE, amp.marker = 1)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
#built site
pkgdown::build_site(lazy = TRUE)
rm(list = ls())
#
# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))
x <- c("RColorBrewer", "devtools", "seewave", "maRce10/warbleR", "monitoR", "pkgdown", "ape", "spelling", "ggplot2", "png", "viridis", "formatR", "kableExtra")
out <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
install()
pmf
rm(list = ls())
#
# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))
x <- c("RColorBrewer", "devtools", "seewave", "maRce10/warbleR", "monitoR", "pkgdown", "ape", "spelling", "ggplot2", "png", "viridis", "formatR", "kableExtra")
out <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
install()
