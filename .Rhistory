a2 <- plot_blur_ratio(X = X, dest.path = tempdir(), type = "spectrum"); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
a2 <- plot_blur_ratio(X = X, dest.path = tempdir(), type = "spectrum"); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
a2 <- plot_blur_ratio(X = X, dest.path = tempdir(), type = "spectrum"); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
styler::style_dir("./R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
devtools::test()
test_that("basic", {
# load example data
data("test_sounds_est")
# create "unaligned_test_sounds_est" by adding noise to "test_sounds_est" start and end
unaligned_test_sounds_est <- test_sounds_est
set.seed(123)
noise_time <- sample(c(0.005, -0.005, 0.006, -0.006, 0, 0.002, -0.002),
nrow(unaligned_test_sounds_est),
replace = TRUE
)
attr(unaligned_test_sounds_est, "check.res")$start <-
unaligned_test_sounds_est$start <- unaligned_test_sounds_est$start + noise_time
attr(unaligned_test_sounds_est, "check.res")$end <- unaligned_test_sounds_est$end <-
unaligned_test_sounds_est$end + noise_time
# re align
rts <- realign_test_sounds(X = unaligned_test_sounds_est)
expect_equal(nrow(rts), 25)
expect_equal(ncol(rts), 9)
expect_true(mean(unaligned_test_sounds_est$start) >  mean(rts$start))
expect_equal(class(rts)[1], "extended_selection_table")
})
# load example data
data("test_sounds_est")
# create "unaligned_test_sounds_est" by adding noise to "test_sounds_est" start and end
unaligned_test_sounds_est <- test_sounds_est
set.seed(123)
noise_time <- sample(c(0.005, -0.005, 0.006, -0.006, 0, 0.002, -0.002),
nrow(unaligned_test_sounds_est),
replace = TRUE
)
attr(unaligned_test_sounds_est, "check.res")$start <-
unaligned_test_sounds_est$start <- unaligned_test_sounds_est$start + noise_time
attr(unaligned_test_sounds_est, "check.res")$end <- unaligned_test_sounds_est$end <-
unaligned_test_sounds_est$end + noise_time
# re align
rts <- realign_test_sounds(X = unaligned_test_sounds_est)
nrow(rts)
ncol(rts)
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
styler::style_dir("./R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
devtools::test()
rm(list=ls())
# styler::style_dir("./R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
# styler::style_dir("./R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
# devtools::test()
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
# styler::style_dir("./R")
# devtools::test()
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
spch <- devtools::spell_check(".")
spch
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
# styler::style_dir("./R")
# devtools::test()
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
# styler::style_dir("./R")
# devtools::test()
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
# build tar.gz package file
setwd("./")
system('R CMD build . --resave-data="best"')
# build tar.gz package file
system('R CMD build . --resave-data="best"')
# styler::style_dir("./R")
# devtools::test()
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
# styler::style_dir("./R")
# devtools::test()
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
# styler::style_dir("./R")
# devtools::test()
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
# styler::style_dir("./R")
# devtools::test()
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
# styler::style_dir("./R")
# devtools::test()
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
# styler::style_dir("./R")
# devtools::test()
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
devtools::test()
# load example data
data("test_sounds_est")
# create "unaligned_test_sounds_est" by adding noise to "test_sounds_est" start and end
unaligned_test_sounds_est <- test_sounds_est
set.seed(123)
noise_time <- sample(c(0.005, -0.005, 0.006, -0.006, 0, 0.002, -0.002),
nrow(unaligned_test_sounds_est),
replace = TRUE
)
attr(unaligned_test_sounds_est, "check.res")$start <-
unaligned_test_sounds_est$start <- unaligned_test_sounds_est$start + noise_time
attr(unaligned_test_sounds_est, "check.res")$end <- unaligned_test_sounds_est$end <-
unaligned_test_sounds_est$end + noise_time
# re align
rts <- auto_realign(X = unaligned_test_sounds_est)
expect_equal(nrow(rts), 25)
expect_equal(ncol(rts), 9)
expect_true(mean(unaligned_test_sounds_est$start) >  mean(rts$start))
expect_equal(class(rts)[1], "extended_selection_table")
test_that("basic", {
# load example data
data("test_sounds_est")
# create "unaligned_test_sounds_est" by adding noise to "test_sounds_est" start and end
unaligned_test_sounds_est <- test_sounds_est
set.seed(123)
noise_time <- sample(c(0.005, -0.005, 0.006, -0.006, 0, 0.002, -0.002),
nrow(unaligned_test_sounds_est),
replace = TRUE
)
attr(unaligned_test_sounds_est, "check.res")$start <-
unaligned_test_sounds_est$start <- unaligned_test_sounds_est$start + noise_time
attr(unaligned_test_sounds_est, "check.res")$end <- unaligned_test_sounds_est$end <-
unaligned_test_sounds_est$end + noise_time
# re align
rts <- auto_realign(X = unaligned_test_sounds_est)
expect_equal(nrow(rts), 25)
expect_equal(ncol(rts), 9)
expect_true(mean(unaligned_test_sounds_est$start) >  mean(rts$start))
expect_equal(class(rts)[1], "extended_selection_table")
})
# load example data
data("test_sounds_est")
# create "unaligned_test_sounds_est" by adding noise to "test_sounds_est" start and end
unaligned_test_sounds_est <- test_sounds_est
set.seed(123)
noise_time <- sample(c(0.005, -0.005, 0.006, -0.006, 0, 0.002, -0.002),
nrow(unaligned_test_sounds_est),
replace = TRUE
)
attr(unaligned_test_sounds_est, "check.res")$start <-
unaligned_test_sounds_est$start <- unaligned_test_sounds_est$start + noise_time
attr(unaligned_test_sounds_est, "check.res")$end <- unaligned_test_sounds_est$end <-
unaligned_test_sounds_est$end + noise_time
# re align
rts <- auto_realign(X = unaligned_test_sounds_est)
# load example data
data("test_sounds_est")
# add reference to X
X <- set_reference_sounds(X = test_sounds_est[test_sounds_est$sound.id == test_sounds_est$sound.id[2], ])
# create plots
plot_blur_ratio(X = X, dest.path = tempdir(), pb = FALSE)
fls <-
list.files(path = tempdir(),
pattern = "^blur_ratio",
full.names = TRUE)
fls
rm.img()
# create plots
plot_blur_ratio(X = X, dest.path = tempdir(), pb = FALSE)
fls <-
list.files(path = tempdir(),
pattern = "^blur_ratio",
full.names = TRUE)
fls
X
source("~/.active-rstudio-document", echo=TRUE)
source("~/Dropbox/R_package_testing/baRulho/R/signal_to_noise_ratio.R")
source("~/Dropbox/R_package_testing/baRulho/R/plot_blur_ration.R")
source("~/Dropbox/R_package_testing/baRulho/R/plot_blur_ratio.R")
# load example data
data("test_sounds_est")
# add reference to X
X <- set_reference_sounds(X = test_sounds_est[test_sounds_est$sound.id == test_sounds_est$sound.id[2], ])
unlink(list.files(path = tempdir(),
pattern = "^blur_ratio",
full.names = TRUE))
# create plots
plot_blur_ratio(X = X, dest.path = tempdir(), pb = FALSE)
fls <-
list.files(path = tempdir(),
pattern = "^blur_ratio",
full.names = TRUE)
fls
# Chunk 1
# global option chunks
knitr::opts_chunk$set(dpi = 70,
fig.width = 8,
fig.height = 6)
# load package
library(baRulho)
library(kableExtra)
# also set a working directory, for this example we will use a temporary directory
td <- tempdir()
opts_chunk$set(
tidy = TRUE,
fig.align = "center",
message = FALSE,
warning = FALSE
)
# Chunk 2
# load packages
library(viridis)
library(baRulho)
# synthesize
synth_est <- synth_sounds(
mar = 0.1,
frequencies = c(0.5, 1:5),
durations = 0.1,
fm = FALSE,
am = FALSE,
sampling.rate = 12
)
# convert into a single wave object
synth_wav <- Rraven::exp_est(
X = synth_est,
single.file = TRUE,
wave.object = TRUE
)
# plot spectro
seewave::spectro(
synth_wav,
scale = FALSE,
palette = viridis,
grid = FALSE,
flim = c(0, 5.5),
collevels = seq(-20, 0, 1),
osc = TRUE, colwave = "#482878FF",
heights = c(2, 1),
wl = 100
)
# Chunk 3
# synthesize
synth_est2 <- synth_sounds(
mar = 0.01, sig2 = 0.9,
frequencies = 2:4,
durations = c(0.1, 0.2),
fm = TRUE,
am = TRUE,
shuffle = TRUE,
seed = 123,
sampling.rate = 12
)
# convert into a single wave object
synth_wav2 <- Rraven::exp_est(
X = synth_est2,
single.file = TRUE,
path = td,
wave.object = TRUE
)
# plot spectro
seewave::spectro(
synth_wav2,
tlim = c(0, 3),
scale = FALSE,
palette = viridis,
grid = FALSE,
flim = c(0.5, 5.5),
collevels = seq(-20, 0, 1),
osc = TRUE, colwave = "#482878FF",
heights = c(2, 1),
wl = 140
)
# Chunk 5
kbl <- kable(head(as.data.frame(synth_est2))
, align = "c", row.names = F, format = "html", escape = F)
kbl <- kable_styling(kbl, bootstrap_options = "striped", font_size = 14)
kbl <- scroll_box(kbl, width = "800px", height = "300px")
kbl
# Chunk 6
# check name of wave objects
names(attributes(synth_est2)$wave.objects)
# Chunk 12
data("master_est")
data("test_sounds_est")
# Chunk 13
unique(master_est$sound.files)
unique(test_sounds_est$sound.files)
# Chunk 14
# first remove any other wave file in the temporary working directory (dont do it with yourd data!)
unlink(list.files(path = td, full.names = TRUE, pattern = ".wav"))
# save master sound file
writeWave(object = attr(master_est, "wave.objects")[[1]], file.path(td, "master.wav"))
# save test sound files
for (i in unique(test_sounds_est$sound.files)) {
writeWave(object = attr(test_sounds_est, "wave.objects")[[i]], file.path(td, i))
}
# make annotations a data frame
master_annotations <- as.data.frame(master_est)
# Chunk 16
# set path globally (so no need to write it each time)
options(sound.files.path = td)
markers_position <- find_markers(X = master_annotations, pb= FALSE)
kbl <- kable(markers_position, align = "c", row.names = F, format = "html", escape = F)
kbl <- kable_styling(kbl, bootstrap_options = "striped", font_size = 14)
kbl
# Chunk 18
aligned_tests <-
align_test_files(
X = master_annotations,
Y = markers_position,
by.song = TRUE
)
# Chunk 20
print(TRUE)
# Chunk 21
kbl <- kable(aligned_tests, align = "c", row.names = F, format = "html", escape = F)
kbl <- kable_styling(kbl, bootstrap_options = "striped", font_size = 14)
kbl <- scroll_box(kbl, width = "800px", height = "300px")
kbl
manual_realign(X = aligned_tests, dest.path = tempdir(), duration = 2.4)
manual_realign(X = aligned_tests, duration = 2.4)
manual_realign(X = aligned_tests, Y = master_annotations, duration = 2.4)
aligned_tests
aligned_tests <-
align_test_files(
X = master_annotations,
Y = markers_position,
by.song = TRUE, remove.markers = FALSE
)
manual_realign(X = aligned_tests, Y = master_annotations, duration = 2.4)
manual_realign(X = aligned_tests, Y = master_annotations, duration = 2.4)
remove.packages("baRulho")
devtools::test()
# load example data
data("test_sounds_est")
# create "unaligned_test_sounds_est" by adding noise to "test_sounds_est" start and end
unaligned_test_sounds_est <- test_sounds_est
set.seed(123)
noise_time <- sample(c(0.005, -0.005, 0.006, -0.006, 0, 0.002, -0.002),
nrow(unaligned_test_sounds_est),
replace = TRUE
)
attr(unaligned_test_sounds_est, "check.res")$start <-
unaligned_test_sounds_est$start <- unaligned_test_sounds_est$start + noise_time
attr(unaligned_test_sounds_est, "check.res")$end <- unaligned_test_sounds_est$end <-
unaligned_test_sounds_est$end + noise_time
# re align
rts <- auto_realign(X = unaligned_test_sounds_est)
expect_equal(ncol(rts), 9)
expect_true(mean(unaligned_test_sounds_est$start) >  mean(rts$start))
expect_equal(class(rts)[1], "extended_selection_table")
# load example data
data("test_sounds_est")
# create "unaligned_test_sounds_est" by adding noise to "test_sounds_est" start and end
unaligned_test_sounds_est <- test_sounds_est
set.seed(123)
noise_time <- sample(c(0.005, -0.005, 0.006, -0.006, 0, 0.002, -0.002),
nrow(unaligned_test_sounds_est),
replace = TRUE
)
attr(unaligned_test_sounds_est, "check.res")$start
unaligned_test_sounds_est$start
unaligned_test_sounds_est$start + noise_time
attr(unaligned_test_sounds_est, "check.res")$end
unaligned_test_sounds_est$end <-
unaligned_test_sounds_est$end + noise_time
noise_time
# re align
rts <- auto_realign(X = unaligned_test_sounds_est)
source("./R/auto_realign.R")
source("./R/auto_realign.R")
getwd()
source("~/Dropbox/R_package_testing/baRulho/R/auto_realign.R")
# load example data
data("test_sounds_est")
# create "unaligned_test_sounds_est" by adding noise to "test_sounds_est" start and end
unaligned_test_sounds_est <- test_sounds_est
set.seed(123)
noise_time <- sample(c(0.005, -0.005, 0.006, -0.006, 0, 0.002, -0.002),
nrow(unaligned_test_sounds_est),
replace = TRUE
)
attr(unaligned_test_sounds_est, "check.res")$start <-
unaligned_test_sounds_est$start <- unaligned_test_sounds_est$start + noise_time
attr(unaligned_test_sounds_est, "check.res")$end <- unaligned_test_sounds_est$end <-
unaligned_test_sounds_est$end + noise_time
# re align
rts <- auto_realign(X = unaligned_test_sounds_est)
rts
devtools::test()
devtools::install()
# styler::style_dir("./R")
# devtools::test()
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
# load example data
data("test_sounds_est")
# add reference to X
X <- set_reference_sounds(X = test_sounds_est[test_sounds_est$sound.id == test_sounds_est$sound.id[2], ])
unlink(list.files(path = tempdir(),
pattern = "^blur_ratio",
full.names = TRUE))
# create plots
plot_blur_ratio(X = X, dest.path = tempdir(), pb = FALSE)
fls <-
list.files(path = tempdir(),
pattern = "^blur_ratio",
full.names = TRUE)
fls
unlink(list.files(path = tempdir(),
pattern = "^blur_ratio",
full.names = TRUE))
fls <-
list.files(path = tempdir(),
pattern = "^blur_ratio",
full.names = TRUE)
fls
# create plots
plot_blur_ratio(X = X[1:2, ], dest.path = tempdir(), pb = FALSE)
X
X[1:2, ]
X
# create plots
plot_blur_ratio(X = X[2:3, ], dest.path = tempdir(), pb = FALSE)
fls <-
list.files(path = tempdir(),
pattern = "^blur_ratio",
full.names = TRUE)
fls
# styler::style_dir("./R")
# devtools::test()
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
