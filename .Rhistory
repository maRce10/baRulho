ovlp = ovlp,
to = bp[2] * 1000,
bandpass = TRUE,
wl = wl,
output = "Wave"
)
# calculate envelope
nv <-
warbleR::envelope(
x = clp@left,
ssmooth = env.smooth
)
return(nv)
}
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
# plot blur ratio
plot_blur_ratio(X = test_sounds_est)
warnings()
open_wd(tempdir())
# plot blur ratio
plot_blur_ratio(X = test_sounds_est, dest.path = tempdir())
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
# plot blur ratio
plot_blur_ratio(X = test_sounds_est, dest.path = tempdir())
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
# plot blur ratio
plot_blur_ratio(X = test_sounds_est, dest.path = tempdir())
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
# plot blur ratio
plot_blur_ratio(X = test_sounds_est, dest.path = tempdir())
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
# plot blur ratio
plot_blur_ratio(X = test_sounds_est, dest.path = tempdir())
graphics.off()
# plot blur ratio
plot_blur_ratio(X = test_sounds_est, dest.path = tempdir())
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
par()
FUN <- "plot_blur_ratio"
#run function
run.all()
source(file.path("./R", paste0(FUN, ".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/test_sounds_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# set path in which to save images
options(dest.path = td)
test_sounds_est <- set_reference_sounds(X = test_sounds_est, method = 1)
# plot blur ratio
plot_blur_ratio(X = test_sounds_est, dest.path = tempdir())
# plot blur ratio
plot_blur_ratio(X = test_sounds_est, dest.path = tempdir()); last.img(); rm.img()
; last.img()
last.img()
# plot blur ratio
plot_blur_ratio(X = test_sounds_est, dest.path = tempdir()); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
source("~/Dropbox/R_package_testing/baRulho/R/plot_blur_ratio.R")
load("./data/test_sounds_est.rda")
# add reference column
test_sounds_est <- set_reference_sounds(test_sounds_est, method = 1)
# run blur ratio
br <- blur_ratio(X = test_sounds_est)
# set path in which to save images
options(dest.path = td)
# plot blur ratio
plot_blur_ratio(X = test_sounds_est)
source("~/Dropbox/R_package_testing/baRulho/R/plot_blur_ratio.R")
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
# load packages
library(viridis)
library(baRulho)
library(ggplot2)
load("../data/test_sounds_est.rda")
source("~/Dropbox/R_package_testing/baRulho/R/plot_blur_ratio.R")
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
# set path in which to save images
options(dest.path = td)
# plot blur ratio
plot_blur_ratio(X = test_sounds_est)
# plot blur ratio
plot_blur_ratio(X = test_sounds_est, dest.path = tempdir()); last.img()
# plot blur ratio
plot_blur_ratio(X = test_sounds_est, dest.path = tempdir(), ovlp = 95, hop.size = 11.6); last.img()
# plot blur ratio
plot_blur_ratio(X = test_sounds_est, dest.path = tempdir(), ovlp = 95, hop.size = 4); last.img()
# plot blur ratio
plot_blur_ratio(X = test_sounds_est, dest.path = tempdir(), ovlp = 95, hop.size = 11.6); last.img()
# set path where images will be saved (will be used by all image creating function)
options(dest.path = tempdir())
# create plots
plot_degradation(test_sounds_est)
open_wd(tempdir())
# sort to order panels
test_sounds_est <- test_sounds_est[order(test_sounds_est$sound.id, test_sounds_est$transect, decreasing = FALSE), ]
# create plots
plot_degradation(test_sounds_est)
# Chunk 1
library(knitr)
library(kableExtra)
opts_chunk$set(tidy = TRUE, fig.align = "center", message = FALSE, warning = FALSE)
# Chunk 3
# load packages
library(viridis)
library(baRulho)
library(ggplot2)
load("../data/test_sounds_est.rda")
# Chunk 1
library(knitr)
library(kableExtra)
opts_chunk$set(tidy = TRUE, fig.align = "center", message = FALSE, warning = FALSE)
# Chunk 3
# load packages
library(viridis)
library(baRulho)
library(ggplot2)
# load("../data/test_sounds_est.rda")
source("~/Dropbox/R_package_testing/baRulho/R/plot_blur_ratio.R")
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
# data("test_sounds_est")
options(pb = FALSE)
kbl <- kable(test_sounds_est, align = "c", row.names = F, format = "html", escape = F)
kbl <- column_spec(kbl, 7:9, background = "#ccebff", bold = TRUE)
kbl <- kable_styling(kbl, bootstrap_options = "striped", font_size = 12)
kbl <- scroll_box(kbl, height = "400px")
kbl
# Chunk 4
# count selection per recordings
unique(test_sounds_est$sound.files)
# Chunk 6
tb <- table(test_sounds_est$sound.id, test_sounds_est$distance)
kbl <- kable(tb, align = "c", row.names = TRUE, format = "html", escape = F)
kbl <- kable_styling(kbl, bootstrap_options = "striped", font_size = 12)
kbl
# Chunk 7
# add reference column
test_sounds_est <- set_reference_sounds(test_sounds_est, method = 1)
sbr <- spectrum_blur_ratio(X = test_sounds_est, spectra = TRUE)
spctr <- attributes(sbr)$spectra
spctr$distance <- as.factor(spctr$distance)
ggplot(spctr[spctr$freq > 0.3, ], aes(y = amp, x = freq, col = distance)) +
geom_line() +
facet_wrap(~sound.id) +
scale_color_viridis_d(alpha = 0.7) +
labs(x = "Frequency (kHz)", y = "Amplitude (PMF)") +
coord_flip() +
theme_classic()
# get the frequencies higher than lowest bottom but lower than highest top freq
spctr <- spctr[spctr$freq > min(test_sounds_est$bottom.freq) & spctr$freq < max(test_sounds_est$top.freq), ]
ggplot(spctr, aes(y = amp, x = freq, col = distance)) +
geom_line() +
facet_wrap(~sound.id) +
xlim ()
ggplot(spctr, aes(y = amp, x = freq, col = distance)) +
geom_line() +
facet_wrap(~sound.id) +
xlim(c(5, 10)) +
scale_color_viridis_d(alpha = 0.7) +
labs(x = "Frequency (kHz)", y = "Amplitude (PMF)") +
coord_flip() +
theme_classic()
ggplot(spctr, aes(y = amp, x = freq, col = distance)) +
geom_line() +
facet_wrap(~sound.id) +
xlim(c(5, 11)) +
scale_color_viridis_d(alpha = 0.7) +
labs(x = "Frequency (kHz)", y = "Amplitude (PMF)") +
coord_flip() +
theme_classic()
ggplot(spctr, aes(y = amp, x = freq, col = distance)) +
geom_line() +
facet_wrap(~sound.id) +
xlim(c(5, 13)) +
scale_color_viridis_d(alpha = 0.7) +
labs(x = "Frequency (kHz)", y = "Amplitude (PMF)") +
coord_flip() +
theme_classic()
ggplot(spctr, aes(y = amp, x = freq, col = distance)) +
geom_line() +
facet_wrap(~sound.id) +
# xlim(c(5, 1)) +
scale_color_viridis_d(alpha = 0.7) +
labs(x = "Frequency (kHz)", y = "Amplitude (PMF)") +
coord_flip() +
theme_classic()
sbr <- spectrum_blur_ratio(X = test_sounds_est, spectra = TRUE)
spctr <- attributes(sbr)$spectra
spctr$distance <- as.factor(spctr$distance)
ggplot(spctr[spctr$freq > 0.3, ], aes(y = amp, x = freq, col = distance)) +
geom_line() +
facet_wrap(~sound.id) +
scale_color_viridis_d(alpha = 0.7) +
labs(x = "Frequency (kHz)", y = "Amplitude (PMF)") +
coord_flip() +
theme_classic()
# check spelling
spch <- devtools::spell_check(".")
spch
# styler::style_dir("./R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
# devtools::test()
source("~/Dropbox/R_package_testing/baRulho/R/plot_blur_ratio.R")
# styler::style_dir("./R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
# devtools::test()
devtools::test()
test_that("save file", {
data("master_est")
# create master sound file
master.sel.tab <- master_sound_file(
X = master_est, file.name = "example_master",
dest.path = tempdir(), gap.duration = 0.3)
expect_true(file.exists(file.path(tempdir(), "example_master.wav")))
})
# create master sound file
master.sel.tab <- master_sound_file(
X = master_est, file.name = "example_master",
dest.path = tempdir(), gap.duration = 0.3)
dev.off()
graphics.off()
test_that("save file", {
data("master_est")
# create master sound file
master.sel.tab <- master_sound_file(
X = master_est, file.name = "example_master",
dest.path = tempdir(), gap.duration = 0.3)
expect_true(file.exists(file.path(tempdir(), "example_master.wav")))
})
test_that("basic", {
# load example data
data("test_sounds_est")
# add reference to X
X <- set_reference_sounds(X = test_sounds_est[test_sounds_est$sound.id == test_sounds_est$sound.id[2], ])
# create plots
plot_blur_ratio(X = X, dest.path = tempdir(), pb = FALSE)
fls <-
list.files(path = tempdir(),
pattern = "^blur_ratio",
full.names = TRUE)
expect_length(fls, 4)
unlink(fls)
})
test_that("basic", {
# load example data
data("test_sounds_est")
# add reference to X
X <- set_reference_sounds(X = test_sounds_est[test_sounds_est$sound.id == test_sounds_est$sound.id[2], ])
# create plots
plot_blur_ratio(X = X, dest.path = tempdir(), pb = FALSE)
fls <-
list.files(path = tempdir(),
pattern = "^blur_ratio",
full.names = TRUE)
expect_length(fls, 4)
unlink(fls)
})
devtools::test()
# Chunk 2: packages
source("https://raw.githubusercontent.com/maRce10/sketchy/main/R/load_packages.R")
x <- c("RColorBrewer", "devtools", "seewave", "testthat", github = "maRce10/warbleR", "monitoR", "pkgdown", "ape", "spelling", "ggplot2", "png", "viridis", "formatR", "kableExtra", github = "maRce10/ohun", "cli")
load_packages(x)
# Chunk 3: functions
#open function in rstudio
open.fun <- function(fun) system(paste("rstudio", file.path("./R", paste0(fun, ".R"))))
# run default arguments in a function
run.def.args <- function(fun = NULL){
#list functions in package
rfiles <- list.files(pattern = ".R", path = "./R", full.names = T)
# select target function file
funfile <- rfiles[gsub(".R", "", basename(rfiles)) == fun]
x <- readLines(funfile, warn = F)
st <- grep('@usage', x, fixed = T)
en <- grep('@param', x, fixed = T)[1]
x <- paste(x[st:(en-1)], collapse = " ")
x <- gsub("usage|\\@|\\#\\'", "", x)
b <- gregexpr(pattern ='\\(|\\)',x)[1][[1]]
x <- substr(x, start = b[1] + 1, stop = b[length(b)] - 1)
spltx <- strsplit(x, "\\,")[[1]]
sl <- vector()
y = 1
while(y <= length(spltx))
{
w <- spltx[y]
z <- 1
if(grepl('\\(', spltx[y]))
{z  <- 0
while(!grepl('\\)', w))
{
z <- z+ 1
w <- paste(w, ",", spltx[y + z], collapse = "")
}
z <- z + 1
}
y = y + z
sl[length(sl) + 1] <- w
}
sl <- sl[sl != "X"]
return(sl)
}
# run it like this:
# for(i in run.def.args("dfts")) try(eval(parse(text = i)), silent = T)
# remove sound files and or image files
rm.sf <- function() unlink(list.files(path = tempdir(), pattern = "\\.wav$", ignore.case = T, full.names = TRUE))
rm.sf.img <- function(mp3 = TRUE) {if(mp3)
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.mp3$|\\.tiff$|\\.jpeg$|\\.jpg$|\\.png$", ignore.case = T, full.names = TRUE)) else
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.tiff$|\\.jpeg$|\\.jpg$|\\.png$", ignore.case = T, full.names = TRUE))}
rm.img <- function() unlink(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.jpg$|\\.png$|\\.pdf$", ignore.case = T, full.names = TRUE))
#open latest image
last.img <- function() system(paste("eog", list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.jpg$|\\.png$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.jpg$|\\.png$", ignore.case = T, full.names = TRUE)))]
))
#open pdf
last.pdf <- function() system(paste("xdg-open", list.files(path = tempdir(), pattern = "\\.pdf$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.pdf", ignore.case = T, full.names = TRUE)))]
))
#find text in functions
find.text <- function(pattern, fun.only = FALSE, path = "./R", ignore.case = T)
{
rfiles <- list.files(pattern = "\\.R$|\\.Rmd$", path = path, full.names = T, all.files = T)
#check where a word is found in each function an return the name of function where it was found and the time
res <- NULL
w <- 1
for(f in rfiles){
x <- readLines(f)
y <- grep(pattern, x, fixed = T, value = T, ignore.case = ignore.case)
if(length(y)>0 & !fun.only) {
print(gsub(pattern = "\\.R", "", (basename(f))))
for(i in y) print(i)
}
if(length(y)>0 & fun.only) res[w] <- gsub(pattern = "\\.R", "", (basename(f)))
# options(nwarnings = 0)
w = w + 1
}
if(fun.only)
{res <- res[!is.na(res)]
return(res)}
}
#replace text
repl.text <- function(pattern, repl, path = "./R", ignore.case = T){
rfiles <- list.files(pattern = "\\.R$|\\.Rmd", path = path, full.names = T, all.files = T)
for(f in rfiles){
#find and replace
x <- readLines(f)
y <- gsub(pattern, repl, x, fixed = T, ignore.case = ignore.case)
cat(y, file=f, sep="\n")
#reread
x <- readLines(f)
w <- grep(repl, x, fixed = T, value = T, ignore.case = T)
if(length(w)>0) {
print(f)
for(i in w) print(i)
}
}
}
#find functions with specific arguments
find.arg <- function(arg1, arg2 = NULL){
rfiles <- list.files(pattern = "\\.R$", path = "./R", full.names = T, all.files = T)
funs <- gsub(pattern = "\\.R", "", (basename(rfiles)))
funs <-grep("zzz|data|package", funs, invert = T, value = T)
l1 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg1, a))) return(x)
}      ))
if(!is.null(arg2))
{l2 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg2, a))) return(x)
}      ))
res <- intersect(l1, l2)
} else res <- l1
return(res)
}
# run default arguments
run.def.args2 <-function(FUN)
{
fm <- formals(FUN)
fm <- fm[sapply(fm, length) > 0 | sapply(fm, is.null)]
fm <- lapply(1:length(fm), function(x) paste(names(fm)[x], "=", fm[x]))
for(i in fm) try(eval(parse(text = i)), silent = T)
}
#find functions with specific arguments and text
find.arg.text <- function(arg1, arg2 = NULL, pattern) {
f1 <- find.text(pattern = pattern, fun.only = T)
f2 <- find.arg(arg1 = arg1, arg2 = arg2)
return(intersect(f1, f2))
}
#big data set
big.seltab <- function(X, nrow = 100){
Y <- X[rep(1:nrow(X), ceiling(nrow/nrow(X)))[1:nrow],]
Y$selec <- 1:nrow(Y)
if(is_selection_table(Y) | is_extended_selection_table(Y))
attr(Y, "check.results") <- attr(X, "check.results")[rep(1:nrow(attr(X, "check.results")), ceiling(nrow/nrow(attr(X, "check.results"))))[1:nrow],]
attr(Y, "check.results")$selec <- 1:nrow(Y)
return(Y)
}
# run all fuctions
run.all <- function() invisible(lapply(list.files(pattern = "\\.R$", path = "./R", full.names = T, all.files = T), function(x) try(source(x), silent = T)))
run.all()
FUN <- "plot_blur_ratio"
#run function
run.all()
source(file.path("./R", paste0(FUN, ".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/test_sounds_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# set path in which to save images
options(dest.path = td)
test_sounds_est <- set_reference_sounds(X = test_sounds_est, method = 1)
# plot blur ratio
plot_blur_ratio(X = test_sounds_est, dest.path = tempdir(), ovlp = 95, hop.size = 11.6); last.img()
a2 <- plot_blur_ratio(X = X, dest.path = tempdir(), type = "spectrum"); last.img(); rm.img()
X <- set_reference_sounds(X = test_sounds_est, method = 2)
X <- set_reference_sounds(X = test_sounds_est, method = 1)
load("./data/test_sounds_est.rda")
# plot blur ratio
plot_blur_ratio(X = X, dest.path = tempdir(), ovlp = 95, hop.size = 11.6); last.img()
X <- set_reference_sounds(X = test_sounds_est, method = 1)
# plot blur ratio
plot_blur_ratio(X = X, dest.path = tempdir(), ovlp = 95, hop.size = 11.6); last.img()
a2 <- plot_blur_ratio(X = X, dest.path = tempdir(), type = "spectrum"); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
X <- set_reference_sounds(X = test_sounds_est, method = 2)
a2 <- plot_blur_ratio(X = X, dest.path = tempdir()); last.img(); rm.img()
a2 <- plot_blur_ratio(X = X, dest.path = tempdir(), type = "spectrum"); last.img(); rm.img()
X <- set_reference_sounds(X = test_sounds_est, method = 2)
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
X <- set_reference_sounds(X = test_sounds_est, method = 2)
a2 <- plot_blur_ratio(X = X, dest.path = tempdir()); last.img(); rm.img()
a2 <- plot_blur_ratio(X = X, dest.path = tempdir(), type = "spectrum"); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
a2 <- plot_blur_ratio(X = X, dest.path = tempdir(), type = "spectrum"); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
a2 <- plot_blur_ratio(X = X, dest.path = tempdir(), type = "spectrum"); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
a2 <- plot_blur_ratio(X = X, dest.path = tempdir(), type = "spectrum"); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
styler::style_dir("./R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
devtools::test()
test_that("basic", {
# load example data
data("test_sounds_est")
# create "unaligned_test_sounds_est" by adding noise to "test_sounds_est" start and end
unaligned_test_sounds_est <- test_sounds_est
set.seed(123)
noise_time <- sample(c(0.005, -0.005, 0.006, -0.006, 0, 0.002, -0.002),
nrow(unaligned_test_sounds_est),
replace = TRUE
)
attr(unaligned_test_sounds_est, "check.res")$start <-
unaligned_test_sounds_est$start <- unaligned_test_sounds_est$start + noise_time
attr(unaligned_test_sounds_est, "check.res")$end <- unaligned_test_sounds_est$end <-
unaligned_test_sounds_est$end + noise_time
# re align
rts <- realign_test_sounds(X = unaligned_test_sounds_est)
expect_equal(nrow(rts), 25)
expect_equal(ncol(rts), 9)
expect_true(mean(unaligned_test_sounds_est$start) >  mean(rts$start))
expect_equal(class(rts)[1], "extended_selection_table")
})
# load example data
data("test_sounds_est")
# create "unaligned_test_sounds_est" by adding noise to "test_sounds_est" start and end
unaligned_test_sounds_est <- test_sounds_est
set.seed(123)
noise_time <- sample(c(0.005, -0.005, 0.006, -0.006, 0, 0.002, -0.002),
nrow(unaligned_test_sounds_est),
replace = TRUE
)
attr(unaligned_test_sounds_est, "check.res")$start <-
unaligned_test_sounds_est$start <- unaligned_test_sounds_est$start + noise_time
attr(unaligned_test_sounds_est, "check.res")$end <- unaligned_test_sounds_est$end <-
unaligned_test_sounds_est$end + noise_time
# re align
rts <- realign_test_sounds(X = unaligned_test_sounds_est)
nrow(rts)
ncol(rts)
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
styler::style_dir("./R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
devtools::test()
rm(list=ls())
