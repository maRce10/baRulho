data("degradation_est")
# create subset of data with only re-recorded files
rerecorded_est <- degradation_est[degradation_est$sound.files != "master.wav", ]
# create "unaligned_rerecorded_est" by adding noise to "rerecorded_est" start and end
unaligned_rerecorded_est <- rerecorded_est
set.seed(123)
noise_time <- sample(c(0.005, -0.005, 0.006, -0.006, 0, 0.002, -0.002),
nrow(unaligned_rerecorded_est),
replace = TRUE
)
attr(unaligned_rerecorded_est, "check.res")$start <-
unaligned_rerecorded_est$start <- unaligned_rerecorded_est$start + noise_time
attr(unaligned_rerecorded_est, "check.res")$end <- unaligned_rerecorded_est$end <-
unaligned_rerecorded_est$end + noise_time
# re align
rts <- realign_test_sounds(X = unaligned_rerecorded_est)
expect_equal(nrow(rts), 25)
expect_equal(ncol(rts), 9)
expect_true(mean(unaligned_rerecorded_est$start) >  mean(rts$start))
expect_equal(class(rts)[1], "extended_selection_table")
})
use_test()
data("degradation_est")
X <- degradation_est[degradation_est$sound.files != "master.wav", ]
br <- signal_to_noise_ratio(X = X, method = 1)
X <- degradation_est[degradation_est$sound.files != "master.wav", ]
br <- signal_to_noise_ratio(X = X)
br <- signal_to_noise_ratio(X = X, mar = 0.1)
snr <- signal_to_noise_ratio(X = X, mar = 0.1)
sum(is.na(snr$signal.to.noise.ratio))
View(snr)
nrow(snr)
ncol(snr)
class(snr)[1]
data("degradation_est")
# set temporary directory
td <- tempdir()
for (i in unique(degradation_est$sound.files)[-1])
writeWave(object = attr(degradation_est, "wave.objects")[[i]], file.path(td, i))
options(sound.files.path = td, pb = FALSE)
X <- as.data.frame(degradation_est[degradation_est$sound.files != "master.wav", ])
expect_warning(snr <- signal_to_noise_ratio(X = X, mar = 0.1))
snr <- signal_to_noise_ratio(X = X, mar = 0.1)
sum(is.na(snr$signal.to.noise.ratio))
nrow(snr)
ncol(snr)
class(snr)[1]
test_that("using extended table", {
data("degradation_est")
X <- degradation_est[degradation_est$sound.files != "master.wav", ]
snr <- signal_to_noise_ratio(X = X, mar = 0.1)
expect_equal(sum(is.na(snr$signal.to.noise.ratio)), 9)
expect_equal(nrow(snr), 25)
expect_equal(ncol(snr), 10)
expect_equal(class(snr)[1], "extended_selection_table")
})
# set temporary directory
td <- tempdir()
for (i in unique(degradation_est$sound.files)[-1])
writeWave(object = attr(degradation_est, "wave.objects")[[i]], file.path(td, i))
options(sound.files.path = td, pb = FALSE)
X <- as.data.frame(degradation_est[degradation_est$sound.files != "master.wav", ])
snr <- signal_to_noise_ratio(X = X, mar = 0.1)
snr
sum(is.na(snr$signal.to.noise.ratio))
test_that("using extended table", {
data("degradation_est")
X <- degradation_est[degradation_est$sound.files != "master.wav", ]
snr <- signal_to_noise_ratio(X = X, mar = 0.1)
expect_equal(sum(is.na(snr$signal.to.noise.ratio)), 9)
expect_equal(nrow(snr), 25)
expect_equal(ncol(snr), 10)
expect_equal(class(snr)[1], "extended_selection_table")
})
X <- degradation_est[degradation_est$sound.files != "master.wav", ]
snr <- signal_to_noise_ratio(X = X, mar = 0.1)
expect_equal(sum(is.na(snr$signal.to.noise.ratio)), 9)
sum(is.na(snr$signal.to.noise.ratio))
test_that("using extended table", {
data("degradation_est")
X <- degradation_est[degradation_est$sound.files != "master.wav", ]
snr <- signal_to_noise_ratio(X = X, mar = 0.1)
expect_equal(sum(is.na(snr$signal.to.noise.ratio)), 5)
expect_equal(nrow(snr), 25)
expect_equal(ncol(snr), 10)
expect_equal(class(snr)[1], "extended_selection_table")
})
test_that("using data frame", {
data("degradation_est")
# set temporary directory
td <- tempdir()
for (i in unique(degradation_est$sound.files)[-1])
writeWave(object = attr(degradation_est, "wave.objects")[[i]], file.path(td, i))
options(sound.files.path = td, pb = FALSE)
X <- as.data.frame(degradation_est[degradation_est$sound.files != "master.wav", ])
snr <- signal_to_noise_ratio(X = X, mar = 0.1)
expect_equal(sum(is.na(snr$signal.to.noise.ratio)), 5)
expect_equal(nrow(snr), 25)
expect_equal(ncol(snr), 10)
expect_equal(class(snr)[1], "data.frame")
})
use_test()
data("degradation_est")
X <- degradation_est[degradation_est$sound.files != "master.wav", ]
X <- degradation_est[degradation_est$sound.files != "master.wav", ]
xc <- spcc(X = X, method = 1)
sum(is.na(xc$cross.correlation))
nrow(xc)
ncol(xc)
View(xc)
data("degradation_est")
# set temporary directory
td <- tempdir()
for (i in unique(degradation_est$sound.files)[-1])
writeWave(object = attr(degradation_est, "wave.objects")[[i]], file.path(td, i))
options(sound.files.path = td, pb = FALSE)
expect_warning(xc <- spcc(X = X, method = 2))
# set temporary directory
td <- tempdir()
for (i in unique(degradation_est$sound.files)[-1])
writeWave(object = attr(degradation_est, "wave.objects")[[i]], file.path(td, i))
options(sound.files.path = td, pb = FALSE)
por
X <- as.data.frame(degradation_est[degradation_est$sound.files != "master.wav", ])
expect_warning(xc <- spcc(X = X, method = 2))
sum(is.na(xc$cross.correlation))
xc$cross.correlation
nrow(xc)
ncol(xc)
class(xc)[1]
test_that("using extended table method 1", {
data("degradation_est")
X <- degradation_est[degradation_est$sound.files != "master.wav", ]
xc <- spcc(X = X, method = 1)
expect_equal(sum(is.na(xc$cross.correlation)), 9)
expect_equal(nrow(xc), 25)
expect_equal(ncol(xc), 11)
expect_equal(class(xc)[1], "extended_selection_table")
})
test_that("using data frame", {
data("degradation_est")
# set temporary directory
td <- tempdir()
for (i in unique(degradation_est$sound.files)[-1])
writeWave(object = attr(degradation_est, "wave.objects")[[i]], file.path(td, i))
options(sound.files.path = td, pb = FALSE)
por
X <- as.data.frame(degradation_est[degradation_est$sound.files != "master.wav", ])
expect_warning(xc <- spcc(X = X, method = 2))
expect_equal(sum(is.na(xc$cross.correlation)), 9)
expect_equal(nrow(xc), 25)
expect_equal(ncol(xc), 11)
expect_equal(class(xc)[1], "data.frame")
})
test_that("using extended table method 1", {
data("degradation_est")
X <- degradation_est[degradation_est$sound.files != "master.wav", ]
xc <- spcc(X = X, method = 1)
expect_equal(sum(is.na(xc$cross.correlation)), 9)
expect_equal(nrow(xc), 25)
expect_equal(ncol(xc), 11)
expect_equal(class(xc)[1], "extended_selection_table")
})
test_that("using data frame", {
data("degradation_est")
# set temporary directory
td <- tempdir()
for (i in unique(degradation_est$sound.files)[-1])
writeWave(object = attr(degradation_est, "wave.objects")[[i]], file.path(td, i))
options(sound.files.path = td, pb = FALSE)
X <- as.data.frame(degradation_est[degradation_est$sound.files != "master.wav", ])
expect_warning(xc <- spcc(X = X, method = 2))
expect_equal(sum(is.na(xc$cross.correlation)), 9)
expect_equal(nrow(xc), 25)
expect_equal(ncol(xc), 11)
expect_equal(class(xc)[1], "data.frame")
})
use_test()
test_that("using extended table and method 1", {
data("degradation_est")
X <- degradation_est[degradation_est$sound.files != "master.wav", ]
br <- spectrum_blur_ratio(X = X, method = 1)
expect_equal(sum(is.na(br$blur.ratio)), 9)
expect_equal(nrow(br), 25)
expect_equal(ncol(br),11)
expect_equal(class(br)[1], "extended_selection_table")
})
X <- degradation_est[degradation_est$sound.files != "master.wav", ]
br <- spectrum_blur_ratio(X = X, method = 1)
test_that("using extended table and method 1", {
data("degradation_est")
X <- degradation_est[degradation_est$sound.files != "master.wav", ]
br <- spectrum_blur_ratio(X = X, method = 1)
expect_equal(sum(is.na(br$spectrum.blur.ratio)), 9)
expect_equal(nrow(br), 25)
expect_equal(ncol(br),11)
expect_equal(class(br)[1], "extended_selection_table")
})
test_that("using data frame", {
data("degradation_est")
# set temporary directory
td <- tempdir()
for (i in unique(degradation_est$sound.files)[-1])
writeWave(object = attr(degradation_est, "wave.objects")[[i]], file.path(td, i))
options(sound.files.path = td, pb = FALSE)
X <- as.data.frame(degradation_est[degradation_est$sound.files != "master.wav", ])
expect_warning(br <- spectrum_blur_ratio(X = X, method = 2))
expect_equal(sum(is.na(br$spectrum.blur.ratio)), 13)
expect_equal(nrow(br), 25)
expect_equal(ncol(br), 11)
expect_equal(class(br)[1], "data.frame")
})
use_test()
test_that("using extended table and method 1", {
data("degradation_est")
X <- degradation_est[degradation_est$sound.files != "master.wav", ]
ec <- spectrum_correlation(X = X, method = 1)
expect_equal(sum(is.na(ec$spectrum.correlation)), 9)
expect_equal(nrow(ec), 25)
expect_equal(ncol(ec), 11)
expect_equal(class(ec)[1], "extended_selection_table")
})
test_that("using data frame and method 2", {
data("degradation_est")
# set temporary directory
td <- tempdir()
for (i in unique(degradation_est$sound.files)[-1])
writeWave(object = attr(degradation_est, "wave.objects")[[i]], file.path(td, i))
options(sound.files.path = td, pb = FALSE)
X <- as.data.frame(degradation_est[degradation_est$sound.files != "master.wav", ])
expect_warning(ec <- spectrum_correlation(X = X, method = 2))
expect_equal(sum(is.na(ec$spectrum.correlation)), 13)
expect_equal(nrow(ec), 25)
expect_equal(ncol(ec), 11)
expect_equal(class(ec)[1], "data.frame")
})
data("degradation_est")
# set temporary directory
td <- tempdir()
for (i in unique(degradation_est$sound.files)[-1])
writeWave(object = attr(degradation_est, "wave.objects")[[i]], file.path(td, i))
options(sound.files.path = td, pb = FALSE)
X <- as.data.frame(degradation_est[degradation_est$sound.files != "master.wav", ])
expect_warning(ec <- spectrum_correlation(X = X, method = 2))
expect_equal(sum(is.na(ec$spectrum.correlation)), 13)
sum(is.na(ec$spectrum.correlation))
View(ec)
data("degradation_est")
X <- degradation_est[degradation_est$sound.files != "master.wav", ]
ec <- spectrum_correlation(X = X, method = 1)
expect_equal(sum(is.na(ec$spectrum.correlation)), 9)
expect_equal(nrow(ec), 25)
expect_equal(ncol(ec), 11)
expect_equal(class(ec)[1], "extended_selection_table")
sum(is.na(ec$spectrum.correlation))
data("degradation_est")
# set temporary directory
td <- tempdir()
for (i in unique(degradation_est$sound.files)[-1])
writeWave(object = attr(degradation_est, "wave.objects")[[i]], file.path(td, i))
options(sound.files.path = td, pb = FALSE)
X <- as.data.frame(degradation_est[degradation_est$sound.files != "master.wav", ])
expect_warning(ec <- spectrum_correlation(X = X, method = 2))
sum(is.na(ec$spectrum.correlation))
nrow(ec)
test_that("using extended table and method 1", {
data("degradation_est")
X <- degradation_est[degradation_est$sound.files != "master.wav", ]
ec <- spectrum_correlation(X = X, method = 1)
expect_equal(sum(is.na(ec$spectrum.correlation)), 9)
expect_equal(nrow(ec), 25)
expect_equal(ncol(ec), 11)
expect_equal(class(ec)[1], "extended_selection_table")
})
test_that("using data frame and method 2", {
data("degradation_est")
# set temporary directory
td <- tempdir()
for (i in unique(degradation_est$sound.files)[-1])
writeWave(object = attr(degradation_est, "wave.objects")[[i]], file.path(td, i))
options(sound.files.path = td, pb = FALSE)
X <- as.data.frame(degradation_est[degradation_est$sound.files != "master.wav", ])
expect_warning(ec <- spectrum_correlation(X = X, method = 2))
expect_equal(sum(is.na(ec$spectrum.correlation)), 9)
expect_equal(nrow(ec), 25)
expect_equal(ncol(ec), 11)
expect_equal(class(ec)[1], "data.frame")
})
use_test()
test_that("using extended table and method 1", {
data("degradation_est")
X <- degradation_est[degradation_est$sound.files != "master.wav", ]
snr <- tail_to_signal_ratio(X = X, mar = 0.1)
expect_equal(sum(is.na(snr$signal.to.noise.ratio)), 5)
expect_equal(nrow(snr), 25)
expect_equal(ncol(snr), 10)
expect_equal(class(snr)[1], "extended_selection_table")
})
snr <- tail_to_signal_ratio(X = X, mar = 0.1)
test_that("using extended table and method 1", {
data("degradation_est")
X <- degradation_est[degradation_est$sound.files != "master.wav", ]
snr <- tail_to_signal_ratio(X = X, mar = 0.1)
expect_equal(sum(is.na(snr$tail.to.signal.ratio)), 5)
expect_equal(nrow(snr), 25)
expect_equal(ncol(snr), 10)
expect_equal(class(snr)[1], "extended_selection_table")
})
test_that("using data frame", {
data("degradation_est")
# set temporary directory
td <- tempdir()
for (i in unique(degradation_est$sound.files)[-1])
writeWave(object = attr(degradation_est, "wave.objects")[[i]], file.path(td, i))
options(sound.files.path = td, pb = FALSE)
X <- as.data.frame(degradation_est[degradation_est$sound.files != "master.wav", ])
snr <- tail_to_signal_ratio(X = X, mar = 0.1)
expect_equal(sum(is.na(snr$tail.to.signal.ratio)), 5)
expect_equal(nrow(snr), 25)
expect_equal(ncol(snr), 10)
expect_equal(class(snr)[1], "data.frame")
})
use_test()
synthetic_est <- synth_sounds(
mar = 0.01,
frequencies = c(1, 2, 3, 5),
durations = 0.1,
fm = TRUE,
am = TRUE,
nharmonics = 4,
shuffle = TRUE,
replicates = 3
)
synthetic_est
ss <- synth_sounds(
mar = 0.01,
frequencies = c(1, 2, 3, 5),
durations = 0.1,
fm = TRUE,
am = TRUE,
nharmonics = 4,
shuffle = TRUE,
replicates = 3
)
nrow(ss)
ncol(ss)
class(ss)[1]
test_that("basic", {
ss <- synth_sounds(
mar = 0.01,
frequencies = c(1, 2, 3, 5),
durations = 0.1,
fm = TRUE,
am = TRUE,
nharmonics = 4,
shuffle = TRUE,
replicates = 3
)
expect_equal(nrow(ss), 96)
expect_equal(ncol(ss), 14)
expect_equal(class(ss)[1], "extended_selection_table")
})
devtools::test()
source("~/Dropbox/R_package_testing/baRulho/R/excess_attenuation.R")
devtools::test()
data("degradation_est")
# set temporary directory
td <- tempdir()
for (i in unique(degradation_est$sound.files)[-1])
writeWave(object = attr(degradation_est, "wave.objects")[[i]], file.path(td, i))
options(sound.files.path = td, pb = FALSE)
X <- as.data.frame(degradation_est[degradation_est$sound.files != "master.wav", ])
dd <- detection_distance(X = X[X$distance == 1, ], spl.cutoff = 5, mar = 0.05)
expect_equal(sum(is.na(dd$detection.distance)), 1)
source("~/Dropbox/R_package_testing/baRulho/tests/testthat/test-detection_distance.R")
devtools::test()
styler::style_dir("./R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
source("~/Dropbox/R_package_testing/baRulho/tests/testthat/test-plot_align_sounds.R")
fls <- list.files(path = tempdir(), pattern = "^plot_align", full.names = TRUE)
unlink(fls)
test_that("basic", {
# load example data
data("degradation_est")
# create subset of data with only re-recorded files
rerecorded_est <- degradation_est[degradation_est$sound.files != "master.wav", ]
# plot (look into temporary working directory `tempdir()`)
plot_align_sounds(X = rerecorded_est[rerecorded_est$sound.files == rerecorded_est$sound.files[1]], dest.path = tempdir(), duration = 1, ovlp = 0)
fls <- list.files(path = tempdir(), pattern = "^plot_align", full.names = TRUE)
expect_length(fls, 1)
unlink(fls)
})
styler::style_dir("./R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
FUN <- "plot_degradation"
#run function
run.all()
source(file.path("./R", paste0(FUN, ".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/degradation_est.rda")
#tests
X = degradation_est[degradation_est$sound.files != "master.wav", ]
path = tempdir()
names(X)
X$transect
# adjust wl based on hope.size
if (is.null(wl)) {
wl <-
round(
read_sound_file(
X,
index = 1,
header = TRUE,
path = path
)$sample.rate * hop.size / 1000,
0
)
}
FUN <- "plot_degradation"
#run function
run.all()
source(file.path("./R", paste0(FUN, ".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/degradation_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
X = degradation_est[degradation_est$sound.files != "master.wav", ]
path = tempdir()
# adjust wl based on hope.size
if (is.null(wl)) {
wl <-
round(
read_sound_file(
X,
index = 1,
header = TRUE,
path = path
)$sample.rate * hop.size / 1000,
0
)
}
# make wl even if odd
if (!(wl %% 2) == 0)
wl <- wl + 1
# set clusters for windows OS
if (Sys.info()[1] == "Windows" & cores > 1) {
cl <- parallel::makePSOCKcluster(getOption("cl.cores", cores))
} else {
cl <- cores
}
# ingnore ssmooth if msmooth is supplied
if (!is.null(msmooth)) {
ssmooth <- NULL
}
X <- X[X$sound.id != "ambient", ]
# stop if more than 1 sample per distance but no transect info
if (any(table(X$sound.id, X$distance)) > 1 & is.null(X$transect)) {
stop2("There are more than 1 test sound per sound.id/distance combination but no 'transect' column to group by transect")
}
# stop if there are more than 1 sample for distance sound id and transect combination (only 1 samp)
if (!is.null(X$transect)) {
if (any(table(X$sound.id, X$distance, X$transect)) > 1) {
stop2("There are more than 1 test sound per sound.id/distance/transect combination")
}
}
if (is.null(X$transect)) {
transects <- 1
X$transect <- 1
} else {
unique(X$transect)
}
X <- prep_X_bRlo_int(X,
method = method,
cores = cores,
pb = pb)
X
View(X)
X$sound.id
unique(X$sound.id)
sapply(unique(X$sound.id), function(x) unique(X$reference[X$sound.id == x]))
lapply(unique(X$sound.id), function(x) unique(X$reference[X$sound.id == x]))
X <- prep_X_bRlo_int(X,
method = 2,
cores = cores,
pb = pb)
lapply(unique(X$sound.id), function(x) unique(X$reference[X$sound.id == x]))
View(X)
X$soun.id.transect <- paste(X$sound.id, X$transect, sep = "-")
X$sound.id.transect <- paste(X$sound.id, X$transect, sep = "-")
lapply(unique(X$sound.id.transect), function(x) unique(X$reference[X$sound.id.transect == x]))
X <- prep_X_bRlo_int(X,
method = 1,
cores = cores,
pb = pb)
X$sound.id.transect <- paste(X$sound.id, X$transect, sep = "-")
lapply(unique(X$sound.id.transect), function(x) unique(X$reference[X$sound.id.transect == x]))
