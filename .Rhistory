last.img <- function() system(paste("eog", list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.jpg$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.jpg$", ignore.case = T, full.names = TRUE)))]
))
#open pdf
last.pdf <- function() system(paste("xdg-open", list.files(path = tempdir(), pattern = "\\.pdf$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.pdf", ignore.case = T, full.names = TRUE)))]
))
#find text in functions
find.text <- function(pattern, fun.only = FALSE, path = "./R", ignore.case = T)
{
rfiles <- list.files(pattern = "\\.R$|\\.Rmd$", path = path, full.names = T, all.files = T)
#check where a word is found in each function an return the name of function where it was found and the time
res <- NULL
w <- 1
for(f in rfiles){
x <- readLines(f)
y <- grep(pattern, x, fixed = T, value = T, ignore.case = ignore.case)
if(length(y)>0 & !fun.only) {
print(gsub(pattern = "\\.R", "", (basename(f))))
for(i in y) print(i)
}
if(length(y)>0 & fun.only) res[w] <- gsub(pattern = "\\.R", "", (basename(f)))
# options(nwarnings = 0)
w = w + 1
}
if(fun.only)
{res <- res[!is.na(res)]
return(res)}
}
#replace text
repl.text <- function(pattern, repl, path = "./R", ignore.case = T){
rfiles <- list.files(pattern = "\\.R$|\\.Rmd", path = path, full.names = T, all.files = T)
for(f in rfiles){
#find and replace
x <- readLines(f)
y <- gsub(pattern, repl, x, fixed = T, ignore.case = ignore.case)
cat(y, file=f, sep="\n")
#reread
x <- readLines(f)
w <- grep(repl, x, fixed = T, value = T, ignore.case = T)
if(length(w)>0) {
print(f)
for(i in w) print(i)
}
}
}
#find functions with specific arguments
find.arg <- function(arg1, arg2 = NULL){
rfiles <- list.files(pattern = "\\.R$", path = "./R", full.names = T, all.files = T)
funs <- gsub(pattern = "\\.R", "", (basename(rfiles)))
funs <-grep("zzz|data|package", funs, invert = T, value = T)
l1 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg1, a))) return(x)
}      ))
if(!is.null(arg2))
{l2 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg2, a))) return(x)
}      ))
res <- intersect(l1, l2)
} else res <- l1
return(res)
}
# run default arguments
run.def.args2 <-function(FUN)
{
fm <- formals(FUN)
fm <- fm[sapply(fm, length) > 0 | sapply(fm, is.null)]
fm <- lapply(1:length(fm), function(x) paste(names(fm)[x], "=", fm[x]))
for(i in fm) try(eval(parse(text = i)), silent = T)
}
#find functions with specific arguments and text
find.arg.text <- function(arg1, arg2 = NULL, pattern) {
f1 <- find.text(pattern = pattern, fun.only = T)
f2 <- find.arg(arg1 = arg1, arg2 = arg2)
return(intersect(f1, f2))
}
#big data set
big.seltab <- function(X, nrow = 100){
Y <- X[rep(1:nrow(X), ceiling(nrow/nrow(X)))[1:nrow],]
Y$selec <- 1:nrow(Y)
if(is_selection_table(Y) | is_extended_selection_table(Y))
attr(Y, "check.results") <- attr(X, "check.results")[rep(1:nrow(attr(X, "check.results")), ceiling(nrow/nrow(attr(X, "check.results"))))[1:nrow],]
attr(Y, "check.results")$selec <- 1:nrow(Y)
return(Y)
}
# run all fuctions
run.all <- function() invisible(lapply(list.files(pattern = "\\.R", path = "./R", full.names = T, all.files = T), function(x) try(source(x), silent = T)))
run.all()
rm(list = c("align_test_files", "atmospheric_attenuation", "blur_ratio", "envelope_correlation", "excess_attenuation", "master_sound_file", "prep_X_bRlo_int", "snr", "spcc", "spcc_align", "spectral_blur_ratio", "spectral_correlation"))
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
x <- c("RColorBrewer", "devtools", "seewave", "maRce10/warbleR", "monitoR", "pkgdown", "ape", "spelling", "ggplot2", "png", "viridis", "qdpf")
out <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
rm(list = c("align_test_files", "atmospheric_attenuation", "blur_ratio", "envelope_correlation", "excess_attenuation", "master_sound_file", "prep_X_bRlo_int", "snr", "spcc", "spcc_align", "spectral_blur_ratio", "spectral_correlation"))
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
?`:::`
warbleR:::img_wrlbr_int
#built site
pkgdown::build_site(lazy = TRUE)
#built site
pkgdown::build_site(lazy = TRUE)
rm(list = c("align_test_files", "atmospheric_attenuation", "blur_ratio", "envelope_correlation", "excess_attenuation", "master_sound_file", "prep_X_bRlo_int", "snr", "spcc", "spcc_align", "spectral_blur_ratio", "spectral_correlation"))
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
#open function in rstudio
open.fun <- function(fun) system(paste("rstudio", file.path("./R", paste0(fun, ".R"))))
# run default arguments in a function
run.def.args <- function(fun = NULL){
#list functions in package
rfiles <- list.files(pattern = ".R", path = "./R", full.names = T)
# select target function file
funfile <- rfiles[gsub(".R", "", basename(rfiles)) == fun]
x <- readLines(funfile, warn = F)
st <- grep('@usage', x, fixed = T)
en <- grep('@param', x, fixed = T)[1]
x <- paste(x[st:(en-1)], collapse = " ")
x <- gsub("usage|\\@|\\#\\'", "", x)
b <- gregexpr(pattern ='\\(|\\)',x)[1][[1]]
x <- substr(x, start = b[1] + 1, stop = b[length(b)] - 1)
spltx <- strsplit(x, "\\,")[[1]]
sl <- vector()
y = 1
while(y <= length(spltx))
{
w <- spltx[y]
z <- 1
if(grepl('\\(', spltx[y]))
{z  <- 0
while(!grepl('\\)', w))
{
z <- z+ 1
w <- paste(w, ",", spltx[y + z], collapse = "")
}
z <- z + 1
}
y = y + z
sl[length(sl) + 1] <- w
}
sl <- sl[sl != "X"]
return(sl)
}
# run it like this:
# for(i in run.def.args("dfts")) try(eval(parse(text = i)), silent = T)
# remove sound files and or image files
rm.sf <- function() unlink(list.files(path = tempdir(), pattern = "\\.wav$", ignore.case = T, full.names = TRUE))
rm.sf.img <- function(mp3 = TRUE) {if(mp3)
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.mp3$|\\.tiff$|\\.jpeg$|\\.jpg$|\\.png$", ignore.case = T, full.names = TRUE)) else
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.tiff$|\\.jpeg$|\\.jpg$|\\.png$", ignore.case = T, full.names = TRUE))}
rm.img <- function() unlink(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.jpg$|\\.png$|\\.pdf$", ignore.case = T, full.names = TRUE))
#open latest image
last.img <- function() system(paste("eog", list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.jpg$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.jpg$", ignore.case = T, full.names = TRUE)))]
))
#open pdf
last.pdf <- function() system(paste("xdg-open", list.files(path = tempdir(), pattern = "\\.pdf$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.pdf", ignore.case = T, full.names = TRUE)))]
))
#find text in functions
find.text <- function(pattern, fun.only = FALSE, path = "./R", ignore.case = T)
{
rfiles <- list.files(pattern = "\\.R$|\\.Rmd$", path = path, full.names = T, all.files = T)
#check where a word is found in each function an return the name of function where it was found and the time
res <- NULL
w <- 1
for(f in rfiles){
x <- readLines(f)
y <- grep(pattern, x, fixed = T, value = T, ignore.case = ignore.case)
if(length(y)>0 & !fun.only) {
print(gsub(pattern = "\\.R", "", (basename(f))))
for(i in y) print(i)
}
if(length(y)>0 & fun.only) res[w] <- gsub(pattern = "\\.R", "", (basename(f)))
# options(nwarnings = 0)
w = w + 1
}
if(fun.only)
{res <- res[!is.na(res)]
return(res)}
}
#replace text
repl.text <- function(pattern, repl, path = "./R", ignore.case = T){
rfiles <- list.files(pattern = "\\.R$|\\.Rmd", path = path, full.names = T, all.files = T)
for(f in rfiles){
#find and replace
x <- readLines(f)
y <- gsub(pattern, repl, x, fixed = T, ignore.case = ignore.case)
cat(y, file=f, sep="\n")
#reread
x <- readLines(f)
w <- grep(repl, x, fixed = T, value = T, ignore.case = T)
if(length(w)>0) {
print(f)
for(i in w) print(i)
}
}
}
#find functions with specific arguments
find.arg <- function(arg1, arg2 = NULL){
rfiles <- list.files(pattern = "\\.R$", path = "./R", full.names = T, all.files = T)
funs <- gsub(pattern = "\\.R", "", (basename(rfiles)))
funs <-grep("zzz|data|package", funs, invert = T, value = T)
l1 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg1, a))) return(x)
}      ))
if(!is.null(arg2))
{l2 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg2, a))) return(x)
}      ))
res <- intersect(l1, l2)
} else res <- l1
return(res)
}
# run default arguments
run.def.args2 <-function(FUN)
{
fm <- formals(FUN)
fm <- fm[sapply(fm, length) > 0 | sapply(fm, is.null)]
fm <- lapply(1:length(fm), function(x) paste(names(fm)[x], "=", fm[x]))
for(i in fm) try(eval(parse(text = i)), silent = T)
}
#find functions with specific arguments and text
find.arg.text <- function(arg1, arg2 = NULL, pattern) {
f1 <- find.text(pattern = pattern, fun.only = T)
f2 <- find.arg(arg1 = arg1, arg2 = arg2)
return(intersect(f1, f2))
}
#big data set
big.seltab <- function(X, nrow = 100){
Y <- X[rep(1:nrow(X), ceiling(nrow/nrow(X)))[1:nrow],]
Y$selec <- 1:nrow(Y)
if(is_selection_table(Y) | is_extended_selection_table(Y))
attr(Y, "check.results") <- attr(X, "check.results")[rep(1:nrow(attr(X, "check.results")), ceiling(nrow/nrow(attr(X, "check.results"))))[1:nrow],]
attr(Y, "check.results")$selec <- 1:nrow(Y)
return(Y)
}
# run all fuctions
run.all <- function() invisible(lapply(list.files(pattern = "\\.R", path = "./R", full.names = T, all.files = T), function(x) try(source(x), silent = T)))
run.all()
pattern <-  "marceloa27@@gmail.com"
find.text(pattern = pattern, fun.only = F, ignore.case = T, path = path)
path <- "."
pattern <-  "marceloa27@@gmail.com"
find.text(pattern = pattern, fun.only = F, ignore.case = T, path = path)
path <- "./R"
pattern <-  "marceloa27@@gmail.com"
find.text(pattern = pattern, fun.only = F, ignore.case = T, path = path)
repl <- "marcelo.araya@@ucr.ac.cr"
repl.text(pattern = pattern, repl = repl, path = path)
pattern <-  "marceloa27@gmail.com"
find.text(pattern = pattern, fun.only = F, ignore.case = T, path = path)
rm(list = c("align_test_files", "atmospheric_attenuation", "blur_ratio", "envelope_correlation", "excess_attenuation", "master_sound_file", "prep_X_bRlo_int", "snr", "spcc", "spcc_align", "spectral_blur_ratio", "spectral_correlation"))
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
#built site
pkgdown::build_site(lazy = TRUE)
rm(list = ls())
#
# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))
x <- c("RColorBrewer", "devtools", "seewave", "maRce10/warbleR", "monitoR", "pkgdown", "ape", "spelling", "ggplot2", "png", "viridis")
out <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
install()
rm(list = c("align_test_files", "atmospheric_attenuation", "blur_ratio", "envelope_correlation", "excess_attenuation", "master_sound_file", "prep_X_bRlo_int", "snr", "spcc", "spcc_align", "spectral_blur_ratio", "spectral_correlation"))
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
rm(list = c("align_test_files", "atmospheric_attenuation", "blur_ratio", "envelope_correlation", "excess_attenuation", "master_sound_file", "prep_X_bRlo_int", "snr", "spcc", "spcc_align", "spectral_blur_ratio", "spectral_correlation"))
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
rm(list = c("align_test_files", "atmospheric_attenuation", "blur_ratio", "envelope_correlation", "excess_attenuation", "master_sound_file", "prep_X_bRlo_int", "snr", "spcc", "spcc_align", "spectral_blur_ratio", "spectral_correlation"))
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
rm(list = c("align_test_files", "atmospheric_attenuation", "blur_ratio", "envelope_correlation", "excess_attenuation", "master_sound_file", "prep_X_bRlo_int", "snr", "spcc", "spcc_align", "spectral_blur_ratio", "spectral_correlation"))
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
system("R CMD Rd2pdf ./R\ package\ testing/baRulho/baRulho")
# only build manual
setwd(".")
system("R CMD Rd2pdf ./R\ package\ testing/baRulho/baRulho")
system("R CMD build . --resave-data")
#built site
pkgdown::build_site(lazy = TRUE)
# check as in cran
system("R CMD check . --as-cran --resave-data")
rm(list = c("align_test_files", "atmospheric_attenuation", "blur_ratio", "envelope_correlation", "excess_attenuation", "master_sound_file", "prep_X_bRlo_int", "snr", "spcc", "spcc_align", "spectral_blur_ratio", "spectral_correlation"))
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
rm(list = c("align_test_files", "atmospheric_attenuation", "blur_ratio", "envelope_correlation", "excess_attenuation", "master_sound_file", "prep_X_bRlo_int", "snr", "spcc", "spcc_align", "spectral_blur_ratio", "spectral_correlation"))
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
system("R CMD build . --resave-data")
a <- read.table("~/Dropbox/Projects/SNPS_linkage/data/raw/Ale_SpastischeParaplegie/plink/aletempVarGT.tped", sep = "\t")
str(a)
table(a$V1)
table(a$V3)
b <- read.table("~/Dropbox/Projects/SNPS_linkage/data/raw/Ale_SpastischeParaplegie/plink/aletempVar.vcf", sep = ";", skip = 125, header = FALSE)
b <- read.table("~/Dropbox/Projects/SNPS_linkage/data/raw/Ale_SpastischeParaplegie/plink/aletempVar.vcf", sep = "\t", skip = 125, header = FALSE)
head(b)
View(b)
summary(b)
View(b[1:1000, ])
head(b)
View(b[1:1000, 10:20])
str(a)
df <- data.frame(chr = a$V1, snp.id = a$V2, morg = 0, bp_pos = a$V4)
write.csv(df, file = "~/Dropbox/Projects/SNPS_linkage/data/ucr.map", col.names = NA)
write.csv(df, file = "~/Dropbox/Projects/SNPS_linkage/data/ucr.map", col.names = FALSE)
write.csv(df, file = "~/Dropbox/Projects/SNPS_linkage/data/ucr.map", col.names = FALSE)
write.table(df, file = "~/Dropbox/Projects/SNPS_linkage/data/ucr.map", col.names = FALSE, sep = "\t")
write.table(df, file = "~/Dropbox/Projects/SNPS_linkage/data/raw/ucr.map", col.names = FALSE, sep = "\t", row.names = FALSE)
system("R CMD build --resave-data")
system("R CMD build . --resave-data")
# check as in cran
system("R CMD check . --as-cran --resave-data")
system("R CMD build . --resave-data")
system('R CMD build . --resave-data="best"')
system('R CMD build . --resave-data="best"')
system('R CMD build . --resave-data="best"')
rm(list = c("align_test_files", "atmospheric_attenuation", "blur_ratio", "envelope_correlation", "excess_attenuation", "master_sound_file", "prep_X_bRlo_int", "snr", "spcc", "spcc_align", "spectral_blur_ratio", "spectral_correlation"))
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
system('R CMD build . --resave-data="best"')
rm(list = c("align_test_files", "atmospheric_attenuation", "blur_ratio", "envelope_correlation", "excess_attenuation", "master_sound_file", "prep_X_bRlo_int", "snr", "spcc", "spcc_align", "spectral_blur_ratio", "spectral_correlation"))
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
playback_est
save(playback_est, file="./data/playback_est.rda", version = 2, compress = "xz")
save(playback_est_unaligned, file="./data/playback_est_unaligned.rda", version = 2, compress = "xz")
rm(list = c("align_test_files", "atmospheric_attenuation", "blur_ratio", "envelope_correlation", "excess_attenuation", "master_sound_file", "prep_X_bRlo_int", "snr", "spcc", "spcc_align", "spectral_blur_ratio", "spectral_correlation"))
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
system('R CMD build . --resave-data="best"')
library(baRulho)
# run  envelope correlation
ea <- excess_attenuation(playback_est, method = 1, pb = FALSE)
# check output class
is_extended_selection_table(ea)
names(ea)
library(warbleR)
warbleR_options(wl = 300, parallel = 1, pb = TRUE, bp = c(0.5, 8))
#####
call_est_tailed <- readRDS("/home/m/Dropbox/Projects/budgie_call_analysis/output/calls_est_1st_round_foxp2_seltailored.RDS")
call_est_tailed <- sel_tailor(call_est_tailed, flim = c(0.5, 8), auto.next = TRUE, osci = FALSE, ovlp = 20, wl = 300, fast.spec = T, mar = 1, width = 8)
saveRDS(call_est_tailed, "/home/m/Dropbox/Projects/budgie_call_analysis/output/calls_est_1st_round_foxp2_seltailored.RDS")
remove.packages("warbleR")
#####
devtools::install("~/Dropbox/R_package_testing/warbleR/warbleR/")
#####
# devtools::install("~/Dropbox/R_package_testing/warbleR/warbleR/")
library(warbleR)
call_est_tailed <- readRDS("/home/m/Dropbox/Projects/budgie_call_analysis/output/calls_est_1st_round_foxp2_seltailored.RDS")
call_est_tailed <- sel_tailor(call_est_tailed, flim = c(0.5, 8), auto.next = TRUE, osci = FALSE, ovlp = 20, wl = 300, fast.spec = T, mar = 1, width = 8)
rm(list = c("align_test_files", "atmospheric_attenuation", "blur_ratio", "envelope_correlation", "excess_attenuation", "master_sound_file", "prep_X_bRlo_int", "snr", "spcc", "spcc_align", "spectral_blur_ratio", "spectral_correlation"))
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
exists(wav_info)
exists("wav_info")
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/search_templates.R')
rm(list = c("align_test_files", "atmospheric_attenuation", "blur_ratio", "envelope_correlation", "excess_attenuation", "master_sound_file", "prep_X_bRlo_int", "snr", "spcc", "spcc_align", "spectral_blur_ratio", "spectral_correlation"))
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/align_test_files.R')
rm(list = c("align_test_files", "atmospheric_attenuation", "blur_ratio", "envelope_correlation", "excess_attenuation", "master_sound_file", "prep_X_bRlo_int", "snr", "spcc", "spcc_align", "spectral_blur_ratio", "spectral_correlation"))
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/align_test_files.R')
rm(list = c("align_test_files", "atmospheric_attenuation", "blur_ratio", "envelope_correlation", "excess_attenuation", "master_sound_file", "prep_X_bRlo_int", "snr", "spcc", "spcc_align", "spectral_blur_ratio", "spectral_correlation"))
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
source('~/Dropbox/R_package_testing/baRulho/baRulho/R/search_templates.R')
# check spelling
spch <- devtools::spell_check(".")
spch$word[grep("baRulho", spch$found)]
source('./R_package_testing/warbleR/Beta functions/random_sound.R')
random_sound(dur = 2, segment.dur.range = c(0.01, 0.9), frange = c(1, 2))
# check as in cran
system("R CMD check . --as-cran --resave-data")
devtools::check()
# build tar.gz package file
setwd("./")
system('R CMD build . --resave-data="best"')
# devtools::build()
unlink(list.files(pattern = "baRulho\\.pdf", path = "./"))
# only build manual
setwd(".")
system("R CMD Rd2pdf ./R\ package\ testing/baRulho/baRulho")
setwd(".")
#built site
pkgdown::build_site(lazy = TRUE)
# to set a new computer
## 1. install git
# 2. generate ssh key https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#adding-your-ssh-key-to-the-ssh-agent
# 3. add key to github account https://help.github.com/en/articles/adding-a-new-ssh-key-to-your-github-account
#sent to github
system("git add .")
system('git commit -m  "OTS course"')
system("git push origin master")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
system('R CMD build . --resave-data="best"')
