alg.tests <- align_test_files(X =  master.sf, Y = pks, path = td)
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = pth)
X =  master.sf
Y = pks
path = pth
output = "est"
path = NULL
by.song = TRUE
marker = "start"
cores = 1
# If cores is not numeric
if (!is.numeric(cores)) stop2("'cores' must be a numeric vector of length 1")
if (any(!(cores %% 1 == 0), cores < 1)) stop2("'cores' should be a positive integer")
#check output
if (!any(output %in% c("est", "data.frame"))) stop2("'output' must be either 'est' or 'data.frame'")
# check sound.id column
if (is.null(X$sound.id)) stop2("'X' must contain a 'sound.id' column")
# set clusters for windows OS
if (Sys.info()[1] == "Windows" & cores > 1)
cl <- parallel::makePSOCKcluster(getOption("cl.cores", cores)) else cl <- cores
# align each file
out <- warbleR:::pblapply_wrblr_int(pbar = pb, X = 1:nrow(X), cl = cl, FUN = function(x) {
if (marker == "start"){
# start on new recording
start  <- X$start - X$start[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] + Y$start[x]
# end on new recording
end  <- X$end - X$end[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] + Y$end[x]
}
if (marker == "end"){
durs <- X$end - X$start
start <- Y$start[x] - (X$start[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] - X$start)
# end on new recording
end  <- start + durs
}
# make data frame
W <- data.frame(sound.files = Y$test.files[x], selec = 1:length(start), start, end, bottom.freq = X$bottom.freq[1:length(start)], top.freq = X$top.freq[1:length(start)], template = X$sound.id[1:length(start)])
return(W)
})
source("~/Dropbox/R_package_testing/baRulho/R/find_markers.R")
FUN <- "find_markers"
#run function
run.all()
source(file.path("./R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
# set temporary directory
td <- tempdir()
# search using start marker as template
pth <- "./testing/example_data/hermit_degrad_la_selva/"
master.sf <- read.csv(file.path(pth, "fixed_master_sound_file_annotations.csv"))
find_markers(X = master.sf, test.files = c("sur-t0-1m.wav", "sur-t1-10m.wav"), path = pth, pb = FALSE)
# search using end marker as template
find_markers(X = master.sf, test.files = c("sur-t1-10m.wav", "sur-t0-1m.wav"), markers = "end_marker", path = pth, pb = FALSE)
# search using end marker as template and all test files
find_markers(X = master.sf, markers = "end_marker", path = pth, pb = FALSE)
# search using start and end markers as template
find_markers(X = master.sf, test.files = c("sur-t1-10m.wav", "sur-t0-1m.wav"), path = pth, pb = FALSE, wl = 100)
# using mfcc correlation
find_markers(X = master.sf, test.files = c("sur-t1-10m.wav", "sur-t0-1m.wav"), path = pth, pb = FALSE, type = "mfcc", wl = 100)
# using mfcc correlation all sound files
find_markers(X = master.sf, path = pth, pb = FALSE, type = "mfcc", wl = 1000)
# using mel auditory
find_markers(X = master.sf, test.files = c("sur-t1-10m.wav", "sur-t0-1m.wav"), path = pth, pb = FALSE, type = "mel-auditory", wl = 100)
# using mel auditory all sound files
find_markers(X = master.sf, path = pth, pb = FALSE, type = "mel-auditory", wl = 1000)
# search using start and end marker as template and all test files using mfcc Xcorr
find_markers(X = master.sf, path = pth, pb = FALSE, type = "mfcc", wl = 800)
# use another template
find_markers(X = master.sf, markers = c( "strg-6", "end_marker"), path = pth, pb = FALSE, test.files = c("sur-t1-10m.wav", "sur-t0-1m.wav"))
FUN <- "align_test_files"
#run function
run.all()
source(file.path("./R", paste0(FUN, ".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/playback_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# set temporary directory
td <- tempdir()
# search using start marker as template
pth <- "./testing/example_data/hermit_degrad_la_selva/"
master.sf <- read.csv(file.path(pth, "fixed_master_sound_file_annotations.csv"))
pks <- find_markers(X = master.sf, test.files = c("sur-t0-1m.wav", "sur-t1-10m.wav"), path = pth, pb = FALSE, )
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = pth)
X =  master.sf
Y = pks
path = pth
output = "est"
by.song = TRUE
marker = "start"
cores = 1
pb = TRUE
# If cores is not numeric
if (!is.numeric(cores)) stop2("'cores' must be a numeric vector of length 1")
if (any(!(cores %% 1 == 0), cores < 1)) stop2("'cores' should be a positive integer")
#check output
if (!any(output %in% c("est", "data.frame"))) stop2("'output' must be either 'est' or 'data.frame'")
# check sound.id column
if (is.null(X$sound.id)) stop2("'X' must contain a 'sound.id' column")
# set clusters for windows OS
if (Sys.info()[1] == "Windows" & cores > 1)
cl <- parallel::makePSOCKcluster(getOption("cl.cores", cores)) else cl <- cores
# align each file
out <- warbleR:::pblapply_wrblr_int(pbar = pb, X = 1:nrow(X), cl = cl, FUN = function(x) {
if (marker == "start"){
# start on new recording
start  <- X$start - X$start[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] + Y$start[x]
# end on new recording
end  <- X$end - X$end[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] + Y$end[x]
}
if (marker == "end"){
durs <- X$end - X$start
start <- Y$start[x] - (X$start[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] - X$start)
# end on new recording
end  <- start + durs
}
# make data frame
W <- data.frame(sound.files = Y$test.files[x], selec = 1:length(start), start, end, bottom.freq = X$bottom.freq[1:length(start)], top.freq = X$top.freq[1:length(start)], template = X$sound.id[1:length(start)])
return(W)
})
# put data frames togheter
sync.sls <- do.call(rbind, out)
# start on new recording
start  <- X$start - X$start[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] + Y$start[x]
x = 1
# start on new recording
start  <- X$start - X$start[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] + Y$start[x]
# end on new recording
end  <- X$end - X$end[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] + Y$end[x]
pks
table(Y$test.files)
Y
Y
Y[stats::ave(x = -Y$scores, as.factor(Y$sound.files), as.factor(Y$template), FUN = rank) <= 1, ]
Y[stats::ave(x = -Y$scores, as.factor(Y$test.files), as.factor(Y$template), FUN = rank) <= 1, ]
stats::ave(x = -Y$scores, as.factor(Y$test.files), as.factor(Y$template), FUN = rank)
Y[stats::ave(x = -Y$scores, as.factor(Y$test.files), FUN = rank) <= 1, ]
source("~/Dropbox/R_package_testing/baRulho/R/align_test_files.R")
pks <- find_markers(X = master.sf, test.files = c("sur-t0-1m.wav", "sur-t1-10m.wav"), path = pth, pb = FALSE, )
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = pth)
source("~/Dropbox/R_package_testing/baRulho/R/align_test_files.R")
pks <- find_markers(X = master.sf, test.files = c("sur-t0-1m.wav", "sur-t1-10m.wav"), path = pth, pb = FALSE, )
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = pth)
pks <- find_markers(X = master.sf, test.files = c("sur-t0-1m.wav", "sur-t1-10m.wav"), path = pth, pb = FALSE)
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = pth)
X =  master.sf
Y = pks
path
# If cores is not numeric
if (!is.numeric(cores)) stop2("'cores' must be a numeric vector of length 1")
if (any(!(cores %% 1 == 0), cores < 1)) stop2("'cores' should be a positive integer")
#check output
if (!any(output %in% c("est", "data.frame"))) stop2("'output' must be either 'est' or 'data.frame'")
# check sound.id column
if (is.null(X$sound.id)) stop2("'X' must contain a 'sound.id' column")
# if more than one marker per test files then keep only the marker with the highest score
if (any(table(Y$test.files) > 1))
Y <- Y[stats::ave(x = -Y$scores, as.factor(Y$test.files), FUN = rank) <= 1, ]
# set clusters for windows OS
if (Sys.info()[1] == "Windows" & cores > 1)
cl <- parallel::makePSOCKcluster(getOption("cl.cores", cores)) else cl <- cores
# align each file
out <- warbleR:::pblapply_wrblr_int(pbar = pb, X = 1:nrow(X), cl = cl, FUN = function(x) {
if (marker == "start_marker"){
# start on new recording
start  <- X$start - X$start[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] + Y$start[x]
# end on new recording
end  <- X$end - X$end[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] + Y$end[x]
}
if (marker == "end"){
durs <- X$end - X$start
start <- Y$start[x] - (X$start[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] - X$start)
# end on new recording
end  <- start + durs
}
# make data frame
W <- data.frame(sound.files = Y$test.files[x], selec = 1:length(start), start, end, bottom.freq = X$bottom.freq[1:length(start)], top.freq = X$top.freq[1:length(start)], template = X$sound.id[1:length(start)])
return(W)
})
Y
x = 1
X
Y
y
Y
y <- 1
# add duration
Y$duration <- Y$end - Y$start
Y$start
Y$start[y]
X$start[X$sound.files == Y$test.files[y] & X$sound.id == Y$template[x]]
X$start
X$sound.files == Y$test.files[y]
X$start[X$sound.id == Y$template[x]]
Y$start[y]
Y$start[y]
(Y$start[y] - X$start[X$sound.id == Y$template[x]])
start <- X$start + (Y$start[y] - X$start[X$sound.id == Y$template[x]])
start
(Y$start[y] - X$start[X$sound.id == Y$template[x]])
X$start
start <- X$start + (Y$start[y] - X$start[X$sound.id == Y$template[x]])
start
start <- X$start + (Y$start[y] - X$start[X$sound.id == Y$template[x]])
end <- X$end + (Y$start[y] - X$start[X$sound.id == Y$template[x]])
# make data frame
W <- data.frame(sound.files = Y$test.files[x], selec = 1:length(start), start, end, bottom.freq = X$bottom.freq, top.freq = X$top.freq, sound.id = X$sound.id, template = Y$template[x])
W
# align each file
out <- warbleR:::pblapply_wrblr_int(pbar = pb, X = 1:nrow(Y), cl = cl, FUN = function(y) {
# compute start and end as the difference in relation to the template position in the master sound file
start <- X$start + (Y$start[y] - X$start[X$sound.id == Y$template[x]])
end <- X$end + (Y$start[y] - X$start[X$sound.id == Y$template[x]])
# if (marker == "start_marker"){
#   # start on new recording
#   start  <- X$start - X$start[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] + Y$start[x]
#
#   # end on new recording
#   end  <- X$end - X$end[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] + Y$end[x]
# }
#
# if (marker == "end"){
#
#     durs <- X$end - X$start
#
#   start <- Y$start[x] - (X$start[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] - X$start)
#
#        # end on new recording
#   end  <- start + durs
#   }
# make data frame
W <- data.frame(sound.files = Y$test.files[x], selec = 1:length(start), start, end, bottom.freq = X$bottom.freq, top.freq = X$top.freq, sound.id = X$sound.id, template = Y$template[x])
return(W)
})
# put data frames togheter
sync.sls <- do.call(rbind, out)
sync.sls
# check if any selection exceeds length of recordings
#if(exists("wav_dur"))
wvdr <- wavdur(path = path) #else
# add duration to data frame
sync.sls <- merge(sync.sls, wvdr)
sync.sls
if (any(sync.sls$end > sync.sls$duration)) {
write(file = "", x = paste(sum(sync.sls$end > sync.sls$duration), "selection(s) exceeded sound file length and were removed"))
# remove exceeding selections
sync.sls <- sync.sls[!sync.sls$end > sync.sls$duration, ]
}
unique(sync.sls$sound.files[sync.sls$end > sync.sls$duration])
source("~/Dropbox/R_package_testing/baRulho/R/align_test_files.R")
sync.sls$duration
# remove duration column and template
sync.sls$duration <- NULL
sync.sls$sound.id <- sync.sls$template
sync.sls$template <- NULL
if (output == "est")
{
if (by.song) # if by song add a numeric column to represent sound files
{
sync.sls$song <- as.numeric(as.factor(sync.sls$sound.files))
by.song <- "song"
} else
by.song <- NULL # rewrite by song as null
sync.sls <- selection_table(sync.sls, extended = TRUE, confirm.extended = FALSE, path = path, by.song = by.song, ...)
# fix call attribute
attributes(sync.sls)$call <- base::match.call()
}
source("~/Dropbox/R_package_testing/baRulho/R/align_test_files.R")
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = pth)
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = pth, pb = >TRUE)
alg.tests <- align_test_files(X =  master.sf, Y = pks, path = pth, pb = TRUE)
master.sf
pks
X = master.sf
Y = pks
path = pth
pb = TRUE
# deprecated message
if (!is.null(marker))
stop2("'marker' has been deprecated")
# If cores is not numeric
if (!is.numeric(cores)) stop2("'cores' must be a numeric vector of length 1")
if (any(!(cores %% 1 == 0), cores < 1)) stop2("'cores' should be a positive integer")
#check output
if (!any(output %in% c("est", "data.frame"))) stop2("'output' must be either 'est' or 'data.frame'")
# check sound.id column
if (is.null(X$sound.id)) stop2("'X' must contain a 'sound.id' column")
# if more than one marker per test files then keep only the marker with the highest score
if (any(table(Y$test.files) > 1))
Y <- Y[stats::ave(x = -Y$scores, as.factor(Y$test.files), FUN = rank) <= 1, ]
# set clusters for windows OS
if (Sys.info()[1] == "Windows" & cores > 1)
cl <- parallel::makePSOCKcluster(getOption("cl.cores", cores)) else cl <- cores
# align each file
out <- warbleR:::pblapply_wrblr_int(pbar = pb, X = 1:nrow(Y), cl = cl, FUN = function(y) {
# compute start and end as the difference in relation to the template position in the master sound file
start <- X$start + (Y$start[y] - X$start[X$sound.id == Y$template[x]])
end <- X$end + (Y$start[y] - X$start[X$sound.id == Y$template[x]])
# if (marker == "start_marker"){
#   # start on new recording
#   start  <- X$start - X$start[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] + Y$start[x]
#
#   # end on new recording
#   end  <- X$end - X$end[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] + Y$end[x]
# }
#
# if (marker == "end"){
#
#     durs <- X$end - X$start
#
#   start <- Y$start[x] - (X$start[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] - X$start)
#
#        # end on new recording
#   end  <- start + durs
#   }
# make data frame
W <- data.frame(sound.files = Y$test.files[x], selec = 1:length(start), start, end, bottom.freq = X$bottom.freq, top.freq = X$top.freq, sound.id = X$sound.id, template = Y$template[x])
return(W)
})
# put data frames togheter
sync.sls <- do.call(rbind, out)
sync.sls
Y
source("~/Dropbox/R_package_testing/baRulho/R/align_test_files.R")
# align each file
out <- warbleR:::pblapply_wrblr_int(pbar = pb, X = 1:nrow(Y), cl = cl, FUN = function(y) {
# compute start and end as the difference in relation to the template position in the master sound file
start <- X$start + (Y$start[y] - X$start[X$sound.id == Y$template[y]])
end <- X$end + (Y$start[y] - X$start[X$sound.id == Y$template[y]])
# if (marker == "start_marker"){
#   # start on new recording
#   start  <- X$start - X$start[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] + Y$start[x]
#
#   # end on new recording
#   end  <- X$end - X$end[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] + Y$end[x]
# }
#
# if (marker == "end"){
#
#     durs <- X$end - X$start
#
#   start <- Y$start[x] - (X$start[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] - X$start)
#
#        # end on new recording
#   end  <- start + durs
#   }
# make data frame
W <- data.frame(sound.files = Y$test.files[y], selec = 1:length(start), start, end, bottom.freq = X$bottom.freq, top.freq = X$top.freq, sound.id = X$sound.id, template = Y$template[y])
return(W)
})
# put data frames togheter
sync.sls <- do.call(rbind, out)
# check if any selection exceeds length of recordings
#if(exists("wav_dur"))
wvdr <- wavdur(path = path) #else
# add duration to data frame
sync.sls <- merge(sync.sls, wvdr)
# start empty vector to add name of problematic files
problematic_files <- character()
if (any(sync.sls$end > sync.sls$duration)) {
write(file = "", x = paste(sum(sync.sls$end > sync.sls$duration), "selection(s) exceeded sound file length and were removed (run .Options$baRulho to see which test files were involved)"))
problematic_files <- append(problematic_files, unique(sync.sls$sound.files[sync.sls$end > sync.sls$duration]))
# remove exceeding selections
sync.sls <- sync.sls[!sync.sls$end > sync.sls$duration, ]
}
# check if any selection exceeds length of recordings
#if(exists("wav_dur"))
wvdr <- wavdur(path = path, files = unique(sync.sls$sound.files)) #else
wvdr
# add duration to data frame
sync.sls <- merge(sync.sls, wvdr)
# start empty vector to add name of problematic files
problematic_files <- character()
if (any(sync.sls$end > sync.sls$duration)) {
write(file = "", x = paste(sum(sync.sls$end > sync.sls$duration), "selection(s) exceeded sound file length and were removed (run .Options$baRulho to see which test files were involved)"))
problematic_files <- append(problematic_files, unique(sync.sls$sound.files[sync.sls$end > sync.sls$duration]))
# remove exceeding selections
sync.sls <- sync.sls[!sync.sls$end > sync.sls$duration, ]
}
if (any(sync.sls$start < 0)) {
write(file = "", x = paste(sum(sync.sls$start < 0), "selection(s) were absent at the start of the files (negative start values) and were removed"))
problematic_files <- append(problematic_files, unique(sync.sls$sound.files[sync.sls$start >= 0]))
# remove exceeding selections
sync.sls <- sync.sls[sync.sls$start >= 0, ]
}
on.exit(options(Rraven = unique(problematic_files)))
# remove duration column and template
sync.sls$duration <- NULL
sync.sls$sound.id <- sync.sls$template
source("~/Dropbox/R_package_testing/baRulho/R/align_test_files.R")
alg.tests <- align_test_files(X = master.sf, Y = pks, path = pth, pb = TRUE)
warbleR::spectrograms(alg.tests, by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5), dest.path = td, path = td, osci = TRUE, mar = 3); last.img(); rm.img()
pks <- find_markers(X = master.sf, test.files = c("sur-t0-1m.wav", "sur-t1-10m.wav"), path = pth, pb = FALSE)
alg.tests <- align_test_files(X = master.sf, Y = pks, path = pth, pb = TRUE)
source("~/Dropbox/R_package_testing/baRulho/R/align_test_files.R")
alg.tests <- align_test_files(X = master.sf, Y = pks, path = pth, pb = TRUE)
source("~/Dropbox/R_package_testing/baRulho/R/align_test_files.R")
# align each file
out <- warbleR:::pblapply_wrblr_int(pbar = pb, X = 1:nrow(Y), cl = cl, FUN = function(y) {
# compute start and end as the difference in relation to the template position in the master sound file
start <- X$start + (Y$start[y] - X$start[X$sound.id == Y$template[y]])
end <- X$end + (Y$start[y] - X$start[X$sound.id == Y$template[y]])
# if (marker == "start_marker"){
#   # start on new recording
#   start  <- X$start - X$start[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] + Y$start[x]
#
#   # end on new recording
#   end  <- X$end - X$end[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] + Y$end[x]
# }
#
# if (marker == "end"){
#
#     durs <- X$end - X$start
#
#   start <- Y$start[x] - (X$start[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] - X$start)
#
#        # end on new recording
#   end  <- start + durs
#   }
# make data frame
W <- data.frame(sound.files = Y$test.files[y], selec = 1:length(start), start, end, bottom.freq = X$bottom.freq, top.freq = X$top.freq, sound.id = X$sound.id, template = Y$template[y])
return(W)
})
pboptions(type="none")
# align each file
out <- warbleR:::pblapply_wrblr_int(pbar = pb, X = 1:nrow(Y), cl = cl, FUN = function(y) {
# compute start and end as the difference in relation to the template position in the master sound file
start <- X$start + (Y$start[y] - X$start[X$sound.id == Y$template[y]])
end <- X$end + (Y$start[y] - X$start[X$sound.id == Y$template[y]])
# if (marker == "start_marker"){
#   # start on new recording
#   start  <- X$start - X$start[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] + Y$start[x]
#
#   # end on new recording
#   end  <- X$end - X$end[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] + Y$end[x]
# }
#
# if (marker == "end"){
#
#     durs <- X$end - X$start
#
#   start <- Y$start[x] - (X$start[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] - X$start)
#
#        # end on new recording
#   end  <- start + durs
#   }
# make data frame
W <- data.frame(sound.files = Y$test.files[y], selec = 1:length(start), start, end, bottom.freq = X$bottom.freq, top.freq = X$top.freq, sound.id = X$sound.id, template = Y$template[y])
return(W)
})
pboptions(type="timer")
# align each file
out <- warbleR:::pblapply_wrblr_int(pbar = pb, X = 1:nrow(Y), cl = cl, FUN = function(y) {
# compute start and end as the difference in relation to the template position in the master sound file
start <- X$start + (Y$start[y] - X$start[X$sound.id == Y$template[y]])
end <- X$end + (Y$start[y] - X$start[X$sound.id == Y$template[y]])
# if (marker == "start_marker"){
#   # start on new recording
#   start  <- X$start - X$start[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] + Y$start[x]
#
#   # end on new recording
#   end  <- X$end - X$end[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] + Y$end[x]
# }
#
# if (marker == "end"){
#
#     durs <- X$end - X$start
#
#   start <- Y$start[x] - (X$start[paste(X$sound.files, X$selec, sep = "-") == Y$template[x]] - X$start)
#
#        # end on new recording
#   end  <- start + durs
#   }
# make data frame
W <- data.frame(sound.files = Y$test.files[y], selec = 1:length(start), start, end, bottom.freq = X$bottom.freq, top.freq = X$top.freq, sound.id = X$sound.id, template = Y$template[y])
return(W)
})
source("~/Dropbox/R_package_testing/baRulho/R/align_test_files.R")
alg.tests <- align_test_files(X = master.sf, Y = pks, path = pth, pb = TRUE)
alg.tests <- align_test_files(X = master.sf, Y = pks, path = pth, pb = FALSE)
warbleR::spectrograms(alg.tests, by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5), dest.path = td, path = pth, osci = TRUE, mar = 3); last.img(); rm.img()
alg.tests <- align_test_files(X = master.sf, Y = pks, path = pth, pb = FALSE, output = "data.frame")
warbleR::spectrograms(alg.tests, by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5), dest.path = td, path = pth, osci = TRUE, mar = 3); last.img(); rm.img()
warbleR::spectrograms(alg.tests, by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5), dest.path = td, path = pth, osci = TRUE, mar = 3, fast.spec = TRUE, ovlp = 10); last.img(); rm.img()
pks <- find_markers(X = master.sf, test.files = c("sur-t0-1m.wav", "sur-t1-10m.wav", "sur-t4-20m.wav"), path = pth, pb = FALSE)
alg.tests <- align_test_files(X = master.sf, Y = pks, path = pth, pb = FALSE, output = "data.frame")
warbleR::spectrograms(alg.tests, by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5), dest.path = td, path = pth, osci = TRUE, mar = 3, fast.spec = TRUE, ovlp = 10); last.img(); rm.img()
pks <- find_markers(X = master.sf, test.files = c("sur-t0-1m.wav", "sur-t1-10m.wav", "sur-t4-20m.wav"), path = pth, pb = FALSE)
alg.tests <- align_test_files(X = master.sf, Y = pks, path = pth, pb = FALSE, output = "data.frame")
warbleR::spectrograms(alg.tests, by.song = "sound.files", xl = 3, collevels = seq(-60, 0, 5), dest.path = td, path = pth, osci = TRUE, mar = 3, fast.spec = TRUE, ovlp = 10); last.img(); rm.img()
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = TRUE)
