plot_degradation(X = W, nrow = 4, mar = c(2, 1)); last.img(); rm.img()
# colors
bg_titles <- viridis::viridis(10, alpha = 0.7)[3]
env_fill <- viridis::viridis(10, alpha = 0.6)[8]
spc_fill <- viridis::viridis(10, alpha = 0.6)[5]
bg_sp_env <- adjustcolor("gray", 0.4)
bg_titles
env_fill
spc_fill
bg_sp_env
source("~/Dropbox/R_package_testing/baRulho/R/plot_degradation.R")
# all spectros
plot_degradation(X = W, nrow = 4, mar = c(2, 1)); last.img(); rm.img()
# other colors
plot_degradation(X = W, nrow = 4, mar = c(2, 1), colors = magma(4, alpha = 0.3)); last.img(); rm.img()
# other colors
plot_degradation(X = W, nrow = 4, mar = c(2, 1), colors = magma(4, alpha = 0.3), pal = viridis::magma); last.img(); rm.img()
plot_degradation(X = W, nrow = 4, mar = c(2, 1), colors = viridis::inferno(4, alpha = 0.3), pal = viridis::inferno); last.img(); rm.img()
# other colors
plot_degradation(X = W, nrow = 4, mar = c(2, 1), colors = viridis::magma(4, alpha = 0.3), pal = viridis::magma); last.img(); rm.img()
plot_degradation(X = W, nrow = 4, mar = c(2, 1), colors = viridis::inferno(4, alpha = 0.3), pal = viridis::inferno); last.img(); rm.img()
plot_degradation(X = W, nrow = 4, mar = c(2, 1), colors = viridis::plasma(4, alpha = 0.3), pal = viridis::plasma()); last.img(); rm.img()
plot_degradation(X = W, nrow = 4, mar = c(2, 1), colors = viridis::plasma(n = 4, alpha = 0.3), pal = viridis::plasma); last.img(); rm.img()
plot_degradation(X = W, nrow = 4, mar = c(2, 1), colors = viridis::plasma(n = 4, alpha = 0.1), pal = viridis::plasma); last.img(); rm.img()
FUN <- "plot_degradation"
#run function
run.all()
source(file.path("./R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/degradation_est.rda")
options(sound.files.path = tempdir(), dest.path = tempdir())
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
W <- X <- degradation_est[degradation_est$sound.files != "master.wav", ]
# all spectros
plot_degradation(X = W, nrow = 4, mar = c(2, 1)); last.img(); rm.img()
# removing one row
plot_degradation(X = W[-5, ], nrow = 3, ovlp = 95, colors = viridis::magma(4, alpha = 0.3), pal = viridis::magma); last.img(); rm.img()
plot_degradation(X = W[-3, ], nrow = 2, ovlp = 95, colors = viridis::mako(4, alpha = 0.3), pal = viridis::mako, wl = 200); last.img(); rm.img()
plot_degradation(X = W[-nrow(W), ], mar = c(3, 1), nrow = 4, ovlp = 95); last.img(); rm.img()
plot_degradation(X = W[-12, ], mar = c(5, 1), nrow = 6, ovlp = 95); last.img(); rm.img()
# changin marging
plot_degradation(X = W, mar = c(10, 1), nrow = 5, ovlp = 95); last.img(); rm.img()
# more rows than needed
plot_degradation(X = W,  nrow = 10, ovlp = 90); last.img(); rm.img()
# other colors
plot_degradation(X = W, nrow = 4, mar = c(2, 1), colors = viridis::magma(4, alpha = 0.3), pal = viridis::magma); last.img(); rm.img()
plot_degradation(X = W, nrow = 4, mar = c(2, 1), colors = viridis::plasma(n = 4, alpha = 0.1), pal = viridis::plasma); last.img(); rm.img()
plot_degradation(X = W[-nrow(W), ], mar = c(3, 1), nrow = 4, ovlp = 95, colors = viridis::mako(4, alpha = 0.3)); last.img(); rm.img()
plot_degradation(X = W[-12, ], mar = c(5, 1), nrow = 6, ovlp = 95); last.img(); rm.img()
plot_degradation(X = W[-3, ], nrow = 2, ovlp = 95, colors = viridis::mako(4, alpha = 0.4), pal = viridis::mako, wl = 200); last.img(); rm.img()
plot_degradation(X = W[-nrow(W), ], mar = c(3, 1), nrow = 4, ovlp = 95, colors = viridis::mako(4, alpha = 0.3)); last.img(); rm.img()
plot_degradation(X = W[-nrow(W), ], mar = c(3, 1), nrow = 4, ovlp = 95, colors = viridis::mako(4, alpha = 0.4)); last.img(); rm.img()
plot_degradation(X = W[-nrow(W), ], mar = c(3, 1), nrow = 4, ovlp = 95, colors = viridis::mako(4, alpha = 0.3)); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/plot_degradation.R")
FUN <- "plot_degradation"
#run function
run.all()
source(file.path("./R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/degradation_est.rda")
options(sound.files.path = tempdir(), dest.path = tempdir())
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
W <- X <- degradation_est[degradation_est$sound.files != "master.wav", ]
# all spectros
plot_degradation(X = W, nrow = 4, mar = c(2, 1)); last.img(); rm.img()
# removing one row
plot_degradation(X = W[-5, ], nrow = 3, ovlp = 95, colors = viridis::magma(4, alpha = 0.3), pal = viridis::magma); last.img(); rm.img()
plot_degradation(X = W[-3, ], nrow = 2, ovlp = 95, colors = viridis::mako(4, alpha = 0.4), pal = viridis::mako, wl = 200); last.img(); rm.img()
plot_degradation(X = W[-nrow(W), ], mar = c(3, 1), nrow = 4, ovlp = 95, colors = viridis::mako(4, alpha = 0.3)); last.img(); rm.img()
plot_degradation(X = W[-12, ], mar = c(5, 1), nrow = 6, ovlp = 95); last.img(); rm.img()
# changin marging
plot_degradation(X = W, mar = c(10, 1), nrow = 5, ovlp = 95); last.img(); rm.img()
# more rows than needed
plot_degradation(X = W,  nrow = 10, ovlp = 90); last.img(); rm.img()
# other colors
plot_degradation(X = W, nrow = 4, mar = c(2, 1), colors = viridis::magma(4, alpha = 0.3), pal = viridis::magma); last.img(); rm.img()
plot_degradation(X = W, nrow = 4, mar = c(2, 1), colors = viridis::plasma(n = 4, alpha = 0.1), pal = viridis::plasma); last.img(); rm.img()
# Original vector
original_vector <- c("a", "b", "c", "a", "b", "c")
# Desired order
desired_order <- c("b", "c", "a")
# Create a factor with desired order
factor_order <- factor(original_vector, levels = desired_order)
# Sort the vector based on the factor order
sorted_vector <- original_vector[order(factor_order)]
# Display the sorted vector
print(sorted_vector)
unique(letters[c(1, 1, 3)])
unique(letters[c(3, 1, 1, 3)])
source("~/Dropbox/R_package_testing/baRulho/R/plot_degradation.R")
# all spectros
plot_degradation(X = W, nrow = 4, mar = c(2, 1)); last.img(); rm.img()
# sorting by sound id
plot_degradation(X = W[order(W$sound.id), ], nrow = 4, mar = c(2, 1)); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/plot_degradation.R")
# sorting by sound id
plot_degradation(X = W[order(W$sound.id), ], nrow = 4, mar = c(2, 1)); last.img(); rm.img()
# sorting by sound id
plot_degradation(X = W[order(W$sound.id, W$transect), ], nrow = 4, mar = c(2, 1)); last.img(); rm.img()
# sorting by sound id
plot_degradation(X = W[order(W$sound.id, -W$transect), ], nrow = 4, mar = c(2, 1)); last.img(); rm.img()
# sorting by sound id
plot_degradation(X = W[order(W$sound.id, W$transect, decreasing = T), ], nrow = 4, mar = c(2, 1)); last.img(); rm.img()
# 1 transect
R <- W[order(W$transect == W$transect[1], ]
# 1 transect
R <- W[W$transect == W$transect[1], ]
plot_degradation(X = R, nrow = 4, mar = c(2, 1)); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/plot_degradation.R")
plot_degradation(X = R, nrow = 4, mar = c(2, 1)); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/plot_degradation.R")
plot_degradation(X = R, nrow = 4, mar = c(2, 1)); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/plot_degradation.R")
plot_degradation(X = R, nrow = 4, mar = c(2, 1)); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/plot_degradation.R")
plot_degradation(X = R, nrow = 4, mar = c(2, 1)); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/plot_degradation.R")
source("~/Dropbox/R_package_testing/baRulho/R/plot_degradation.R")
plot_degradation(X = R, nrow = 4, mar = c(2, 1)); last.img(); rm.img()
FUN <- "plot_degradation"
#run function
run.all()
source(file.path("./R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/degradation_est.rda")
options(sound.files.path = tempdir(), dest.path = tempdir())
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
W <- X <- degradation_est[degradation_est$sound.files != "master.wav", ]
# all spectros
plot_degradation(X = W, nrow = 4, mar = c(2, 1)); last.img(); rm.img()
# sorting by sound id
plot_degradation(X = W[order(W$sound.id, W$transect, decreasing = T), ], nrow = 4, mar = c(2, 1)); last.img(); rm.img()
# 1 transect
R <- W[W$transect == W$transect[1], ]
plot_degradation(X = R, nrow = 4, mar = c(2, 1)); last.img(); rm.img()
# removing one row
plot_degradation(X = W[-5, ], nrow = 3, ovlp = 95, colors = viridis::magma(4, alpha = 0.3), pal = viridis::magma); last.img(); rm.img()
plot_degradation(X = W[-3, ], nrow = 2, ovlp = 95, colors = viridis::mako(4, alpha = 0.4), pal = viridis::mako, wl = 200); last.img(); rm.img()
plot_degradation(X = W[-nrow(W), ], mar = c(3, 1), nrow = 4, ovlp = 95, colors = viridis::mako(4, alpha = 0.3)); last.img(); rm.img()
plot_degradation(X = W[-12, ], mar = c(5, 1), nrow = 6, ovlp = 95); last.img(); rm.img()
# changin marging
plot_degradation(X = W, mar = c(10, 1), nrow = 5, ovlp = 95); last.img(); rm.img()
# more rows than needed
plot_degradation(X = W,  nrow = 10, ovlp = 90); last.img(); rm.img()
# other colors
plot_degradation(X = W, nrow = 4, mar = c(2, 1), colors = viridis::magma(4, alpha = 0.3), pal = viridis::magma); last.img(); rm.img()
plot_degradation(X = W, nrow = 4, mar = c(2, 1), colors = viridis::plasma(n = 4, alpha = 0.1), pal = viridis::plasma); last.img(); rm.img()
source("~/Dropbox/R_package_testing/baRulho/R/plot_degradation.R")
source("~/Dropbox/R_package_testing/baRulho/R/plot_degradation.R")
source("~/Dropbox/R_package_testing/baRulho/R/plot_degradation.R")
styler::style_dir("./R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
devtools::test()
use_test()
# load example data
data("degradation_est")
# create subset of data with only re-recorded files
rerecorded_est <-
degradation_est[degradation_est$sound.files != "master.wav",]
# order so spectrograms from same sound id as close in the graph
rerecorded_est <-
rerecorded_est[order(rerecorded_est$sound.id),]
# set directory to save image files
options(dest.path = tempdir())
# plot (look into temporary working directory `tempdir()`)
# plot degradation spectrograms
plot_degradation(
X = rerecorded_est, nrow = 3, ovlp = 95,
colors = viridis::magma(4, alpha = 0.3),
palette = viridis::magma
)
fls <-
list.files(path = tempdir(),
pattern = "^plot_align",
full.names = TRUE)
fls
fls <-
list.files(path = tempdir(),
pattern = "^plot_degrad",
full.names = TRUE)
fls
unlink(fls)
ad example data
# load example data
data("degradation_est")
# create subset of data with only re-recorded files
rerecorded_est <-
degradation_est[degradation_est$sound.files != "master.wav",]
# order so spectrograms from same sound id as close in the graph
rerecorded_est <-
rerecorded_est[order(rerecorded_est$sound.id),]
# set directory to save image files
options(dest.path = tempdir())
# plot (look into temporary working directory `tempdir()`)
# plot degradation spectrograms
plot_degradation(
X = rerecorded_est, nrow = 3000, ovlp = 95,
colors = viridis::magma(4, alpha = 0.3),
palette = viridis::magma
)
# plot (look into temporary working directory `tempdir()`)
# plot degradation spectrograms
plot_degradation(
X = rerecorded_est, nrow = 300, ovlp = 95,
colors = viridis::magma(4, alpha = 0.3),
palette = viridis::magma
)
source("~/Dropbox/R_package_testing/baRulho/R/plot_degradation.R")
# plot (look into temporary working directory `tempdir()`)
# plot degradation spectrograms
plot_degradation(
X = rerecorded_est, nrow = 3000, ovlp = 95,
colors = viridis::magma(4, alpha = 0.3),
palette = viridis::magma
)
fls <-
list.files(path = tempdir(),
pattern = "^plot_degrad",
full.names = TRUE)
fls
test_that("basic", {
# load example data
data("degradation_est")
# create subset of data with only re-recorded files
rerecorded_est <-
degradation_est[degradation_est$sound.files != "master.wav",]
# order so spectrograms from same sound id as close in the graph
rerecorded_est <-
rerecorded_est[order(rerecorded_est$sound.id),]
# set directory to save image files
options(dest.path = tempdir())
# plot (look into temporary working directory `tempdir()`)
# plot degradation spectrograms
plot_degradation(
X = rerecorded_est, nrow = 3, ovlp = 95,
colors = viridis::magma(4, alpha = 0.3),
palette = viridis::magma
)
fls <-
list.files(path = tempdir(),
pattern = "^plot_degrad",
full.names = TRUE)
expect_length(fls, 3)
unlink(fls)
})
test_that("many ros", {
# load example data
data("degradation_est")
# create subset of data with only re-recorded files
rerecorded_est <-
degradation_est[degradation_est$sound.files != "master.wav",]
# order so spectrograms from same sound id as close in the graph
rerecorded_est <-
rerecorded_est[order(rerecorded_est$sound.id),]
# set directory to save image files
options(dest.path = tempdir())
# plot (look into temporary working directory `tempdir()`)
# plot degradation spectrograms
plot_degradation(
X = rerecorded_est, nrow = 3000, ovlp = 95,
colors = viridis::magma(4, alpha = 0.3),
palette = viridis::magma
)
fls <-
list.files(path = tempdir(),
pattern = "^plot_degrad",
full.names = TRUE)
expect_length(fls, 1)
unlink(fls)
})
styler::style_dir("./R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
data("degradation_est")
# create subset of data with only re-recorded files
rerecorded_est <- degradation_est[degradation_est$sound.files != "master.wav", ]
# remove noise selections
pe <- rerecorded_est[rerecorded_est$sound.id != "ambient", ]
# using margin for noise of 0.01
tail_to_signal_ratio(X = pe, mar = 0.01, bp = NULL)
# tail-to-noise ratio (type 2)
tail_to_signal_ratio(X = rerecorded_est, mar = 0.01, type = 2)
styler::style_dir("./R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
# load example data
data("degradation_est")
# set global options
options(dest.path = tempdir(), mar = 0.01, pb = FALSE)
# create subset of data with only re-recorded files
rerecorded_est <- degradation_est[degradation_est$sound.files != "master.wav", ]
# using margin for noise of 0.01
tail_to_signal_ratio(X = rerecorded_est)
# load example data
data("degradation_est")
# set global options
options(pb = FALSE)
# create subset of data with only re-recorded files
rerecorded_est <- degradation_est[degradation_est$sound.files != "master.wav", ]
# using margin for noise of 0.01
tail_to_signal_ratio(X = rerecorded_est, mar = 0.01)
# tail-to-noise ratio (type 2)
tail_to_signal_ratio(X = rerecorded_est, mar = 0.01, type = 2)
styler::style_dir("./R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
source("~/Dropbox/R_package_testing/baRulho/R/tail_to_signal_ratio.R")
source("~/Dropbox/R_package_testing/baRulho/R/tail_to_signal_ratio.R")
FUN <- "signal_to_noise_ratio"
#run function
source(file.path("./R", paste0(FUN, ".R")))
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
load("./data/degradation_est.rda")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
#tests
# remove noise selections
pe <- degradation_est[degradation_est$signal.type != "ambient", ]
# using margin for noise of 0.05 and adjacent noise reference
print("type 1")
tail_to_signal_ratio(X = pe, mar = 0.01, bp = NULL)
source("~/Dropbox/R_package_testing/baRulho/R/tail_to_signal_ratio.R")
# remove noise selections
pe <- degradation_est[degradation_est$signal.type != "ambient", ]
print("type 1")
tail_to_signal_ratio(X = pe, mar = 0.01, bp = NULL)
hop.size = getOption("hop.size", 1)
hop.size
# get sampling rate
sampling_rate <-
warbleR::read_sound_file(
X = X,
index = 1,
path = path,
header = TRUE
)$sample.rate
X = pe
# get sampling rate
sampling_rate <-
warbleR::read_sound_file(
X = X,
index = 1,
path = path,
header = TRUE
)$sample.rate
# adjust wl based on hope.size
if (is.null(wl)) {
wl <- round(sampling_rate * hop.size / 1000, 0)
}
wl
getOption("wl", NULL)
wl = getOption("wl", NULL)
source("~/Dropbox/R_package_testing/baRulho/R/tail_to_signal_ratio.R")
print("type 1")
tail_to_signal_ratio(X = pe, mar = 0.01, bp = NULL)
source("~/Dropbox/R_package_testing/baRulho/R/spectrum_blur_ratio.R")
source("~/Dropbox/R_package_testing/baRulho/R/tail_to_signal_ratio.R")
source("~/Dropbox/R_package_testing/baRulho/R/tail_to_signal_ratio.R")
# remove noise selections
pe <- degradation_est[degradation_est$signal.type != "ambient", ]
print("type 1")
tail_to_signal_ratio(X = pe, mar = 0.01, bp = NULL)
# get sampling rate
sampling_rate <-
warbleR::read_sound_file(
X = X,
index = 1,
path = path,
header = TRUE
)$sample.rate
sampling_rate
warbleR::read_sound_file(
X = X,
index = 1,
path = path,
header = TRUE
)
X
# Simulated data
maternal_age <- seq(18, 45, by = 1)
probability_survival <- 1 / (1 + exp(-(-0.2 * (maternal_age - 30))))
# Create a data frame
data <- data.frame(maternal_age, probability_survival)
# Load the required library
library(ggplot2)
# Create the plot
ggplot(data, aes(x = maternal_age, y = probability_survival)) +
geom_line() +
geom_point() +
labs(x = "Maternal Age", y = "Probability of Survival", title = "Probability of Survival vs Maternal Age")
X
asdaasda
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
# remove noise selections
pe <- degradation_est[degradation_est$sound.id != "asasambient", ]
pe
# remove noise selections
pe <- degradation_est[degradation_est$sound.id == "aasasmbient", ]
pe
print("type 1")
tail_to_signal_ratio(X = pe, mar = 0.01, bp = NULL)
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
tail_to_signal_ratio(X = pe, mar = 0.01, bp = NULL)
# remove noise selections
pe <- degradation_est[degradation_est$sound.id = "ambient", ]
print("type 1")
tail_to_signal_ratio(X = pe, mar = 0.01, bp = NULL)
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
tail_to_signal_ratio(X = pe, mar = 0.01, bp = NULL)
# remove noise selections
pe <- degradation_est[degradation_est$sound.id != "ambient", ]
print("type 1")
tail_to_signal_ratio(X = pe, mar = 0.01, bp = NULL)
source("~/Dropbox/R_package_testing/baRulho/R/tail_to_signal_ratio.R")
print("type 1")
tail_to_signal_ratio(X = pe, mar = 0.01, bp = NULL)
styler::style_dir("./R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
# load example data
data("degradation_est")
# set global options
options(pb = FALSE)
# create subset of data with only re-recorded files
rerecorded_est <- degradation_est[degradation_est$sound.files != "master.wav", ]
# using margin for noise of 0.01
tail_to_signal_ratio(X = rerecorded_est, mar = 0.01)
# tail-to-noise ratio (type 2)
tail_to_signal_ratio(X = rerecorded_est, mar = 0.01, type = 2)
styler::style_dir("./R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
styler::style_dir("./R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
styler::style_dir("./R")
# styler::style_dir("./R")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
