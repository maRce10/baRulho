% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/synth_sounds.R
\name{synth_sounds}
\alias{synth_sounds}
\title{Create synthetic sounds}
\usage{
synth_sounds(steps = 10, am.amps = rep(c(1:4, 3:2), length.out = steps),
replicates = 1, frequencies, durations, nharmonics = 1, fm = FALSE, am = FALSE, 
mar = 0.05, seed = NULL, sig2 = 0.3, shuffle = FALSE,
hrm.freqs = c(1/2, 1/3, 2/3, 1/4, 3/4, 1/5, 1/6, 1/7, 1/8, 1/9, 1/10),
sampling.rate = 44.1)
}
\arguments{
\item{steps}{Numeric vector of length 1. Controls the number of frequency steps in which each sound is split. Default is 10.}

\item{am.amps}{Numeric vector with the relative amplitude for each step (see 'step' argument) to simulate amplitude modulation (only applied to the fundamental frequency). Should have the same length as the number of steps. Default is 1 (no amplitude modulation). The default value (\code{rep(c(1:4, 3:2), length.out = steps)}) has to amplitude peaks.}

\item{replicates}{Numeric vector of length 1 indicating the number of replicates for each treatment combination. Default is 1. Useful for measuring variation in transmission parameters.}

\item{frequencies}{Numeric vector with the different frequencies (in seconds) to synthesize.}

\item{durations}{Numeric vector with the different durations (in seconds) to synthesize.}

\item{nharmonics}{Numeric vector of length 1 specifying the number of harmonics to simulate. 1 indicates that only the fundamental
frequency harmonic will be simulated.}

\item{fm}{Logical to control if frequency modulated sounds are synthesize.}

\item{am}{Logical to control if amplitude modulated sounds are synthesize.}

\item{mar}{Numeric vector with the duration of margins of silence around sounds in seconds. Default is \code{0.05}.}

\item{seed}{Numeric vector of length 1. This allows users to get the same results in different runs (using \code{\link[base:Random]{set.seed}} internally). Default is \code{NULL}.}

\item{sig2}{Numeric vector of length 1 defining the sigma value of the brownian motion model (used for simulating frequency modulation). Default is 0.3.}

\item{shuffle}{Logical to control if the position of sounds is randomized. Useful to avoid having sounds from the same treatments next to each other. Defaul is \code{FALSE}.}

\item{hrm.freqs}{Numeric vector with the frequencies of the harmonics relative to the fundamental frequency. The default values are c(1/2, 1/3, 2/3, 1/4, 3/4, 1/5, 1/6, 1/7, 1/8, 1/9, 1/10).}

\item{sampling.rate}{Numeric vector of length 1. Sets the sampling frequency of the wave object (in kHz). Default is 44.1.}
}
\value{
A wave object containing the simulated songs. If 'selec.table' is \code{TRUE} the function saves the wave object as a '.wav' sound file in the working directory (or 'path') and returns a list including 1) a selection table with the start/end time, and bottom/top frequency of the sub-units and 2) the wave object.
}
\description{
\code{synth_sounds} create synthetic sounds
}
\details{
This function creates synthetic sounds that can be used on playback experiments to understand the link between signal structure and its transmission properties. The function can add variation in signal structure in 5 dimensions: 
\itemize{
   \item \code{frequency}: continuous, argument 'frequencies'.
   \item \code{duration}: continuous, argument 'durations'.
   \item \code{harmonic structure}: binary (harmonics vs no-harmonics), arguments 'nharmonics' and 'hrm.freqs'.
   \item \code{frequency modulation}: variation in fundamental frequency across time. Binary (modulated vs non-modulated), arguments 'fm' and 'sig2'. 
   \item \code{amplitude modulation}: variation in amplitude across time. Binary (modulated vs non-modulated), arguments 'am' and 'am.amps'.
}
Sound for all possible combinations of the selected structure dimensions will be synthesized. The output is an extended selection table, which can be input into \code{\link{master_sound_file}} to create the .wav file. The functions uses \code{\link[warbleR]{simulate_songs}} internally for synthesizing individual sounds. A Brownian bridge motion stochastic process (\code{diff.fun == "BB"}) is used to simulate frequency modulation.
The function can also simulate pure tones (\code{diff.fun == "pure.tone"}, 'sig2' is ignored).
}
\examples{
\dontrun{
 # simulate a song with 3 elements and no harmonics
 sm_sng <- synth_sounds(n = 3, harms = 1)

 # plot spectro
 seewave::spectro(sm_sng)

 # simulate a song with 5 elements and 2 extra harmonics
sm_sng2 <- synth_sounds(n = 5, harms = 3)

 # plot spectrogram
 seewave::spectro(sm_sng2)

# six pure tones with frequency ranging form 4 to 6 and returning selection table
sm_sng <- synth_sounds(n = 6, harms = 1, seed = 1, diff.fun = "pure.tone",
                  freqs = seq(4, 6, length.out = 6), selec.table = TRUE,
                  path = tempdir())

# plot spectro
seewave::spectro(sm_sng$wave, flim = c(2, 8))

# selection table
sm_sng$selec.table
}

}
\references{
{
Araya-Salas, M., & Smith-Vidaurre, G. (2017). warbleR: An R package to streamline analysis of animal acoustic signals. Methods in Ecology and Evolution, 8(2), 184-191.
}
}
\seealso{
\code{\link{query_xc}} for for downloading bird vocalizations from an online repository.
}
\author{
Marcelo Araya-Salas (\email{marcelo.araya@ucr.ac.cr})
}
