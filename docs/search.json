[{"path":"https://marce10.github.io/baRulho/articles/baRulho.html","id":"inputting-acoustic-data-and-annotations","dir":"Articles","previous_headings":"","what":"Inputting acoustic data and annotations","title":"<center><font size=","text":"package requires annotation data input data frame, selection table extended selection tables. data frame used must contain following columns: 1) “sound.files”: name .wav files, 2) “selec”: unique annotation identifier (within sound file), 3) “start”: start time 4) “end”: end time annotation, 5) ‘top.freq’: top frequency (bandpass) 6) ‘bottom.freq’ bottom frequency (bandpass) annotation. selection table objects class package warbleR contain annotation data (.e. time-frequency position sounds sound files) previously double-checked. extended selection table object class (also warbleR) contains annotations corresponding acoustic data wave objects. Therefore, extended selection tables self-contained objects since original sound files longer needed perform acoustic analyses. objects created selection_table() function warbleR. Take look intro warbleR vignette details. Selection tables extended selection tables recommended apply double-checking step acoustic data creation, helps avoiding downstream errors analysis. Analysis extended selection tables also run faster object classes. Glossary -Model sound: sound transmission properties studied, usually found original field recordings synthetic sound files. -Reference sound: sound use pattern compare . Usually created re-recording model sound broadcast 1 m source (speaker). -Sound ID: ID sounds used identify counterparts across distances. sound must unique ID within distance. -Ambient noise: energy background sounds recording, excluding sounds interest. -Test sound: sounds re-recorded far source test transmission/degradation (also refer ‘re-recorded’ sounds). -Degradation: term used describe changes structure sound transmitted given habitat (note agreement terminology scientific community).  ","code":""},{"path":"https://marce10.github.io/baRulho/articles/baRulho.html","id":"workflow-of-sound-processing-and-analysis","dir":"Articles","previous_headings":"","what":"Workflow of sound processing and analysis","title":"<center><font size=","text":"common sequence steps experimentally test hypotheses related sound transmission depicted following diagram:   baRulho offers functions critical steps workflow (black, including ‘checks’) required acoustic data manipulation analysis. Additional functions warbleR can used (used vignette) complement functions baRulho. tools presented following workflow.  ","code":""},{"path":"https://marce10.github.io/baRulho/articles/baRulho.html","id":"synthesize-sounds","dir":"Articles","previous_headings":"","what":"Synthesize sounds","title":"<center><font size=","text":"often want figure transmission properties vary across range frequencies. instance, Tobias et al (2010) studied whether acoustic adaptation (special case sensory drive; Morton 1975), explain song evolution Amazonian avian communities. test authors created synthetic pure tone sounds used playback re-recorded different habitats. actual procedure creating synthetic sounds described : “Tones synthesized six different frequencies (0.5, 1.0, 2.0, 3.0, 4.0, 5.0 kHz) encompass range maximum avian auditory sensitivity (Dooling 1982). frequency, generated two sequences two 100-msec tones. One sequence relatively short interval 150 msec, close mean internote interval sample (152± 4 msec). sequence longer interval 250 msec, close mean maximum internote interval sample (283± 74 msec). first sequence reflects fast-paced song second slower paced song (sensu Slabbekoorn et al. 2007). master file (44100 Hz/16 bit WAV) thereby consisted series 12 pairs artificial 100-ms constant-frequency tones six different frequencies (0.5, 1.0, 2.0, 3.0, 4.0, 5.0 kHz).” can synthesize pure tones using function sim_songs() package warbleR. function requires 1) number tones synthesize (argument n), 2) duration tones (durs, seconds), 3) duration intervals (gaps, seconds) 4) frequencies tone synthesized (freqs, kHz). addition, argument diff.fun set “pure.tone” argument harm 1 remove harmonics. case need six tones 100 ms 0.5, 1, 2, 3, 4, 5 kHz separated intervals 150 ms (least first synthetic file described Tobias et al 2010). can also get selection table (sensu warbleR) information time frequency location every sound. required order make master sound file. get selection table need set argument selec.table = TRUE. can done follows:    function returns list first element selection table second one wave object:   function also saves associated ‘.wav’ file working directory (example tempdir()).  ","code":"# synthesize synth.l <- sim_songs(n = 6, durs = 0.1, freqs = c(0.5, 1:5), harms = 1, gaps = 0.15,     diff.fun = \"pure.tone\", selec.table = TRUE, path = td)  # plot spectro seewave::spectro(synth.l$wave, scale = FALSE, palette = viridis, grid = FALSE, flim = c(0,     6), collevels = seq(-20, 0, 1)) class(synth.l) ## [1] \"list\" names(synth.l) ## [1] \"selec.table\" \"wave\" synth.l$selec.table list.files(path = td, pattern = \"\\\\.wav$\") ## character(0) ## [1] \"2020-01-09_17:00:50.wav\""},{"path":"https://marce10.github.io/baRulho/articles/baRulho.html","id":"create-master-sound-file-for-playback","dir":"Articles","previous_headings":"","what":"Create master sound file for playback","title":"<center><font size=","text":"function master_sound_file() creates master sound file (probably guessed) playback experiments. function takes wave objects data frame (extended) selection table containing model sounds concatenates single sound file (silence sounds length can modified). master_sound_file() adds acoustic markers start end playback can used time-sync re-recorded sounds, streamlines quantification acoustic degradation. following example shows create master sound file using synthetic sounds generated . synthetic sounds need add little space top bottom frequency sim_songs() make values exactly pure tones:   function saves master sound file wave file returns selection table R environment time frequency ‘coordinates’ sounds file. can look spectrogram output file using warbleR function spectrograms() follows:  function can also create master sound file sounds different sounds files, likely case recordings collected field. following example shows create master sound file using several sound files. code uses example data recordings package warbleR:   , can look spectrogram output file:  Note output also exported Raven sound analysis software (Cornell Lab Ornithology) visualization manipulation using function exp_raven() Rraven package. exp_raven() exports selections R environment ‘.txt’ file can read Raven:   sound files annotations can visualized Raven ( acoustic analysis software):    Take look Rraven vignette details export data R Raven. Note start end markers placed relatively low amplitudes less affected degradation. frequency range markers can set argument flim. relative amplitude markers can also adjusted amp.marker argument. Amplitude markers multiplied value supplied markers louder sounds. two features increases chances “detected” distances regardless amplitude sounds.","code":"# extract selection table st <- synth.l$selec.table  # add freq range (0.5 kHz) st$bottom.freq <- st$bottom.freq - 0.25 st$top.freq <- st$top.freq + 0.25  # make an extended selection table synth.est <- selection_table(X = st, extended = TRUE, confirm.extended = FALSE, path = td)  # create master sound file synth.master.sf <- master_sound_file(X = synth.est, file.name = \"synthetic_master\",     dest.path = td, gap.duration = 0.15) # plot spectro (saved in working directory) spectrograms(synth.master.sf, path = td, by.song = \"sound.files\", xl = 3, collevels = seq(-60,     0, 5), osci = TRUE) # load example data from warbleR data(list = c(\"Phae.long1\", \"Phae.long2\", \"Phae.long3\", \"Phae.long4\", \"lbh_selec_table\"))  # save sound files to temporary folder writeWave(Phae.long1, file.path(td, \"Phae.long1.wav\")) writeWave(Phae.long2, file.path(td, \"Phae.long2.wav\")) writeWave(Phae.long3, file.path(td, \"Phae.long3.wav\")) writeWave(Phae.long4, file.path(td, \"Phae.long4.wav\"))  # make an extended selection table est <- selection_table(X = lbh_selec_table, extended = TRUE, confirm.extended = FALSE,     path = td)  # create master sound file master.sf <- master_sound_file(X = est, file.name = \"example_master\", dest.path = td,     gap.duration = 0.3) spectrograms(master.sf, path = td, by.song = \"sound.files\", xl = 3, collevels = seq(-60,     0, 5), osci = TRUE) Rraven::exp_raven(master.sf, path = td, file.name = \"example_master_selection_table\")"},{"path":"https://marce10.github.io/baRulho/articles/baRulho.html","id":"time-sync-re-recorded-sounds","dir":"Articles","previous_headings":"","what":"Time sync re-recorded sounds","title":"<center><font size=","text":"went field (lab) re-recorded master sound files different distances, ready start data analysis. first step getting data ready analysis involves finding sounds within re-recorded sound files. need align start marker master playback re-recorded sound files, based fact time difference marker sounds cases:   simulate re-recorded sound files make two copies master sound file, add silence beginning (1 2 seconds) add noise:   find location start marker (simulated) re-recorded sound files use functions search_templates() run cross-correlation one markers across test (re-recorded) files determine exact time marker found:   also use end marker template case start marker masked sounds. output search_templates() indicates start markers found starting ~2 s ~3 s (2.00062 s 3.00084 s), expected master_sound_file() inserts 1 second silence beginning master sound files added 1 s 2 s simulated file respectively. information can infer position selections new recordings. selection table re-recorded files can generated using function align_test_files():   default function returns extended_selection_table created ‘.song’ (see ‘?selection_table()’), data format pretty much baRulho functions take.   can check precision alignment looking spectrograms:       examples actual test sounds re-recorded field 1, 30, 65, 100 m respectively, later aligned using start marker:   ","code":"# read master exmp.master <- readWave(file.path(td, \"example_master.wav\"))  # add 1 s silence and create first copy exmp.test1 <- addsilw(wave = exmp.master, at = \"start\", d = 1, output = \"Wave\", f = exmp.master@samp.rate)  # add 2 s silence and create second copy exmp.test2 <- addsilw(wave = exmp.master, at = \"start\", d = 2, output = \"Wave\", f = exmp.master@samp.rate)  # make noise ns <- noisew(f = exmp.master@samp.rate, d = duration(exmp.test2) + 1, output = \"Wave\")  # make noise exactly the same length and add noise to 2 examples exmp.test1@left <- exmp.test1@left + (ns@left[1:length(exmp.test1@left)] * 150) exmp.test2@left <- exmp.test2@left + (ns@left[1:length(exmp.test2@left)] * 150)  # normalize both before saving exmp.test1 <- normalize(exmp.test1, unit = \"16\") exmp.test2 <- normalize(exmp.test2, unit = \"16\")  # save simulated re-recorded sound files writeWave(object = exmp.test1, filename = file.path(td, \"example_test1.wav\"), extensible = FALSE)  writeWave(object = exmp.test2, filename = file.path(td, \"example_test2.wav\"), extensible = FALSE) found.starts <- search_templates(X = master.sf, template.rows = which(master.sf$orig.sound.file ==     \"start_marker\"), test.files = c(\"example_test1.wav\", \"example_test2.wav\"), path = td) pks  found.starts alg.tests <- align_test_files(X = master.sf, Y = found.starts, path = td, by.song = TRUE) is_extended_selection_table(alg.tests)  alg.tests ## [1] TRUE spectrograms(alg.tests, by.song = \"sound.files\", xl = 3, collevels = seq(-60, 0,     5), dest.path = td, osci = TRUE)"},{"path":"https://marce10.github.io/baRulho/articles/baRulho.html","id":"further-aligning","dir":"Articles","previous_headings":"Time sync re-recorded sounds","what":"Further aligning","title":"<center><font size=","text":"process done manually (broadcasting devices add short delays case bluetooth transmitters) small misalignment inferred versus actual start time re-recorded sounds. problematic quantifying degradation baRulho (sound analysis software) precise alignment sound crucial accuracy downstream measures sound degradation. Misalignment can fixed function spcc_align(). function uses spectrogram cross-correlation sync position time sounds regard reference sound. spcc_align() takes sound recorded closest distance source reference sound. function calls warbleR’s cross_correlation() (just ) internally align sounds using cross-correlation. baRulho comes example data set called playback_est_unaligned, contains sounds time position sounds slightly unaligned. can use data show function spcc_align() works: output extended selection table contains new start end values alignment. sounds look aligned:   case doesn’t work expected plan B. function seltailor() warbleR allows user manually adjust start end sounds extended selection table.  ","code":"data(\"playback_est_unaligned\")  # method 1 playback_est_aligned <- spcc_align(X = playback_est_unaligned) # rename sound files so aligned and unaligned sounds are intercalated unalg <- rename_waves_est(playback_est_unaligned, playback_est_unaligned$sound.files,     new.selec = seq(1, 200, by = 2)[1:nrow(playback_est_unaligned)]) alg <- rename_waves_est(playback_est_aligned, playback_est_aligned$sound.files, new.selec = seq(2,     200, by = 2)[1:nrow(playback_est_aligned)])  # add label unalg$type <- \"Before aligning\" alg$type <- \"After aligning\"  # put together in a single ext sel tab unalg.alg <- rbind(unalg, alg)  # create spectrograms spectrograms(unalg.alg[unalg.alg$sound.id != \"ambient\", ], dest.path = tempdir(),     res = 100, wl = 300, title.labels = \"type\", sel.labels = NULL)"},{"path":"https://marce10.github.io/baRulho/articles/baRulho.html","id":"quantifying-sound-degradation","dir":"Articles","previous_headings":"","what":"Quantifying sound degradation","title":"<center><font size=","text":"baRulho functions design quantify sound degradation. important things keep mind functions quantifying degradation: package currently assumes recordings made equipment recording volume. modified future versions allow amplitude calibration recordings. Wave envelope frequency spectrum calculations made applying bandpass filter within frequency range reference sound (‘bottom.freq’ ‘top.freq’ columns) Compare sounds counterpart recorded closest distance source (e.g. compare sound recorded 5m, 10m 15m counterpart recorded 1m). default method. Compare sounds counterpart recorded distance immediately (e.g. sound recorded 10m compared one recorded 5m, sound recorded 15m compared one recorded 10m ).","code":""},{"path":"https://marce10.github.io/baRulho/articles/baRulho.html","id":"required-data-structure","dir":"Articles","previous_headings":"Quantifying sound degradation","what":"Required data structure","title":"<center><font size=","text":"input data contain additional information. baRulho comes example extended_selection_table data set can used understand required data structure: s   Note besides basic acoustic annotation information (e.g. sound file, time, frequency) table also contains ‘sound.id’ column, contains ID sounds used identify correspondent sounds across distances, ‘distance’ column refers distance source sound recorded. Sound ID distance required comparison sounds. Also note selections labeled “ambient” ‘sound.id’. selections refer ambient (background) noise. Ambient noise can used functions correct amplitude differences due non-target sounds. example data 4 recordings increasing distances: 1m, 5m, 10m 15m: data contains selections 5 sounds well 2 ambient noise selections distance/recording:","code":"data(\"playback_est\")  playback_est # count selection per recordings unique(playback_est$sound.files) ## [1] \"01m_re-rec.wav\" \"05m_re-rec.wav\" \"10m_re-rec.wav\" \"15m_re-rec.wav\" table(playback_est$sound.id, playback_est$distance)"},{"path":[]},{"path":"https://marce10.github.io/baRulho/articles/baRulho.html","id":"blur-ratio","dir":"Articles","previous_headings":"Quantifying sound degradation > Degradation measurements","what":"Blur ratio","title":"<center><font size=","text":"Blur ratio quantifies degradation sound function distortion amplitude envelope (time domain) excluding changes due energy attenuation. measure first described Dabelsteen et al. (1993). Blur ratio measured mismatch amplitude envelopes (expressed probability density functions) reference sound re-recorded sound. Low values indicate low degradation sounds. function blur_ratio() measures blur ratio sounds reference playback re-recorded different distances. function compares sound corresponding reference sound within supplied frequency range (e.g. bandpass) reference sound (‘bottom.freq’ ‘top.freq’ columns ‘X’). ‘sound.id’ column must used tell function compare sounds belonging category (e.g. song-types). sound files (wave objects extended selection table) must sampling rate length envelopes comparable. Blur ratio can calculated follows:   output data frame similar input data, except includes two new columns (‘reference’ ‘blur.ratio’) reference sound blur ratio values. Note NAs returned sounds used reference ‘ambient’ noise selections. img = TRUE also returns 1 image file (‘jpeg’ format) comparison showing spectrograms sounds overlaid amplitude envelopes (probability mass functions (PMF)). Output image files (working directory) look like ones:   image shows spectrogram reference re-recorded sound, well envelopes sounds overlaid single graph. Colors indicate sound spectrograms envelopes belong . blur ratio value also displayed. function can also return amplitude spectrum contours argument output = \"list\". contours can directly input ggplot visualize amplitude envelopes, vary distance across sound types (ambient noise included):  Note smooth argument change envelope shapes related measurements. following code sets smooth = 800:   ","code":"# run blur ratio br <- blur_ratio(playback_est, method = 1)  # check output class is_extended_selection_table(br) ## [1] TRUE # see output br # run blur ratio br <- blur_ratio(playback_est, method = 1, img = TRUE, ssmooth = 300, dest.path = td) envs <- blur_ratio(X = playback_est, output = \"list\", ssmooth = 300, img = FALSE,     pb = FALSE)$envelopes  envs$distance <- as.factor(envs$distance)  ggplot(envs, aes(x = time, y = amp, col = distance)) + geom_line() + facet_wrap(~sound.id) +     scale_color_viridis_d(alpha = 0.7) + labs(x = \"Time (s)\", y = \"Amplitude (PMF)\") +     theme_classic() envs <- blur_ratio(X = playback_est, output = \"list\", ssmooth = 1000, img = FALSE,     pb = FALSE)$envelopes  envs$distance <- as.factor(envs$distance)  ggplot(envs, aes(x = time, y = amp, col = distance)) + geom_line() + facet_wrap(~sound.id) +     scale_color_viridis_d(alpha = 0.7) + labs(x = \"Time (s)\", y = \"Amplitude (PMF)\") +     theme_classic()"},{"path":"https://marce10.github.io/baRulho/articles/baRulho.html","id":"spectrum-blur-ratio","dir":"Articles","previous_headings":"Quantifying sound degradation > Degradation measurements","what":"Spectrum blur ratio","title":"<center><font size=","text":"Spectrum blur ratio (measured spectrum_blur_ratio()) quantifies degradation sound function change sound energy across frequency domain, analogous blur ratio described time domain (implemented blur_ratio()). Low values also indicate low degradation sounds. Spectrum blur ratio measured mismatch power spectra (expressed probability density functions) reference sound re-recorded sound. works way blur_ratio(), comparing sound corresponding reference sound, output images alike well. Spectrum blur ratio can calculated follows:     blur_ratio(), spectrum_blur_ratio() can also return amplitude spectrum contours argument output = \"list\":  can also zoom frequency range sounds subsetting spectrum data:  ","code":"# run Spectrum blur ratio sbr <- spectrum_blur_ratio(playback_est, method = 1, img = TRUE, dest.path = td)  # check output class is_extended_selection_table(sbr) ## [1] TRUE # see output sbr sbr <- spectrum_blur_ratio(X = playback_est, output = \"list\") ## Preparing data for analysis (step 1 out of 3): ## Calculating power spectra (step 2 out of 3): ## Calculating spectrum blur ratio (step 3 out of 3): spctr <- sbr$spectra  spctr$distance <- as.factor(spctr$distance)  ggplot(spctr, aes(y = amp, x = freq, col = distance)) + geom_line() + facet_wrap(~sound.id) +     scale_color_viridis_d(alpha = 0.7) + labs(x = \"Frequency (kHz)\", y = \"Amplitude (PMF)\") +     coord_flip() + theme_classic() # get the frequencies higher than lowest bottom but lower than highest top freq spctr <- spctr[spctr$freq > min(playback_est$bottom.freq) & spctr$freq < max(playback_est$top.freq),     ]  ggplot(spctr, aes(y = amp, x = freq, col = distance)) + geom_line() + facet_wrap(~sound.id) +     scale_color_viridis_d(alpha = 0.7) + labs(x = \"Frequency (kHz)\", y = \"Amplitude (PMF)\") +     coord_flip() + theme_classic()"},{"path":"https://marce10.github.io/baRulho/articles/baRulho.html","id":"excess-attenuation","dir":"Articles","previous_headings":"Quantifying sound degradation > Degradation measurements","what":"Excess attenuation","title":"<center><font size=","text":"every doubling distance, sounds attenuate 6 dB loss amplitude (Morton, 1975; Marten & Marler, 1977). additional loss amplitude results excess attenuation, energy loss excess expected occur distance via spherical spreading, due atmospheric conditions habitat (Wiley & Richards, 1978). degradation metric can measured using excess_attenuation() function. Low values indicate little sound attenuation. function compare sound corresponding reference sound within frequency range (e.g. bandpass) reference sound (‘bottom.freq’ ‘top.freq’ columns ‘X’). Two methods calculating excess attenuation provided (see ‘method’ argument). excess_attenuation() can measured like : output, similar functions, extended selection table input data, also including two new columns (‘reference’ ‘excess.attenuation’) reference sound excess attenuation:  ","code":"# run envelope correlation ea <- excess_attenuation(playback_est, method = 1, pb = FALSE)  # check output class is_extended_selection_table(ea) ## [1] TRUE # print output ea"},{"path":"https://marce10.github.io/baRulho/articles/baRulho.html","id":"envelope-correlation","dir":"Articles","previous_headings":"Quantifying sound degradation > Degradation measurements","what":"Envelope correlation","title":"<center><font size=","text":"Amplitude envelope correlation measures similarity two sounds time domain. envelope_correlation() function measures envelope correlation coefficients reference playback re-recorded sounds. Values close 1 means similar amplitude envelopes (.e. little degradation occurred). envelopes different lengths (sounds different lengths) cross-correlation applied maximum correlation coefficient returned. Cross-correlation achieved sliding shortest sound along largest one calculating correlation step. functions detailed , ‘sound.id’ column must used instruct function compare sounds belong category. envelope_correlation() can run follows: output also similar functions; extended selection table similar input data, also includes two new columns (‘reference’ ‘envelope.correlation’) reference sound amplitude envelope correlation coefficients:   Note function doesn’t provide graphical output. However, graphs generated blur_ratio() can used inspect envelope shapes alignment sounds.","code":"# run envelope correlation ec <- envelope_correlation(playback_est, method = 1, pb = FALSE)  # check output class is_extended_selection_table(ec) ## [1] TRUE # print output ec"},{"path":"https://marce10.github.io/baRulho/articles/baRulho.html","id":"spectrum-correlation","dir":"Articles","previous_headings":"Quantifying sound degradation > Degradation measurements","what":"Spectrum correlation","title":"<center><font size=","text":"Spectrum correlation measures similarity two sounds frequency domain. similar envelope_correlation(), frequency domain. sounds compared within frequency range reference sound (spectra length). , values near 1 indicate identical frequency spectrum (.e. degradation). output also similar envelope_correlation():   envelope_correlation(), spectrum_correlation() doesn’t provide graphical output. However, graphs generated spectrum_blur_ratio() can also used inspect spectrum shapes sound alignment.","code":"# run spectrum correlation sc <- spectrum_correlation(playback_est, method = 1, pb = FALSE)  # check output class is_extended_selection_table(sc) ## [1] TRUE # print output sc"},{"path":"https://marce10.github.io/baRulho/articles/baRulho.html","id":"signal-to-noise-ratio","dir":"Articles","previous_headings":"Quantifying sound degradation > Degradation measurements","what":"Signal-to-noise ratio","title":"<center><font size=","text":"Signal--noise ratio (SNR) quantifies sound amplitude level relation ambient noise metric overall sound attenuation. Therefore, attenuation refers loss energy described Dabelsteen et al (1993). method implemented function signal_to_noise_ratio(). function requires measurement ambient noise, either noise right sound (noise.ref = \"adjacent\") one ambient noise measurements per recording (noise.ref = \"custom\"). latter, selections sound parameters ambient noise measured must specified. Alternatively, one selections ambient noise can used reference (see ‘noise.ref’ argument). can potentially provide accurate representation ambient noise. margins overlap another acoustic signal nearby, SNR inaccurate, margin length carefully considered. SNR less equal one suggests background noise equal overpowering acoustic signal. SNR can measured follows: output also similar functions:   Note function compare sounds references, reference column added.","code":"# run signal to noise ratio sa <- signal_to_noise_ratio(playback_est, pb = FALSE, noise.ref = \"custom\")  # check output class is_extended_selection_table(sa) ## [1] TRUE # print output sa"},{"path":"https://marce10.github.io/baRulho/articles/baRulho.html","id":"tail-to-signal-ratio","dir":"Articles","previous_headings":"Quantifying sound degradation > Degradation measurements","what":"Tail-to-signal ratio","title":"<center><font size=","text":"Tail--signal ratio (TSR) used quantify reverberations. Specifically TSR measures ratio energy reverberation tail (time segment right sound) energy sound. general margin reverberation tail measured must specified. function measure TSR within supplied frequency range (e.g. bandpass) reference sound (‘bottom.freq’ ‘top.freq’ columns ‘X’). Two methods calculating reverberations provided (see ‘type’ argument). Type 1 based original description TSR Dabelsteen et al. (1993) type 2 better referred “tail--noise ratio”, given compares amplitude tails ambient noise. types higher values represent reverberations. TSR can measured follows: , output similar functions:  ","code":"# run tail to signal ratio tsr <- tail_to_signal_ratio(playback_est, pb = FALSE, type = 1, mar = 0.05)  # check output class is_extended_selection_table(tsr) ## [1] TRUE # print output  tsr"},{"path":"https://marce10.github.io/baRulho/articles/baRulho.html","id":"spectrogram-distortion","dir":"Articles","previous_headings":"Quantifying sound degradation > Degradation measurements","what":"Spectrogram distortion","title":"<center><font size=","text":"Finally, function spcc() measures spectrogram cross-correlation metric sound distortion sounds. Values close 1 means similar spectrograms (.e. little sound distortion). function wrapper warbleR’s cross_correlation(). can run follows: , output similar functions:  ","code":"# run spcc spd <- spcc(X = playback_est, method = 1, wl = 512, pb = FALSE)  # check output class is_extended_selection_table(spd) ## [1] TRUE # print output spd"},{"path":[]},{"path":"https://marce10.github.io/baRulho/articles/baRulho.html","id":"noise-profiles","dir":"Articles","previous_headings":"Quantifying sound degradation > Other measurements","what":"Noise profiles","title":"<center><font size=","text":"function noise_profile() allows estimate frequency spectrum ambient noise. can done extended selection tables (using segments containing sound) complete sound files working directory (path supplied). function uses internally calculate frequency spectra. following code measures ambient noise profile recordings distance >= 5m example extended selection table: output data frame amplitude values frequency bins wave object extended selection table: can graphically represented follows:  output data actually average several frequency spectra sound file. can obtain original spectra setting argument averaged = FALSE:  Note can limit frequency range using bandpass filter (‘bp’ argument). addition, argument ‘hop.size’, control size time windows, affects precision frequency domain. can get better precision increasing ‘hop.size’ (‘wl’):  function can estimate noise profiles complete sound files, supplying list files (argument ‘files’, supplying ‘X’) simply running without supplying ‘X’ ‘files’. case run sound files working directory (‘path’ supplied). Please report bugs . package baRulho cited follows: Araya-Salas, M. (2020), baRulho: quantifying habitat-induced degradation (animal) acoustic signals R. R package version 1.0.0.","code":"# run noise profile np <- noise_profile(X = playback_est[playback_est$distance > 5, ], mar = 0.05) # print output head(np, 20) ggplot(np, aes(y = amp, x = freq, col = sound.files)) + geom_line(linewidth = 1.4) +     scale_color_viridis_d(begin = 0.2, end = 0.8, alpha = 0.5) + labs(x = \"Frequency (kHz)\",     y = \"Amplitude (dBA)\") + coord_flip() + theme_classic() np <- noise_profile(X = playback_est[playback_est$distance > 5, ], mar = 0.1, averaged = FALSE)  # make a column containing sound file and selection np$sf.sl <- paste(np$sound.files, np$selec)  ggplot(np, aes(y = amp, x = freq, col = sound.files, group = sf.sl)) + geom_line(linewidth = 1.4) +     scale_color_viridis_d(begin = 0.2, end = 0.8, alpha = 0.5) + labs(x = \"Frequency (kHz)\",     y = \"Amplitude (dBA)\") + coord_flip() + theme_classic() np <- noise_profile(X = playback_est[playback_est$distance > 5, ], mar = 0.05, bp = c(0,     10), averaged = FALSE, hop.size = 3)  # make a column containing sound file and selection np$sf.sl <- paste(np$sound.files, np$selec)  ggplot(np, aes(y = amp, x = freq, col = sound.files, group = sf.sl)) + geom_line(linewidth = 1.4) +     scale_color_viridis_d(begin = 0.2, end = 0.8, alpha = 0.5) + labs(x = \"Frequency (kHz)\",     y = \"Amplitude (dBA)\") + coord_flip() + theme_classic()"},{"path":"https://marce10.github.io/baRulho/articles/baRulho.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"<center><font size=","text":"Araya-Salas, M. (2017). Rraven: connecting R Raven bioacoustic software. R package version 1.0.0. Araya-Salas, M. (2020), baRulho: quantifying habitat-induced degradation (animal) acoustic signals R. R package version 1.0.0 Araya-Salas M, Smith-Vidaurre G. (2017) warbleR: R package streamline analysis animal acoustic signals. Methods Ecol Evol 8:184–191. Dabelsteen, T., Larsen, O. N., & Pedersen, S. B. (1993). Habitat-induced degradation sound signals: Quantifying effects communication sounds bird location blur ratio, excess attenuation, signal--noise ratio blackbird song. Journal Acoustical Society America, 93(4), 2206. Marten, K., & Marler, P. (1977). Sound transmission significance animal vocalization. Behavioral Ecology Sociobiology, 2(3), 271-290. Morton, E. S. (1975). Ecological sources selection avian sounds. American Naturalist, 109(965), 17-34. Tobias, J. ., Aben, J., Brumfield, R. T., Derryberry, E. P., Halfwerk, W., Slabbekoorn, H., & Seddon, N. (2010). Song divergence sensory drive Amazonian birds. Evolution, 64(10), 2820-2839. Session information","code":"## R version 4.2.1 (2022-06-23) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 ##  ## locale: ##  [1] LC_CTYPE=es_ES.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=es_CR.UTF-8        LC_COLLATE=es_ES.UTF-8     ##  [5] LC_MONETARY=es_CR.UTF-8    LC_MESSAGES=es_ES.UTF-8    ##  [7] LC_PAPER=es_CR.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=es_CR.UTF-8 LC_IDENTIFICATION=C        ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ##  [1] viridis_0.6.2      viridisLite_0.4.1  ggplot2_3.4.0      kableExtra_1.3.4   ##  [5] baRulho_1.0.7      warbleR_1.1.28     NatureSounds_1.0.4 seewave_2.2.0      ##  [9] tuneR_1.4.1        knitr_1.40         ##  ## loaded via a namespace (and not attached): ##  [1] Rcpp_1.0.9        svglite_2.1.0     fftw_1.0-7        rprojroot_2.0.3   ##  [5] digest_0.6.30     utf8_1.2.2        R6_2.5.1          Sim.DiffProc_4.8  ##  [9] signal_0.7-7      evaluate_0.17     highr_0.9         httr_1.4.4        ## [13] pillar_1.8.1      rlang_1.0.6       rstudioapi_0.14   jquerylib_0.1.4   ## [17] rmarkdown_2.17    pkgdown_2.0.6     labeling_0.4.2    textshaping_0.3.6 ## [21] desc_1.4.2        webshot_0.5.4     stringr_1.4.1     RCurl_1.98-1.9    ## [25] munsell_0.5.0     proxy_0.4-27      compiler_4.2.1    Deriv_4.1.3       ## [29] xfun_0.34         pkgconfig_2.0.3   systemfonts_1.0.4 htmltools_0.5.3   ## [33] tidyselect_1.2.0  tibble_3.1.8      gridExtra_2.3     dtw_1.23-1        ## [37] fansi_1.0.3       withr_2.5.0       dplyr_1.0.10      MASS_7.3-58       ## [41] bitops_1.0-7      grid_4.2.1        jsonlite_1.8.3    gtable_0.3.1      ## [45] lifecycle_1.0.3   magrittr_2.0.3    formatR_1.12      scales_1.2.1      ## [49] cli_3.4.1         stringi_1.7.8     cachem_1.0.6      pbapply_1.5-0     ## [53] farver_2.1.1      fs_1.5.2          xml2_1.3.3        bslib_0.4.0       ## [57] ragg_1.2.4        vctrs_0.5.0       generics_0.1.3    rjson_0.2.21      ## [61] tools_4.2.1       glue_1.6.2        purrr_0.3.5       parallel_4.2.1    ## [65] fastmap_1.1.0     yaml_2.3.6        colorspace_2.0-3  rvest_1.0.3       ## [69] memoise_2.0.1     sass_0.4.2"},{"path":"https://marce10.github.io/baRulho/articles/baRulho_quantifying_sound_degradation.html","id":"inputting-acoustic-data-and-annotations","dir":"Articles","previous_headings":"","what":"Inputting acoustic data and annotations","title":"<center><font size=","text":"package requires data input extended selection tables. extended selection table object class R contains annotations (locations signals time frequency) corresponding acoustic data wave objects. Therefore, self-contained objects since original sound files longer needed perform acoustic analyses. objects created selection_table() function warbleR. Take look intro warbleR vignette details. Glossary -Model signal: signal transmission properties studied, usually found original field recordings synthetic sound files. -Reference signal: signal use pattern compare . Usually created re-recording model signal broadcast 1 m source (speaker). -Signal type: signal category. instance song types (e.g. , B, C), call types (alert, foraging, etc). -Ambient noise: energy background sounds recording, excluding signals interest. -Test signal: signals re-recorded far source test transmission/degradation (also refer ‘re-recorded’ signals). -Degradation: term used describe changes structure signal transmitted given habitat (note agreement terminology scientific community).  ","code":""},{"path":"https://marce10.github.io/baRulho/articles/baRulho_quantifying_sound_degradation.html","id":"workflow-of-sound-processing-and-analysis","dir":"Articles","previous_headings":"","what":"Workflow of sound processing and analysis","title":"<center><font size=","text":"common sequence steps experimentally test hypotheses related signal transmission depicted following diagram:   baRulho offers functions critical steps workflow (black, including ‘checks’) required acoustic data manipulation analysis. Additional functions warbleR can used (used vignette) complement functions baRulho. tools presented following workflow.  ","code":""},{"path":"https://marce10.github.io/baRulho/articles/baRulho_quantifying_sound_degradation.html","id":"synthesize-sounds","dir":"Articles","previous_headings":"","what":"Synthesize sounds","title":"<center><font size=","text":"often want figure transmission properties vary across range frequencies. instance, Tobias et al (2010) studied whether acoustic adaptation (special case sensory drive; Morton 1975), explain song evolution Amazonian avian communities. test authors created synthetic pure tone sounds used playback re-recorded different habitats. actual procedure creating synthetic sounds described : “Tones synthesized six different frequencies (0.5, 1.0, 2.0, 3.0, 4.0, 5.0 kHz) encompass range maximum avian auditory sensitivity (Dooling 1982). frequency, generated two sequences two 100-msec tones. One sequence relatively short interval 150 msec, close mean internote interval sample (152± 4 msec). sequence longer interval 250 msec, close mean maximum internote interval sample (283± 74 msec). first sequence reflects fast-paced song second slower paced song (sensu Slabbekoorn et al. 2007). master file (44100 Hz/16 bit WAV) thereby consisted series 12 pairs artificial 100-ms constant-frequency tones six different frequencies (0.5, 1.0, 2.0, 3.0, 4.0, 5.0 kHz).” can synthesize pure tones using function sim_songs() package warbleR. function requires 1) number tones synthesize (argument n), 2) duration tones (durs, seconds), 3) duration intervals (gaps, seconds) 4) frequencies tone synthesized (freqs, kHz). addition, argument diff.fun set “pure.tone” argument harm 1 remove harmonics. case need six tones 100 ms 0.5, 1, 2, 3, 4, 5 kHz separated intervals 150 ms (least first synthetic file described Tobias et al 2010). can also get selection table (sensu warbleR) information time frequency location every sound. required order make master sound file. get selection table need set argument selec.table = TRUE. can done follows:    function returns list first element selection table second one wave object:   function also saves associated ‘.wav’ file working directory (example tempdir()).  ","code":"# synthesize synth.l <- sim_songs(n = 6, durs = 0.1, freqs = c(0.5, 1:5), harms = 1, gaps = 0.15,     diff.fun = \"pure.tone\", selec.table = TRUE, path = td)  # plot spectro seewave::spectro(synth.l$wave, scale = FALSE, palette = viridis, grid = FALSE, flim = c(0,     6), collevels = seq(-20, 0, 1)) class(synth.l) ## [1] \"list\" names(synth.l) ## [1] \"selec.table\" \"wave\" synth.l$selec.table list.files(path = td, pattern = \"\\\\.wav$\") ## character(0) ## [1] \"2020-01-09_17:00:50.wav\""},{"path":"https://marce10.github.io/baRulho/articles/baRulho_quantifying_sound_degradation.html","id":"create-master-sound-file-for-playback","dir":"Articles","previous_headings":"","what":"Create master sound file for playback","title":"<center><font size=","text":"function master_sound_file() creates master sound file (probably guessed) playback experiments. function takes wave objects extended selection table containing model signals concatenates single sound file (silence signals length can modified). master_sound_file() adds acoustic markers start end playback can used time-sync re-recorded signals, streamlines quantification acoustic degradation. following example shows create master sound file using synthetic sounds generated . synthetic sounds need add little space top bottom frequency sim_songs() make values exactly pure tones:   function saves master sound file wave file returns selection table R environment time frequency ‘coordinates’ signals file. can look spectrogram output file using warbleR function spectrograms() follows:  function can also create master sound file sounds different sounds files, likely case recordings collected field. following example shows create master sound file using several sound files. code uses example data recordings package warbleR:   , can look spectrogram output file:  Note output also exported Raven sound analysis software (Cornell Lab Ornithology) visualization manipulation using function exp_raven() Rraven package. exp_raven() exports selections R environment ‘.txt’ file can read Raven:   sound files annotations can visualized Raven ( acoustic analysis software):    Take look Rraven vignette details export data R Raven. Note start end markers placed relatively low amplitudes less affected degradation. frequency range markers can set argument flim. relative amplitude markers can also adjusted amp.marker argument. Amplitude markers multiplied value supplied markers louder signals. two features increases chances “detected” distances regardless amplitude signals.","code":"# extract selection table st <- synth.l$selec.table  # add freq range (0.5 kHz) st$bottom.freq <- st$bottom.freq - 0.25 st$top.freq <- st$top.freq + 0.25  # make an extended selection table synth.est <- selection_table(X = st, extended = TRUE, confirm.extended = FALSE, path = td)  # create master sound file synth.master.sf <- master_sound_file(X = synth.est, file.name = \"synthetic_master\",     dest.path = td, gap.duration = 0.15) # plot spectro (saved in working directory) spectrograms(synth.master.sf, path = td, by.song = \"sound.files\", xl = 3, collevels = seq(-60,     0, 5), osci = TRUE) # load example data from warbleR data(list = c(\"Phae.long1\", \"Phae.long2\", \"Phae.long3\", \"Phae.long4\", \"lbh_selec_table\"))  # save sound files to temporary folder writeWave(Phae.long1, file.path(td, \"Phae.long1.wav\")) writeWave(Phae.long2, file.path(td, \"Phae.long2.wav\")) writeWave(Phae.long3, file.path(td, \"Phae.long3.wav\")) writeWave(Phae.long4, file.path(td, \"Phae.long4.wav\"))  # make an extended selection table est <- selection_table(X = lbh_selec_table, extended = TRUE, confirm.extended = FALSE,     path = td)  # create master sound file master.sf <- master_sound_file(X = est, file.name = \"example_master\", dest.path = td,     gap.duration = 0.3) spectrograms(master.sf, path = td, by.song = \"sound.files\", xl = 3, collevels = seq(-60,     0, 5), osci = TRUE) Rraven::exp_raven(master.sf, path = td, file.name = \"example_master_selection_table\")"},{"path":"https://marce10.github.io/baRulho/articles/baRulho_quantifying_sound_degradation.html","id":"time-sync-re-recorded-sounds","dir":"Articles","previous_headings":"","what":"Time sync re-recorded sounds","title":"<center><font size=","text":"went field (lab) re-recorded master sound files different distances, ready start data analysis. first step getting data ready analysis involves finding signals within re-recorded sound files. need align start marker master playback re-recorded sound files, based fact time difference marker signals cases:   simulate re-recorded sound files make two copies master sound file, add silence beginning (1 2 seconds) add noise:   find location start marker (simulated) re-recorded sound files use functions search_templates() run cross-correlation one markers across test (re-recorded) files determine exact time marker found:   also use end marker template case start marker masked sounds. output search_templates() indicates start markers found starting ~2 s ~3 s (2.00062 s 3.00084 s), expected master_sound_file() inserts 1 second silence beginning master sound files added 1 s 2 s simulated file respectively. information can infer position selections new recordings. selection table re-recorded files can generated using function align_test_files():   default function returns extended_selection_table created ‘.song’ (see ‘?selection_table()’), data format pretty much baRulho functions take.   can check precision alignment looking spectrograms:       examples actual test signals re-recorded field 1, 30, 65, 100 m respectively, later aligned using start marker:   ","code":"# read master exmp.master <- readWave(file.path(td, \"example_master.wav\"))  # add 1 s silence and create first copy exmp.test1 <- addsilw(wave = exmp.master, at = \"start\", d = 1, output = \"Wave\", f = exmp.master@samp.rate)  # add 2 s silence and create second copy exmp.test2 <- addsilw(wave = exmp.master, at = \"start\", d = 2, output = \"Wave\", f = exmp.master@samp.rate)  # make noise ns <- noisew(f = exmp.master@samp.rate, d = duration(exmp.test2) + 1, output = \"Wave\")  # make noise exactly the same length and add noise to 2 examples exmp.test1@left <- exmp.test1@left + (ns@left[1:length(exmp.test1@left)] * 150) exmp.test2@left <- exmp.test2@left + (ns@left[1:length(exmp.test2@left)] * 150)  # normalize both before saving exmp.test1 <- normalize(exmp.test1, unit = \"16\") exmp.test2 <- normalize(exmp.test2, unit = \"16\")  # save simulated re-recorded sound files writeWave(object = exmp.test1, filename = file.path(td, \"example_test1.wav\"), extensible = FALSE)  writeWave(object = exmp.test2, filename = file.path(td, \"example_test2.wav\"), extensible = FALSE) found.starts <- search_templates(X = master.sf, template.rows = which(master.sf$orig.sound.file ==     \"start_marker\"), test.files = c(\"example_test1.wav\", \"example_test2.wav\"), path = td) pks alg.tests <- align_test_files(X = master.sf, Y = found.starts, path = td, by.song = TRUE) is_extended_selection_table(alg.est)  alg.est ## [1] TRUE spectrograms(alg.tests, by.song = \"sound.files\", xl = 3, collevels = seq(-60, 0,     5), dest.path = td, osci = TRUE)"},{"path":"https://marce10.github.io/baRulho/articles/baRulho_quantifying_sound_degradation.html","id":"further-aligning","dir":"Articles","previous_headings":"Time sync re-recorded sounds","what":"Further aligning","title":"<center><font size=","text":"process done manually (broadcasting devices add short delays case bluetooth transmitters) small misalignment inferred versus actual start time re-recorded signals. problematic quantifying degradation baRulho (sound analysis software) precise alignment signal crucial accuracy downstream measures signal degradation. Misalignment can fixed function spcc_align(). function uses spectrogram cross-correlation sync position time signals regard reference signal. spcc_align() takes signal recorded closest distance source reference signal. function calls warbleR’s cross_correlation() (just ) internally align signals using cross-correlation. baRulho comes example data set called playback_est_unaligned, contains signals time position signals slightly unaligned. can use data show function spcc_align() works: output extended selection table contains new start end values alignment. signals look aligned:   case doesn’t work expected plan B. function seltailor() warbleR allows user manually adjust start end signals extended selection table.  ","code":"data(\"playback_est_unaligned\")  # method 1 playback_est_aligned <- spcc_align(X = playback_est_unaligned) # rename sound files so aligned and unaligned signals are intercalated unalg <- rename_waves_est(playback_est_unaligned, playback_est_unaligned$sound.files,     new.selec = seq(1, 200, by = 2)[1:nrow(playback_est_unaligned)]) alg <- rename_waves_est(playback_est_aligned, playback_est_aligned$sound.files, new.selec = seq(2,     200, by = 2)[1:nrow(playback_est_aligned)])  # add label unalg$type <- \"Before aligning\" alg$type <- \"After aligning\"  # put together in a single ext sel tab unalg.alg <- rbind(unalg, alg)  # create spectrograms spectrograms(unalg.alg[unalg.alg$signal.type != \"ambient\", ], dest.path = tempdir(),     res = 100, wl = 300, title.labels = \"type\", sel.labels = NULL)"},{"path":"https://marce10.github.io/baRulho/articles/baRulho_quantifying_sound_degradation.html","id":"quantifying-signal-degradation","dir":"Articles","previous_headings":"","what":"Quantifying signal degradation","title":"<center><font size=","text":"baRulho functions design quantify acoustic signal degradation. important things keep mind functions quantifying degradation: package currently assumes recordings made equipment recording volume. modified future versions allow amplitude calibration recordings. Wave envelope frequency spectrum calculations made applying bandpass filter within frequency range reference signal (‘bottom.freq’ ‘top.freq’ columns) Compare signals counterpart recorded closest distance source (e.g. compare signal recorded 5m, 10m 15m counterpart recorded 1m). default method. Compare signals counterpart recorded distance immediately (e.g. signal recorded 10m compared one recorded 5m, signal recorded 15m compared one recorded 10m ).","code":""},{"path":"https://marce10.github.io/baRulho/articles/baRulho_quantifying_sound_degradation.html","id":"required-data-structure","dir":"Articles","previous_headings":"Quantifying signal degradation","what":"Required data structure","title":"<center><font size=","text":"mentioned data must extended_selection_table format. data also contain additional information. baRulho comes example extended_selection_table data set can used understand required data structure: s   Note besides basic acoustic annotation information (e.g. sound file, time, frequency) table also contains ‘signal.type’ column, refers signal type signal belongs , ‘distance’ column refers distance source signal recorded. Signal type distance required comparison signals. Also note selections labeled “ambient” ‘signal.type’. selections refer ambient (background) noise. Ambient noise can used functions correct amplitude differences due non-target sounds. example data 4 recordings increasing distances: 1m, 5m, 10m 15m: data contains selections 5 signal types well 2 ambient noise selections distance/recording:","code":"data(\"playback_est\")  playback_est # count selection per recordings unique(playback_est$sound.files) ## [1] \"01m_re-rec.wav\" \"05m_re-rec.wav\" \"10m_re-rec.wav\" \"15m_re-rec.wav\" table(playback_est$signal.type, playback_est$distance)"},{"path":[]},{"path":"https://marce10.github.io/baRulho/articles/baRulho_quantifying_sound_degradation.html","id":"blur-ratio","dir":"Articles","previous_headings":"Quantifying signal degradation > Degradation measurements","what":"Blur ratio","title":"<center><font size=","text":"Blur ratio quantifies degradation sound function change signal energy time domain described Dabelsteen et al (1993). Blur ratio measured mismatch amplitude envelopes (expressed probability density functions) reference signal re-recorded signal. Low values indicate low degradation signals. function blur_ratio() measures blur ratio signals reference playback re-recorded different distances. function compares signal type corresponding reference signal within supplied frequency range (e.g. bandpass) reference signal (‘bottom.freq’ ‘top.freq’ columns ‘X’). ‘signal.type’ column must used tell function compare signals belonging category (e.g. song-types). wave objects extended selection table must sampling rate length envelopes comparable. Blur ratio can calculated follows:   output data frame similar input data, except includes two new columns (‘reference’ ‘blur.ratio’) reference signal blur ratio values. Note NAs returned signals used reference ‘ambient’ noise selections. img = TRUE also returns 1 image file (‘jpeg’ format) comparison showing spectrograms signals overlaid amplitude envelopes (probability mass functions (PMF)). Output image files (working directory) look like ones:   image shows spectrogram reference re-recorded signal, well envelopes signals overlaid single graph. Colors indicate signal spectrograms envelopes belong . blur ratio value also displayed. function can also return amplitude spectrum contours argument output = \"list\". contours can directly input ggplot visualize amplitude envelopes, vary distance across signal types (ambient noise included):  Note smooth argument change envelope shapes related measurements. following code sets smooth = 800:   ","code":"# run blur ratio br <- blur_ratio(playback_est, method = 1)  # check output class is_extended_selection_table(br) ## Preparing data for analysis (step 1 out of 3): ## calculating amplitude envelopes (step 2 out of 3): ## calculating blur ratio (step 3 out of 3): ## [1] TRUE # see output br # run blur ratio br <- blur_ratio(playback_est, method = 1, img = TRUE, ssmooth = 300, dest.path = td) envs <- blur_ratio(X = playback_est, output = \"list\", ssmooth = 300, img = FALSE)$envelopes ## Preparing data for analysis (step 1 out of 3): ## calculating amplitude envelopes (step 2 out of 3): ## calculating blur ratio (step 3 out of 3): envs$distance <- as.factor(envs$distance)  ggplot(envs, aes(x = time, y = amp, col = distance)) + geom_line() + facet_wrap(~signal.type) +     scale_color_viridis_d(alpha = 0.7) + labs(x = \"Time (s)\", y = \"Amplitude (PMF)\") +     theme_classic() envs <- blur_ratio(X = playback_est, output = \"list\", ssmooth = 1000, img = FALSE)$envelopes ## Preparing data for analysis (step 1 out of 3): ## calculating amplitude envelopes (step 2 out of 3): ## calculating blur ratio (step 3 out of 3): envs$distance <- as.factor(envs$distance)  ggplot(envs, aes(x = time, y = amp, col = distance)) + geom_line() + facet_wrap(~signal.type) +     scale_color_viridis_d(alpha = 0.7) + labs(x = \"Time (s)\", y = \"Amplitude (PMF)\") +     theme_classic()"},{"path":"https://marce10.github.io/baRulho/articles/baRulho_quantifying_sound_degradation.html","id":"spectrum-blur-ratio","dir":"Articles","previous_headings":"Quantifying signal degradation > Degradation measurements","what":"Spectrum blur ratio","title":"<center><font size=","text":"Spectrum blur ratio (measured spectrum_blur_ratio()) quantifies degradation sound function change signal energy across frequency domain, analogous blur ratio described time domain (implemented blur_ratio()). Low values also indicate low degradation signals. Spectrum blur ratio measured mismatch power spectra (expressed probability density functions) reference signal re-recorded signal. works way blur_ratio(), comparing signal type corresponding reference signal, output images alike well. Spectrum blur ratio can calculated follows:     blur_ratio(), spectrum_blur_ratio() can also return amplitude spectrum contours argument output = \"list\":  can also zoom frequency range signals subsetting spectrum data:  ","code":"# run Spectrum blur ratio sbr <- spectrum_blur_ratio(playback_est, method = 1, img = TRUE, dest.path = td)  # check output class is_extended_selection_table(sbr) ## Preparing data for analysis (step 1 out of 3): ## calculating power spectra (step 2 out of 3): ## calculating spectrum blur ratio (step 3 out of 3): ## [1] TRUE # see output sbr sbr <- spectrum_blur_ratio(X = playback_est, output = \"list\") ## Preparing data for analysis (step 1 out of 3): ## calculating power spectra (step 2 out of 3): ## calculating spectrum blur ratio (step 3 out of 3): spctr <- sbr$spectra  spctr$distance <- as.factor(spctr$distance)  ggplot(spctr, aes(y = amp, x = freq, col = distance)) + geom_line() + facet_wrap(~signal.type) +     scale_color_viridis_d(alpha = 0.7) + labs(x = \"Frequency (kHz)\", y = \"Amplitude (PMF)\") +     coord_flip() + theme_classic() # get the frequencies higher than lowest bottom but lower than highest top freq spctr <- spctr[spctr$freq > min(playback_est$bottom.freq) & spctr$freq < max(playback_est$top.freq),     ]  ggplot(spctr, aes(y = amp, x = freq, col = distance)) + geom_line() + facet_wrap(~signal.type) +     scale_color_viridis_d(alpha = 0.7) + labs(x = \"Frequency (kHz)\", y = \"Amplitude (PMF)\") +     coord_flip() + theme_classic()"},{"path":"https://marce10.github.io/baRulho/articles/baRulho_quantifying_sound_degradation.html","id":"excess-attenuation","dir":"Articles","previous_headings":"Quantifying signal degradation > Degradation measurements","what":"Excess attenuation","title":"<center><font size=","text":"every doubling distance, sounds attenuate 6 dB loss amplitude (Morton, 1975; Marten & Marler, 1977). additional loss amplitude results excess attenuation, energy loss excess expected occur distance via spherical spreading, due atmospheric conditions habitat (Wiley & Richards, 1978). degradation metric can measured using excess_attenuation() function. Low values indicate little signal attenuation. function compare signal type corresponding reference signal within frequency range (e.g. bandpass) reference signal (‘bottom.freq’ ‘top.freq’ columns ‘X’). Two methods calculating excess attenuation provided (see ‘method’ argument). excess_attenuation() can measured like : output, similar functions, extended selection table input data, also including two new columns (‘reference’ ‘excess.attenuation’) reference signal excess attenuation:  ","code":"# run envelope correlation ea <- excess_attenuation(playback_est, method = 1) ## Preparing data for analysis (step 1 out of 2): ## Calculating excess attenuation (step 2 out of 2): # check output class is_extended_selection_table(ea) ## [1] TRUE # print output ea"},{"path":"https://marce10.github.io/baRulho/articles/baRulho_quantifying_sound_degradation.html","id":"envelope-correlation","dir":"Articles","previous_headings":"Quantifying signal degradation > Degradation measurements","what":"Envelope correlation","title":"<center><font size=","text":"Amplitude envelope correlation measures similarity two signals time domain. envelope_correlation() function measures envelope correlation coefficients reference playback re-recorded signals. Values close 1 means similar amplitude envelopes (.e. little degradation occurred). envelopes different lengths (signals different lengths) cross-correlation applied maximum correlation coefficient returned. Cross-correlation achieved sliding shortest signal along largest one calculating correlation step. functions detailed , ‘signal.type’ column must used instruct function compare signals belong category. envelope_correlation() can run follows: output also similar functions; extended selection table similar input data, also includes two new columns (‘reference’ ‘envelope.correlation’) reference signal amplitude envelope correlation coefficients:   Note function doesn’t provide graphical output. However, graphs generated blur_ratio() can used inspect envelope shapes alignment signals.","code":"# run envelope correlation ec <- envelope_correlation(playback_est, method = 1) ## Preparing data for analysis (step 1 out of 3): ## calculating amplitude envelopes (step 2 out of 3): ## calculating envelope correlations (step 3 out of 3): # check output class is_extended_selection_table(ec) ## [1] TRUE # print output ec"},{"path":"https://marce10.github.io/baRulho/articles/baRulho_quantifying_sound_degradation.html","id":"spectrum-correlation","dir":"Articles","previous_headings":"Quantifying signal degradation > Degradation measurements","what":"Spectrum correlation","title":"<center><font size=","text":"Spectrum correlation measures similarity two signals frequency domain. similar envelope_correlation(), frequency domain. signals compared within frequency range reference signal (spectra length). , values near 1 indicate identical frequency spectrum (.e. degradation). output also similar envelope_correlation():   envelope_correlation(), spectrum_correlation() doesn’t provide graphical output. However, graphs generated spectrum_blur_ratio() can also used inspect spectrum shapes signal alignment.","code":"# run spectrum correlation sc <- spectrum_correlation(playback_est, method = 1) ## calculating frequency spectrums (step 1 out of 2): ## calculating envelope cross-correlations (step 2 out of 2): # check output class is_extended_selection_table(sc) ## [1] TRUE # print output sc"},{"path":"https://marce10.github.io/baRulho/articles/baRulho_quantifying_sound_degradation.html","id":"signal-to-noise-ratio","dir":"Articles","previous_headings":"Quantifying signal degradation > Degradation measurements","what":"Signal-to-noise ratio","title":"<center><font size=","text":"Signal--noise ratio (SNR) quantifies signal amplitude level relation ambient noise metric overall signal attenuation. Therefore, attenuation refers loss energy described Dabelsteen et al (1993). method implemented function signal_to_noise_ratio(). function requires measurement ambient noise, either noise right signal (noise.ref = \"adjacent\") one ambient noise measurements per recording (noise.ref = \"custom\"). latter, selections signal parameters ambient noise measured must specified. Alternatively, one selections ambient noise can used reference (see ‘noise.ref’ argument). can potentially provide accurate representation ambient noise. margins overlap another acoustic signal nearby, SNR inaccurate, margin length carefully considered. SNR less equal one suggests background noise equal overpowering acoustic signal. SNR can measured follows: output also similar functions:   Note function compare signals references, reference column added.","code":"# run signal to noise ratio sa <- signal_to_noise_ratio(playback_est, pb = FALSE, noise.ref = \"custom\")  # check output class is_extended_selection_table(sa) ## [1] TRUE # print output sa"},{"path":"https://marce10.github.io/baRulho/articles/baRulho_quantifying_sound_degradation.html","id":"tail-to-signal-ratio","dir":"Articles","previous_headings":"Quantifying signal degradation > Degradation measurements","what":"Tail-to-signal ratio","title":"<center><font size=","text":"Tail--signal ratio (TSR) used quantify reverberations. Specifically TSR measures ratio energy reverberation tail (time segment right signal) energy signal. general margin reverberation tail measured must specified. function measure TSR within supplied frequency range (e.g. bandpass) reference signal (‘bottom.freq’ ‘top.freq’ columns ‘X’). Two methods calculating reverberations provided (see ‘type’ argument). Type 1 based original description TSR Dabelsteen et al. (1993) type 2 better referred “tail--noise ratio”, given compares amplitude tails ambient noise. types higher values represent reverberations. TSR can measured follows: , output similar functions:  ","code":"# run tail to signal ratio tsr <- tail_to_signal_ratio(playback_est, pb = FALSE, type = 1, mar = 0.05)  # check output class is_extended_selection_table(tsr) ## [1] TRUE # print output  tsr"},{"path":"https://marce10.github.io/baRulho/articles/baRulho_quantifying_sound_degradation.html","id":"spectrogram-distortion","dir":"Articles","previous_headings":"Quantifying signal degradation > Degradation measurements","what":"Spectrogram distortion","title":"<center><font size=","text":"Finally, function spcc_distortion() measures spectrogram cross-correlation metric signal distortion signals. Values close 1 means similar spectrograms (.e. little signal distortion). function wrapper warbleR’s cross_correlation(). can run follows: , output similar functions:  ","code":"# run spcc spd <- spcc_distortion(X = playback_est, method = 1, wl = 512) ## running cross-correlation (step 1 of 1): # check output class is_extended_selection_table(spd) ## [1] TRUE # print output spd"},{"path":[]},{"path":"https://marce10.github.io/baRulho/articles/baRulho_quantifying_sound_degradation.html","id":"noise-profiles","dir":"Articles","previous_headings":"Quantifying signal degradation > Other measurements","what":"Noise profiles","title":"<center><font size=","text":"function noise_profile() allows estimate frequency spectrum ambient noise. can done extended selection tables (using segments containing signal) complete sound files working directory (path supplied). function uses internally calculate frequency spectra. following code measures ambient noise profile recordings distance >= 5m example extended selection table: output data frame amplitude values frequency bins wave object extended selection table: can graphically represented follows:  output data actually average several frequency spectra sound file. can obtain original spectra setting argument averaged = FALSE:  Note can limit frequency range using bandpass filter (‘bp’ argument). addition, argument ‘hop.size’, control size time windows, affects precision frequency domain. can get better precision increasing ‘hop.size’ (‘wl’):  function can estimate noise profiles complete sound files, supplying list files (argument ‘files’, supplying ‘X’) simply running without supplying ‘X’ ‘files’. case run sound files working directory (‘path’ supplied). Please report bugs . package baRulho cited follows: Araya-Salas, M. (2020), baRulho: quantifying habitat-induced degradation (animal) acoustic signals R. R package version 1.0.0.","code":"# run noise profile np <- noise_profile(X = playback_est[playback_est$distance > 5, ], mar = 0.05)  str(np) ## 'data.frame':    42 obs. of  3 variables: ##  $ sound.files: chr  \"10m_re-rec.wav\" \"15m_re-rec.wav\" \"10m_re-rec.wav\" \"15m_re-rec.wav\" ... ##  $ freq       : num  1 1 2 2 3.01 ... ##  $ amp        : num  -5.72 -5.72 -39.97 -32.01 -45.07 ... # print output head(np, 20) ggplot(np, aes(y = amp, x = freq, col = sound.files)) + geom_line(size = 1.4) + scale_color_viridis_d(begin = 0.2,     end = 0.8, alpha = 0.5) + labs(x = \"Frequency (kHz)\", y = \"Amplitude (dBA)\") +     coord_flip() + theme_classic() np <- noise_profile(X = playback_est[playback_est$distance > 5, ], mar = 0.1, averaged = FALSE)  # make a column containing sound file and selection np$sf.sl <- paste(np$sound.files, np$selec)  ggplot(np, aes(y = amp, x = freq, col = sound.files, group = sf.sl)) + geom_line(size = 1.4) +     scale_color_viridis_d(begin = 0.2, end = 0.8, alpha = 0.5) + labs(x = \"Frequency (kHz)\",     y = \"Amplitude (dBA)\") + coord_flip() + theme_classic() np <- noise_profile(X = playback_est[playback_est$distance > 5, ], mar = 0.05, bp = c(0,     10), averaged = FALSE, hop.size = 3)  # make a column containing sound file and selection np$sf.sl <- paste(np$sound.files, np$selec)  ggplot(np, aes(y = amp, x = freq, col = sound.files, group = sf.sl)) + geom_line(size = 1.4) +     scale_color_viridis_d(begin = 0.2, end = 0.8, alpha = 0.5) + labs(x = \"Frequency (kHz)\",     y = \"Amplitude (dBA)\") + coord_flip() + theme_classic()"},{"path":"https://marce10.github.io/baRulho/articles/baRulho_quantifying_sound_degradation.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"<center><font size=","text":"Araya-Salas, M. (2017). Rraven: connecting R Raven bioacoustic software. R package version 1.0.0. Araya-Salas, M. (2020), baRulho: quantifying habitat-induced degradation (animal) acoustic signals R. R package version 1.0.0 Araya-Salas M, Smith-Vidaurre G (2017) warbleR: R package streamline analysis animal acoustic signals. Methods Ecol Evol 8:184–191. Dabelsteen, T., Larsen, O. N., & Pedersen, S. B. (1993). Habitat-induced degradation sound signals: Quantifying effects communication sounds bird location blur ratio, excess attenuation, signal--noise ratio blackbird song. Journal Acoustical Society America, 93(4), 2206. Marten, K., & Marler, P. (1977). Sound transmission significance animal vocalization. Behavioral Ecology Sociobiology, 2(3), 271-290. Morton, E. S. (1975). Ecological sources selection avian sounds. American Naturalist, 109(965), 17-34. Tobias, J. ., Aben, J., Brumfield, R. T., Derryberry, E. P., Halfwerk, W., Slabbekoorn, H., & Seddon, N. (2010). Song divergence sensory drive Amazonian birds. Evolution, 64(10), 2820-2839. Session information","code":"## R version 4.1.1 (2021-08-10) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.2 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 ##  ## locale: ##  [1] LC_CTYPE=es_ES.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=es_CR.UTF-8        LC_COLLATE=es_ES.UTF-8     ##  [5] LC_MONETARY=es_CR.UTF-8    LC_MESSAGES=es_ES.UTF-8    ##  [7] LC_PAPER=es_CR.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=es_CR.UTF-8 LC_IDENTIFICATION=C        ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ##  [1] viridis_0.6.2      viridisLite_0.4.0  ggplot2_3.3.6      kableExtra_1.3.4   ##  [5] baRulho_1.0.7      warbleR_1.1.27     NatureSounds_1.0.4 seewave_2.2.0      ##  [9] tuneR_1.4.0        knitr_1.39         ##  ## loaded via a namespace (and not attached): ##  [1] Rcpp_1.0.8.3      svglite_2.1.0     fftw_1.0-7        assertthat_0.2.1  ##  [5] rprojroot_2.0.3   digest_0.6.29     utf8_1.2.2        R6_2.5.1          ##  [9] signal_0.7-7      evaluate_0.15     highr_0.9         httr_1.4.3        ## [13] pillar_1.7.0      rlang_1.0.3       rstudioapi_0.13   jquerylib_0.1.4   ## [17] rmarkdown_2.14    pkgdown_2.0.5     labeling_0.4.2    textshaping_0.3.6 ## [21] desc_1.4.1        webshot_0.5.3     stringr_1.4.0     RCurl_1.98-1.7    ## [25] munsell_0.5.0     proxy_0.4-27      compiler_4.1.1    xfun_0.31         ## [29] pkgconfig_2.0.3   systemfonts_1.0.4 htmltools_0.5.2   tidyselect_1.1.2  ## [33] tibble_3.1.7      gridExtra_2.3     dtw_1.22-3        fansi_1.0.3       ## [37] withr_2.5.0       crayon_1.5.1      dplyr_1.0.9       MASS_7.3-54       ## [41] bitops_1.0-7      grid_4.1.1        jsonlite_1.8.0    gtable_0.3.0      ## [45] lifecycle_1.0.1   DBI_1.1.3         magrittr_2.0.3    formatR_1.12      ## [49] scales_1.2.0      cli_3.3.0         stringi_1.7.6     cachem_1.0.6      ## [53] pbapply_1.5-0     farver_2.1.0      fs_1.5.2          xml2_1.3.3        ## [57] bslib_0.3.1       ellipsis_0.3.2    ragg_1.2.2        vctrs_0.4.1       ## [61] generics_0.1.2    rjson_0.2.21      tools_4.1.1       glue_1.6.2        ## [65] purrr_0.3.4       parallel_4.1.1    fastmap_1.1.0     yaml_2.3.5        ## [69] colorspace_2.0-3  rvest_1.0.2       memoise_2.0.1     sass_0.4.1"},{"path":"https://marce10.github.io/baRulho/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marcelo Araya-Salas. Author, maintainer.","code":""},{"path":"https://marce10.github.io/baRulho/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Araya-Salas, M. (2020), baRulho: quantifying habitat-induced degradation (animal) acoustic signals R. R package version 1.0.0","code":"@Misc{,   title = {baRulho: quantifying habitat-induced degradation of (animal) acoustic signals in R},   author = {M. Araya-Salas},   year = {2020}, }"},{"path":"https://marce10.github.io/baRulho/index.html","id":"barulho-quantifying-habitat-induced-degradation-of-animal-acoustic-signals","dir":"","previous_headings":"","what":"Quantifying Habitat-Induced Acoustic Signal Degradation  ","title":"Quantifying Habitat-Induced Acoustic Signal Degradation  ","text":"baRulho intended facilitate acoustic analysis (animal) sound transmission experiments, typically aim quantify changes signal structure transmitted given habitat broadcasting re-recording animal sounds increasing distances. package offers workflow functions prepare data set analysis well calculate visualize several degradation metrics, including blur ratio, signal--noise ratio, excess attenuation envelope correlation among others (Dabelsteen et al 1993). Install/load package CRAN follows: install latest developmental version github need R package remotes: Please cite baRulho follows: Araya-Salas, M. (2020), baRulho: quantifying habitat-induced degradation (animal) acoustic signals R. R package version 1.0.0.","code":"# From CRAN would be #install.packages(\"baRulho\")  #load package library(baRulho) # From github remotes::install_github(\"maRce10/baRulho\")  #load package library(baRulho)"},{"path":"https://marce10.github.io/baRulho/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Quantifying Habitat-Induced Acoustic Signal Degradation  ","text":"Dabelsteen, T., Larsen, O. N., & Pedersen, S. B. (1993). Habitat-induced degradation sound signals: Quantifying effects communication sounds bird location blur ratio, excess attenuation, signal--noise ratio blackbird song. Journal Acoustical Society America, 93(4), 2206. Marten, K., & Marler, P. (1977). Sound transmission significance animal vocalization. Behavioral Ecology Sociobiology, 2(3), 271-290. Morton, E. S. (1975). Ecological sources selection avian sounds. American Naturalist, 109(965), 17-34.","code":""},{"path":"https://marce10.github.io/baRulho/reference/align_test_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Align test sound files — align_test_files","title":"Align test sound files — align_test_files","text":"align_test_files aligns test (re-recorded) sound files.","code":""},{"path":"https://marce10.github.io/baRulho/reference/align_test_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align test sound files — align_test_files","text":"","code":"align_test_files(X, Y, output = \"est\", path = NULL,  by.song = TRUE, marker = \"start\", cores = 1, pb = TRUE, ...)"},{"path":"https://marce10.github.io/baRulho/reference/align_test_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align test sound files — align_test_files","text":"X object class 'data.frame', 'selection_table' 'extended_selection_table' (last 2 classes created function selection_table warbleR package). data used finding position markers search_templates. also contain 'sound.id' column used label re-recorded sounds according counterpart master sound file. Y object class 'data.frame' output search_templates. output Character vector length 1 determine extended selection table ('est', default) data.frame (\"data.frame\"). path Character string containing directory path test (re-recorded) sound files found. .song Logical argument indicate extended selection table created song (see '.song' selection_table argument). Default TRUE. marker Character string define whether \"start\" \"end\" marker used aligning re-recorded sound files. Default \"start\". cores Numeric vector length 1. Controls whether parallel computing applied specifying number cores used. Default 1 (.e. parallel computing). pb Logical argument control progress bar shown. Default TRUE. ... Additional arguments passed selection_table customizing extended selection table.","code":""},{"path":"https://marce10.github.io/baRulho/reference/align_test_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align test sound files — align_test_files","text":"extended selection table aligned sounds test (re-recorded) sound files.","code":""},{"path":"https://marce10.github.io/baRulho/reference/align_test_files.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Align test sound files — align_test_files","text":"function aligns sounds found re-recorded sound files according master sound file referenced 'X'. function outputs 'extended selection table'.","code":""},{"path":"https://marce10.github.io/baRulho/reference/align_test_files.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Align test sound files — align_test_files","text":"Araya-Salas, M. (2020). baRulho: baRulho: quantifying habitat-induced degradation (animal) acoustic signals R. R package version 1.0.2","code":""},{"path":[]},{"path":"https://marce10.github.io/baRulho/reference/align_test_files.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Align test sound files — align_test_files","text":"Marcelo Araya-Salas (marcelo.araya@ucr.ac.cr)","code":""},{"path":"https://marce10.github.io/baRulho/reference/align_test_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align test sound files — align_test_files","text":"","code":"if (FALSE) { # set temporary directory td <- tempdir()    # load example data from warbleR data(list = c(\"Phae.long1\", \"Phae.long2\", \"Phae.long3\", \"Phae.long4\", \"lbh_selec_table\"))  # save sound files to temporary folder writeWave(Phae.long1, file.path(td, \"Phae.long1.wav\")) writeWave(Phae.long2, file.path(td, \"Phae.long2.wav\")) writeWave(Phae.long3, file.path(td, \"Phae.long3.wav\")) writeWave(Phae.long4, file.path(td, \"Phae.long4.wav\"))  # make an extended selection table est <- warbleR::selection_table(X = lbh_selec_table, extended = TRUE,  confirm.extended = FALSE, path = td, pb = FALSE)  # create master sound file master.sf <- master_sound_file(X = est, file.name = \"example_master\",  dest.path = td, gap.duration = 0.3)  # read master exmp.master <- readWave(file.path(td, \"example_master.wav\"))  # add 1 s silence exmp.test1 <- addsilw(wave = exmp.master, at = \"start\", d = 1, output = \"Wave\",  f = exmp.master@samp.rate)  exmp.test2 <- addsilw(wave = exmp.master, at = \"start\", d = 2, output = \"Wave\",  f = exmp.master@samp.rate)  # create noise ns <- noisew(f = exmp.master@samp.rate, d = duration(exmp.test2) + 1,  output = \"Wave\")  # make noise exactly the same length and add noise to 2 examples exmp.test1@left <- exmp.test1@left + (ns@left[1:length(exmp.test1@left)] * 500) exmp.test2@left <- exmp.test2@left + (ns@left[1:length(exmp.test2@left)] * 500)  # normalize before saving exmp.test1 <- normalize(exmp.test1, unit = \"16\") exmp.test2 <- normalize(exmp.test2, unit = \"16\")  # save examples writeWave(object = exmp.test1, filename = file.path(td, \"example_test1.wav\"),  extensible = FALSE)  writeWave(object = exmp.test2, filename = file.path(td, \"example_test2.wav\"),  extensible = FALSE)  # find  tempaltes found.templts <- search_templates(X = master.sf,  template.rows = which(master.sf$orig.sound.file == \"start_marker\"),  test.files = c(\"example_test1.wav\", \"example_test2.wav\"), path = td, pb = FALSE)  # align sounds and output extended selection table alg.tests <- align_test_files(X =  master.sf, Y = found.templts, path = td, pb = FALSE) }"},{"path":"https://marce10.github.io/baRulho/reference/atmospheric_attenuation.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate atmospheric attenuation — atmospheric_attenuation","title":"Estimate atmospheric attenuation — atmospheric_attenuation","text":"atmospheric_attenuation estimates atmospheric attenuation atmospheric absorption.","code":""},{"path":"https://marce10.github.io/baRulho/reference/atmospheric_attenuation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate atmospheric attenuation — atmospheric_attenuation","text":"","code":"atmospheric_attenuation(f, temp, RH, p = 101325, formula = NULL, spi = NULL, dist)"},{"path":"https://marce10.github.io/baRulho/reference/atmospheric_attenuation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate atmospheric attenuation — atmospheric_attenuation","text":"f numeric vector length 1 frequency (Hertz). temp numeric vector length 1 frequency (Celsius). RH numeric vector length 1 relative humidity p numeric vector length 1 ambient pressure Pa (standard: 101325, default). formula DEPRECATED. spi numeric vector length 1 initial sound pressure Pa. Default NULL. DEPRECATED. dist numeric vector length 1 distance (m) sound propagates.","code":""},{"path":"https://marce10.github.io/baRulho/reference/atmospheric_attenuation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate atmospheric attenuation — atmospheric_attenuation","text":"Returns atmospheric attenuation (dB) sound based supplied parameters.","code":""},{"path":"https://marce10.github.io/baRulho/reference/atmospheric_attenuation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate atmospheric attenuation — atmospheric_attenuation","text":"Calculate atmospheric attenuation based temperature, relative humidity, pressure sound frequency.deprecated future versions.","code":""},{"path":"https://marce10.github.io/baRulho/reference/atmospheric_attenuation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate atmospheric attenuation — atmospheric_attenuation","text":"Araya-Salas, M. (2020). baRulho: baRulho: quantifying habitat-induced degradation (animal) acoustic signals R. R package version 1.0.2","code":""},{"path":"https://marce10.github.io/baRulho/reference/atmospheric_attenuation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate atmospheric attenuation — atmospheric_attenuation","text":"Marcelo Araya-Salas (marcelo.araya@ucr.ac.cr)","code":""},{"path":"https://marce10.github.io/baRulho/reference/atmospheric_attenuation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate atmospheric attenuation — atmospheric_attenuation","text":"","code":"{ # measure atmospheric attenuation formula 1 atmospheric_attenuation(f = 20000, temp = 20, RH = 90, p = 88000, dist = 30) } #> Warning: this function will be deprecated. Please use 'attenuation()' instead #> [1] 10.57402"},{"path":"https://marce10.github.io/baRulho/reference/baRulho.html","id":null,"dir":"Reference","previous_headings":"","what":"baRulho: quantifying habitat-induced acoustic signal degradation — baRulho","title":"baRulho: quantifying habitat-induced acoustic signal degradation — baRulho","text":"`baRulho` package intended quantify habitat-induced degradation (animal) acoustic signals.","code":""},{"path":"https://marce10.github.io/baRulho/reference/baRulho.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"baRulho: quantifying habitat-induced acoustic signal degradation — baRulho","text":"main features package : Loops apply tasks sounds referenced extended selection table comparison playback sounds re-recorded different distances functions allow parallelization tasks, distributes tasks among several processors improve computational efficiency. License: GPL (>= 2)","code":""},{"path":"https://marce10.github.io/baRulho/reference/baRulho.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"baRulho: quantifying habitat-induced acoustic signal degradation — baRulho","text":"Marcelo Araya-Salas Maintainer: Marcelo Araya-Salas (marcelo.araya@ucr.ac.cr)","code":""},{"path":"https://marce10.github.io/baRulho/reference/blur_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure blur ratio in the time domain — blur_ratio","title":"Measure blur ratio in the time domain — blur_ratio","text":"blur_ratio measures blur ratio sounds referenced extended selection table.","code":""},{"path":"https://marce10.github.io/baRulho/reference/blur_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure blur ratio in the time domain — blur_ratio","text":"","code":"blur_ratio(X, parallel = 1, cores = 1, pb = TRUE, method = 1, ssmooth = 200,  msmooth = NULL, output = \"est\", img = FALSE, res = 150, hop.size = 11.6, wl = NULL,  ovlp = 70, pal = viridis, collevels = seq(-120, 0, 5), dest.path = NULL, path = NULL)"},{"path":"https://marce10.github.io/baRulho/reference/blur_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure blur ratio in the time domain — blur_ratio","text":"X Object class 'data.frame', 'selection_table' 'extended_selection_table' (last 2 classes created function selection_table warbleR package) reference sounds master sound file. Must contain following columns: 1) \"sound.files\": name .wav files, 2) \"selec\": unique selection identifier (within sound file), 3) \"start\": start time 4) \"end\": end time selections, 5)  \"bottom.freq\": low frequency bandpass, 6) \"top.freq\": high frequency bandpass 7) \"sound.id\": ID sounds used identify counterparts across distances. sound must unique ID within distance. parallel DEPRECATED. Use 'cores' instead. cores Numeric vector length 1. Controls whether parallel computing applied specifying number cores used. Default 1 (.e. parallel computing). pb Logical argument control progress bar shown. Default TRUE. method Numeric vector length 1 indicate 'experimental design' measuring envelope correlation. Two methods available: 1: compare sounds counterpart recorded closest distance source (e.g. compare sound recorded 5m, 10m 15m counterpart recorded 1m). default method. 2: compare sounds counterpart recorded distance immediately (e.g. sound recorded 10m compared sound recorded 5m, sound recorded 15m compared sound recorded 10m ). ssmooth Numeric vector length 1 determining length sliding window (amplitude samples) used sum smooth amplitude envelope calculation (used internally env). Default 200. msmooth Numeric vector length 2 smooth amplitude envelope mean sliding window amplitude envelope calculation. first element window length (number amplitude values) second one window overlap (used internally env). output Character vector length 1 determine extended selection table ('est', default), data frame ('data.frame') list (\"list\") containing extended selection table (first object list) (smoothed) wave envelopes (second object list) returned. envelope data can used plotting. 'est' format available 'X' extended selection table. img Logical argument control image files 'jpeg' format containing images compared corresponding envelopes produced. Default images ( FALSE). res Numeric argument length 1. Controls image resolution. Default 150 (faster) although 300 - 400 recommended publication/presentation quality. hop.size numeric vector length 1 specifying time window duration (ms). Default 11.6 ms, equivalent 512 wl 44.1 kHz sampling rate. Ignored 'wl' supplied. wl numeric vector length 1 specifying window length spectrogram, default  NULL. supplied, 'hop.size' ignored. ovlp Numeric vector length 1 specifying percent overlap two  consecutive windows, spectro. used plotting. Default 70. Applied spectra spectrograms image files. pal color palette function used assign colors  plot, spectro. Default viridis. collevels Numeric vector indicating set levels used partition amplitude range spectrogram (dB) spectro. Default seq(-120, 0, 5). dest.path Character string containing directory path image files saved. NULL (default) folder containing sound files used instead. path Character string containing directory path sound files found. needed 'X' extended selection table.","code":""},{"path":"https://marce10.github.io/baRulho/reference/blur_ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure blur ratio in the time domain — blur_ratio","text":"Data frame similar input data, also includes two new columns ('reference' 'blur.ratio') reference sound blur ratio values. img = TRUE also returns 1 image file ('jpeg' format) comparison showing spectrograms sounds overlaid amplitude envelopes (probability mass functions (PMF)). Spectrograms shown within frequency range reference sound also show vertical lines start end sounds allow users visually check alignment. output = 'list' output list including data frame just described data frame envelopes (amplitude values) sounds.","code":""},{"path":"https://marce10.github.io/baRulho/reference/blur_ratio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Measure blur ratio in the time domain — blur_ratio","text":"Blur ratio measures degradation sound change sound energy time domain described Dabelsteen et al (1993). Low values indicate low degradation sounds. function measures blur ratio sounds reference playback re-recorded different distances. Blur ratio measured mismatch amplitude envelopes (expressed probability mass functions) reference sound re-recorded sound. converting envelopes probability mass functions effect energy attenuation removed, focusing analysis modification envelope shape. function compares sound corresponding reference sound within supplied frequency range (e.g. bandpass) reference sound ('bottom.freq' 'top.freq' columns 'X'). 'sound.id' column must used tell function compare sounds belonging category (e.g. song-types). Two methods setting experimental design provided. wave objects extended selection table must sampling rate length envelopes comparable.","code":""},{"path":"https://marce10.github.io/baRulho/reference/blur_ratio.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Measure blur ratio in the time domain — blur_ratio","text":"Dabelsteen, T., Larsen, O. N., & Pedersen, S. B. (1993). Habitat-induced degradation sound signals: Quantifying effects communication sounds bird location blur ratio, excess attenuation, signal--noise ratio blackbird song. Journal Acoustical Society America, 93(4), 2206.Araya-Salas, M. (2020). baRulho: baRulho: quantifying habitat-induced degradation (animal) acoustic signals R. R package version 1.0.2","code":""},{"path":[]},{"path":"https://marce10.github.io/baRulho/reference/blur_ratio.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Measure blur ratio in the time domain — blur_ratio","text":"Marcelo Araya-Salas (marcelo.araya@ucr.ac.cr)","code":""},{"path":"https://marce10.github.io/baRulho/reference/blur_ratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measure blur ratio in the time domain — blur_ratio","text":"","code":"{ # load example data data(\"playback_est\")  # remove ambient selections playback_est <- playback_est[playback_est$sound.id!= \"ambient\", ]  # using method 1 blur_ratio(X = playback_est)  # using method 2 blur_ratio(X = playback_est, method = 2) } #> Preparing data for analysis (step 1 out of 3): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Calculating amplitude envelopes (step 2 out of 3): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~01s             |+++++                                             | 10% ~01s             |++++++++                                          | 15% ~01s             |++++++++++                                        | 20% ~01s             |+++++++++++++                                     | 25% ~01s             |+++++++++++++++                                   | 30% ~01s             |++++++++++++++++++                                | 35% ~01s             |++++++++++++++++++++                              | 40% ~01s             |+++++++++++++++++++++++                           | 45% ~01s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=01s   #> Calculating blur ratio (step 3 out of 3): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Preparing data for analysis (step 1 out of 3): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Calculating amplitude envelopes (step 2 out of 3): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~01s             |+++++                                             | 10% ~01s             |++++++++                                          | 15% ~01s             |++++++++++                                        | 20% ~01s             |+++++++++++++                                     | 25% ~01s             |+++++++++++++++                                   | 30% ~01s             |++++++++++++++++++                                | 35% ~01s             |++++++++++++++++++++                              | 40% ~01s             |+++++++++++++++++++++++                           | 45% ~01s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=01s   #> Calculating blur ratio (step 3 out of 3): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Object of class 'extended_selection_table'  #> * The output of the following call:  #> blur_ratio(X = playback_est, method = 2)  #>  #> Contains:  #> *  A selection table data frame with 20 row(s) and 10 columns:  #> |sound.files    | selec|  start|    end| bottom.freq| top.freq| #> |:--------------|-----:|------:|------:|-----------:|--------:| #> |01m_re-rec.wav |     1| 0.0500| 0.2073|      2.2387|  11.5892| #> |05m_re-rec.wav |     1| 0.0444| 0.2017|      2.2387|  11.5892| #> |10m_re-rec.wav |     1| 0.0421| 0.1993|      2.2387|  11.5892| #> |15m_re-rec.wav |     1| 0.0421| 0.1993|      2.2387|  11.5892| #> |01m_re-rec.wav |     4| 1.0500| 1.2445|      1.5441|  10.8946| #> |05m_re-rec.wav |     4| 1.0465| 1.2410|      1.5441|  10.8946| #> ... 4 more column(s) (distance, sound.id, reference, blur.ratio) and 14 more row(s)  #>  #> * 4 wave object(s) (as attributes): 01m_re-rec.wav 05m_re-rec.wav 10m_re-rec.wav 15m_re-rec.wav #>   #> * A data frame (check.results) generated by check_sels() (as attribute)  #>  #> Additional information: #> * The selection table was created by song (see 'class_extended_selection_table')  #> * 1 sampling rate(s) (in kHz): 44.1  #> * 1 bit depth(s): 8  #> * Created by warbleR < 1.1.21"},{"path":"https://marce10.github.io/baRulho/reference/envelope_correlation.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure amplitude envelope correlation — envelope_correlation","title":"Measure amplitude envelope correlation — envelope_correlation","text":"envelope_correlation measures amplitude envelope correlation sounds referenced extended selection table.","code":""},{"path":"https://marce10.github.io/baRulho/reference/envelope_correlation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure amplitude envelope correlation — envelope_correlation","text":"","code":"envelope_correlation(X, parallel = 1, cores = 1, pb = TRUE, method = 1,  cor.method = \"pearson\", ssmooth = NULL, msmooth = NULL,  output = \"est\", hop.size = 11.6, wl = NULL, ovlp = 70,  path = NULL)"},{"path":"https://marce10.github.io/baRulho/reference/envelope_correlation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure amplitude envelope correlation — envelope_correlation","text":"X Object class 'data.frame', 'selection_table' 'extended_selection_table' (last 2 classes created function selection_table warbleR package) reference sounds master sound file. Must contain following columns: 1) \"sound.files\": name .wav files, 2) \"selec\": unique selection identifier (within sound file), 3) \"start\": start time 4) \"end\": end time selections, 5)  \"bottom.freq\": low frequency bandpass, 6) \"top.freq\": high frequency bandpass 7) \"sound.id\": ID sounds used identify counterparts across distances. sound must unique ID within distance. parallel DEPRECATED. Use 'cores' instead. cores Numeric vector length 1. Controls whether parallel computing applied specifying number cores used. Default 1 (.e. parallel computing). NULL (default) current working directory used. pb Logical argument control progress bar shown. Default TRUE. method Numeric vector length 1 indicate 'experimental design' measure amplitude envelope correlation. Two methods available: 1: compare sounds counterpart recorded closest distance source (e.g. compare sound recorded 5m, 10m 15m counterpart recorded 1m). default method. 2: compare sounds counterpart recorded distance immediately (e.g. sound recorded 10m compared sound recorded 5m, sound recorded 15m compared sound recorded 10m ). cor.method Character string indicating correlation coefficient applied (\"pearson\", \"spearman\", \"kendall\", see cor). ssmooth Numeric vector length 1 determine length sliding window used sum smooth amplitude envelope calculation (used internally env). msmooth Numeric vector length 2 smooth amplitude envelope mean sliding window amplitude envelope calculation. first element window length (number amplitude values) second one window overlap (used internally env). output Character vector length 1 determine extended selection table ('est', default) data frame ('data.frame'). 'est' format available 'X' extended selection table. hop.size numeric vector length 1 specifying time window duration (ms). Default 11.6 ms, equivalent 512 wl 44.1 kHz sampling rate. Ignored 'wl' supplied. wl numeric vector length 1 specifying window length spectrogram, default  NULL. supplied, 'hop.size' ignored. ovlp Numeric vector length 1 specifying percent overlap two  consecutive windows, spectro. Default 70. path Character string containing directory path sound files found. needed 'X' extended selection table.","code":""},{"path":"https://marce10.github.io/baRulho/reference/envelope_correlation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure amplitude envelope correlation — envelope_correlation","text":"Extended selection table similar input data, also includes two new columns ('reference'  'envelope.correlation') reference sound amplitude envelope correlation coefficients.","code":""},{"path":"https://marce10.github.io/baRulho/reference/envelope_correlation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Measure amplitude envelope correlation — envelope_correlation","text":"Amplitude envelope correlation measures similarity two sounds time domain.  function measures envelope correlation coefficients sounds reference playback re-recorded increasing distances. Values close 1 means similar amplitude envelopes (.e. little degradation occurred). envelopes different lengths (means sounds different lengths) cross-correlation used maximum correlation coefficient returned. Cross-correlation achieved sliding shortest sound along largest one calculating correlation step. 'sound.id' column must used indicate function compare sounds belonging category (e.g. song-types). function compares sound corresponding reference sound within supplied frequency range (e.g. bandpass) reference sound ('bottom.freq' 'top.freq' columns 'X'). Two methods calculating envelope correlation provided (see 'method' argument). Use blur_ratio extract envelopes.","code":""},{"path":"https://marce10.github.io/baRulho/reference/envelope_correlation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Measure amplitude envelope correlation — envelope_correlation","text":"Araya-Salas, M. (2020). baRulho: baRulho: quantifying habitat-induced degradation (animal) acoustic signals R. R package version 1.0.2Apol, C.., Sturdy, C.B. & Proppe, D.S. (2017). Seasonal variability habitat structure may shaped acoustic signals repertoires black-capped boreal chickadees. Evol Ecol. 32:57-74.","code":""},{"path":[]},{"path":"https://marce10.github.io/baRulho/reference/envelope_correlation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Measure amplitude envelope correlation — envelope_correlation","text":"Marcelo Araya-Salas (marcelo.araya@ucr.ac.cr)","code":""},{"path":"https://marce10.github.io/baRulho/reference/envelope_correlation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measure amplitude envelope correlation — envelope_correlation","text":"","code":"{ # load example data data(\"playback_est\")  # remove ambient selections playback_est <- playback_est[playback_est$sound.id != \"ambient\", ]  # method 1 envelope_correlation(X = playback_est)  # method 2 envelope_correlation(X = playback_est, method = 2) } #> Preparing data for analysis (step 1 out of 3): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Calculating amplitude envelopes (step 2 out of 3): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Calculating envelope correlations (step 3 out of 3): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Preparing data for analysis (step 1 out of 3): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Calculating amplitude envelopes (step 2 out of 3): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Calculating envelope correlations (step 3 out of 3): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Object of class 'extended_selection_table'  #> * The output of the following call:  #> envelope_correlation(X = playback_est, method = 2)  #>  #> Contains:  #> *  A selection table data frame with 20 row(s) and 10 columns:  #> |sound.files    | selec|  start|    end| bottom.freq| top.freq| #> |:--------------|-----:|------:|------:|-----------:|--------:| #> |01m_re-rec.wav |     1| 0.0500| 0.2073|      2.2387|  11.5892| #> |05m_re-rec.wav |     1| 0.0444| 0.2017|      2.2387|  11.5892| #> |10m_re-rec.wav |     1| 0.0421| 0.1993|      2.2387|  11.5892| #> |15m_re-rec.wav |     1| 0.0421| 0.1993|      2.2387|  11.5892| #> |01m_re-rec.wav |     4| 1.0500| 1.2445|      1.5441|  10.8946| #> |05m_re-rec.wav |     4| 1.0465| 1.2410|      1.5441|  10.8946| #> ... 4 more column(s) (distance, sound.id, reference, envelope.correlation) and 14 more row(s)  #>  #> * 4 wave object(s) (as attributes): 01m_re-rec.wav 05m_re-rec.wav 10m_re-rec.wav 15m_re-rec.wav #>   #> * A data frame (check.results) generated by check_sels() (as attribute)  #>  #> Additional information: #> * The selection table was created by song (see 'class_extended_selection_table')  #> * 1 sampling rate(s) (in kHz): 44.1  #> * 1 bit depth(s): 8  #> * Created by warbleR < 1.1.21"},{"path":"https://marce10.github.io/baRulho/reference/excess_attenuation.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure excess attenuation — excess_attenuation","title":"Measure excess attenuation — excess_attenuation","text":"excess_attenuation measures excess attenuation sounds referenced extended selection table.","code":""},{"path":"https://marce10.github.io/baRulho/reference/excess_attenuation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure excess attenuation — excess_attenuation","text":"","code":"excess_attenuation(X, parallel = 1, cores = 1, pb = TRUE, method = 1, type = \"Dabelsteen\",  output = \"est\", hop.size = 1, wl = NULL, ovlp = 50, gain = 0,  bp = \"freq.range\", path = NULL)"},{"path":"https://marce10.github.io/baRulho/reference/excess_attenuation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure excess attenuation — excess_attenuation","text":"X Object class 'data.frame', 'selection_table' 'extended_selection_table' (last 2 classes created function selection_table warbleR package) reference sounds master sound file. Must contain following columns: 1) \"sound.files\": name .wav files, 2) \"selec\": unique selection identifier (within sound file), 3) \"start\": start time 4) \"end\": end time selections, 5)  \"bottom.freq\": low frequency bandpass, 6) \"top.freq\": high frequency bandpass 7) \"sound.id\": ID sounds used identify counterparts across distances. sound must unique ID within distance. parallel DEPRECATED. Use 'cores' instead. cores Numeric vector length 1. Controls whether parallel computing applied specifying number cores used. Default 1 (.e. parallel computing). pb Logical argument control progress bar shown. Default TRUE. method Numeric vector length 1 indicate 'experimental design' measuring excess attenuation. Two methods available: 1: compare sounds counterpart recorded closest distance source (e.g. compare sound recorded 5m, 10m 15m counterpart recorded 1m). default method. 2: compare sounds counterpart recorded distance immediately (e.g. sound recorded 10m compared sound recorded 5m, sound recorded 15m compared sound recorded 10m ). type Character vector length 1 indicate 'type' excess attenuation used. Two types available: Dabelsteen: described Dabelsteen & Mathevon (2002): -20 x log(k) - 6/(2 x re-recorded distance) + gain. 'k' ratio mean amplitude envelopes re-recorded reference sounds. default method. Darden: described Darden et al. (2008): microphone_gain - 20 x log(reference distance / re-recorded distance) - 20 x log(k). 'k' ratio mean amplitude envelopes re-recorded reference sounds. Microphone gain microphone gain reference re-recorded sounds. gain supplied (see 'gain' argument) gain set 0, results relative measure excess attenuation comparable within experiment experiments recording equipment recording volume. output Character vector length 1 determine extended selection table ('est', default) data frame ('data.frame'). 'est' format available 'X' extended selection table. hop.size numeric vector length 1 specifying time window duration (ms). Default 1 ms, equivalent ~45 wl 44.1 kHz sampling rate. Ignored 'wl' supplied. wl numeric vector length 1 specifying window length spectrogram, default  NULL. supplied, 'hop.size' ignored. Note lower values increase time resolution, important amplitude ratio calculations. ovlp Numeric vector length 1 specifying percent overlap two  consecutive windows, spectro. Default 50. used bandpass filtering. gain Numeric vector length 1 combined gain microphone recorder (dB). Default 0, results relative measure excess attenuation comparable within experiment, across experiments. used type = \"Marten\". bp Numeric vector length 2 giving lower upper limits frequency bandpass filter (kHz). Alternatively, set 'freq.range' (default) function uses 'bottom.freq' 'top.freq' bandpass range. path Character string containing directory path sound files found. needed 'X' extended selection table.","code":""},{"path":"https://marce10.github.io/baRulho/reference/excess_attenuation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure excess attenuation — excess_attenuation","text":"Extended selection table similar input data, also includes new column (excess.attenuation) excess attenuation values.","code":""},{"path":"https://marce10.github.io/baRulho/reference/excess_attenuation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Measure excess attenuation — excess_attenuation","text":"Excess attenuation amplitude loss sound excess due spherical spreading (observed attenuation - expected attenuation). every doubling distance, sounds attenuate 6 dB loss amplitude (Morton, 1975; Marten & Marler, 1977). additional loss amplitude results energy loss excess expected occur distance via spherical spreading. represents energy loss due additional factors like vegetation atmospheric conditions (Wiley & Richards, 1978). Low values indicate little additional attenuation.  goal function measure excess attenuation sounds reference playback re-recorded increasing distances. 'sound.id' column must used indicate sounds belonging category (e.g. song-types). function compare sound type corresponding reference sound. Two methods calculating excess attenuation provided (see 'method' argument).","code":""},{"path":"https://marce10.github.io/baRulho/reference/excess_attenuation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Measure excess attenuation — excess_attenuation","text":"Araya-Salas, M. (2020). baRulho: baRulho: quantifying habitat-induced degradation (animal) acoustic signals R. R package version 1.0.2Dabelsteen, T., Larsen, O. N., & Pedersen, S. B. (1993). Habitat-induced degradation sound signals: Quantifying effects communication sounds bird location blur ratio, excess attenuation, signal--noise ratio blackbird song. Journal Acoustical Society America, 93(4), 2206.Dabelsteen, T., & Mathevon, N. (2002). songbirds sing intensively dawn?. Acta ethologica, 4(2), 65-72.Darden, SK, Pedersen SB, Larsen , & Dabelsteen T. (2008). Sound transmission ground level short-grass prairie habitat implications long-range communication swift fox *Vulpes velox*. Journal Acoustical Society America, 124(2), 758-766.Marten K, & Marler P. (1977). Sound transmission significance animal vocalization. Behavioral Ecology Sociobiology, 2(3), 271-290.Morton ES. (1975). Ecological sources selection avian sounds. American Naturalist, 109(965), 17-34.Wiley, R., & Richards, D. G. (1978). Physical constraints acoustic communication atmosphere: implications evolution animal vocalizations. Behavioral Ecology Sociobiology, 3(1), 69-94.","code":""},{"path":[]},{"path":"https://marce10.github.io/baRulho/reference/excess_attenuation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Measure excess attenuation — excess_attenuation","text":"Marcelo Araya-Salas (marcelo.araya@ucr.ac.cr)","code":""},{"path":"https://marce10.github.io/baRulho/reference/excess_attenuation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measure excess attenuation — excess_attenuation","text":"","code":"{ # load example data data(\"playback_est\")  # using method 1 excess_attenuation(X = playback_est)  # using method 2 excess_attenuation(X = playback_est, method = 2) } #> Preparing data for analysis (step 1 out of 3): #>    |                                                  | 0 % ~calculating     |++                                                | 4 % ~00s             |++++                                              | 7 % ~00s             |++++++                                            | 11% ~00s             |++++++++                                          | 14% ~00s             |+++++++++                                         | 18% ~00s             |+++++++++++                                       | 21% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 29% ~00s             |+++++++++++++++++                                 | 32% ~00s             |++++++++++++++++++                                | 36% ~00s             |++++++++++++++++++++                              | 39% ~00s             |++++++++++++++++++++++                            | 43% ~00s             |++++++++++++++++++++++++                          | 46% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |+++++++++++++++++++++++++++                       | 54% ~00s             |+++++++++++++++++++++++++++++                     | 57% ~00s             |+++++++++++++++++++++++++++++++                   | 61% ~00s             |+++++++++++++++++++++++++++++++++                 | 64% ~00s             |++++++++++++++++++++++++++++++++++                | 68% ~00s             |++++++++++++++++++++++++++++++++++++              | 71% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 79% ~00s             |++++++++++++++++++++++++++++++++++++++++++        | 82% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 86% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 89% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++   | 93% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++++ | 96% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Calculating amplitude envelopes (step 2 out of 3): #>    |                                                  | 0 % ~calculating     |++                                                | 4 % ~01s             |++++                                              | 7 % ~01s             |++++++                                            | 11% ~01s             |++++++++                                          | 14% ~01s             |+++++++++                                         | 18% ~01s             |+++++++++++                                       | 21% ~01s             |+++++++++++++                                     | 25% ~02s             |+++++++++++++++                                   | 29% ~02s             |+++++++++++++++++                                 | 32% ~02s             |++++++++++++++++++                                | 36% ~02s             |++++++++++++++++++++                              | 39% ~02s             |++++++++++++++++++++++                            | 43% ~02s             |++++++++++++++++++++++++                          | 46% ~02s             |+++++++++++++++++++++++++                         | 50% ~02s             |+++++++++++++++++++++++++++                       | 54% ~02s             |+++++++++++++++++++++++++++++                     | 57% ~01s             |+++++++++++++++++++++++++++++++                   | 61% ~01s             |+++++++++++++++++++++++++++++++++                 | 64% ~01s             |++++++++++++++++++++++++++++++++++                | 68% ~01s             |++++++++++++++++++++++++++++++++++++              | 71% ~01s             |++++++++++++++++++++++++++++++++++++++            | 75% ~01s             |++++++++++++++++++++++++++++++++++++++++          | 79% ~01s             |++++++++++++++++++++++++++++++++++++++++++        | 82% ~01s             |+++++++++++++++++++++++++++++++++++++++++++       | 86% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 89% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++   | 93% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++++ | 96% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=04s   #> Calculating excess attenuation (step 3 out of 3): #>    |                                                  | 0 % ~calculating     |+++++++++                                         | 17% ~00s             |+++++++++++++++++                                 | 33% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++++++++                | 67% ~00s             |++++++++++++++++++++++++++++++++++++++++++        | 83% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Preparing data for analysis (step 1 out of 3): #>    |                                                  | 0 % ~calculating     |++                                                | 4 % ~00s             |++++                                              | 7 % ~00s             |++++++                                            | 11% ~00s             |++++++++                                          | 14% ~00s             |+++++++++                                         | 18% ~00s             |+++++++++++                                       | 21% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 29% ~00s             |+++++++++++++++++                                 | 32% ~00s             |++++++++++++++++++                                | 36% ~00s             |++++++++++++++++++++                              | 39% ~00s             |++++++++++++++++++++++                            | 43% ~00s             |++++++++++++++++++++++++                          | 46% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |+++++++++++++++++++++++++++                       | 54% ~00s             |+++++++++++++++++++++++++++++                     | 57% ~00s             |+++++++++++++++++++++++++++++++                   | 61% ~00s             |+++++++++++++++++++++++++++++++++                 | 64% ~00s             |++++++++++++++++++++++++++++++++++                | 68% ~00s             |++++++++++++++++++++++++++++++++++++              | 71% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 79% ~00s             |++++++++++++++++++++++++++++++++++++++++++        | 82% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 86% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 89% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++   | 93% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++++ | 96% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Calculating amplitude envelopes (step 2 out of 3): #>    |                                                  | 0 % ~calculating     |++                                                | 4 % ~00s             |++++                                              | 7 % ~00s             |++++++                                            | 11% ~00s             |++++++++                                          | 14% ~00s             |+++++++++                                         | 18% ~01s             |+++++++++++                                       | 21% ~01s             |+++++++++++++                                     | 25% ~02s             |+++++++++++++++                                   | 29% ~02s             |+++++++++++++++++                                 | 32% ~02s             |++++++++++++++++++                                | 36% ~02s             |++++++++++++++++++++                              | 39% ~02s             |++++++++++++++++++++++                            | 43% ~02s             |++++++++++++++++++++++++                          | 46% ~02s             |+++++++++++++++++++++++++                         | 50% ~02s             |+++++++++++++++++++++++++++                       | 54% ~02s             |+++++++++++++++++++++++++++++                     | 57% ~01s             |+++++++++++++++++++++++++++++++                   | 61% ~01s             |+++++++++++++++++++++++++++++++++                 | 64% ~01s             |++++++++++++++++++++++++++++++++++                | 68% ~01s             |++++++++++++++++++++++++++++++++++++              | 71% ~01s             |++++++++++++++++++++++++++++++++++++++            | 75% ~01s             |++++++++++++++++++++++++++++++++++++++++          | 79% ~01s             |++++++++++++++++++++++++++++++++++++++++++        | 82% ~01s             |+++++++++++++++++++++++++++++++++++++++++++       | 86% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 89% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++   | 93% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++++ | 96% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=04s   #> Calculating excess attenuation (step 3 out of 3): #>    |                                                  | 0 % ~calculating     |+++++++++                                         | 17% ~00s             |+++++++++++++++++                                 | 33% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++++++++                | 67% ~00s             |++++++++++++++++++++++++++++++++++++++++++        | 83% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Object of class 'extended_selection_table'  #> * The output of the following call:  #> excess_attenuation(X = playback_est, method = 2)  #>  #> Contains:  #> *  A selection table data frame with 28 row(s) and 10 columns:  #> |sound.files    | selec|  start|    end| bottom.freq| top.freq| #> |:--------------|-----:|------:|------:|-----------:|--------:| #> |01m_re-rec.wav |     1| 0.0500| 0.2073|      2.2387|  11.5892| #> |05m_re-rec.wav |     1| 0.0444| 0.2017|      2.2387|  11.5892| #> |10m_re-rec.wav |     1| 0.0421| 0.1993|      2.2387|  11.5892| #> |15m_re-rec.wav |     1| 0.0421| 0.1993|      2.2387|  11.5892| #> |01m_re-rec.wav |     4| 1.0500| 1.2445|      1.5441|  10.8946| #> |05m_re-rec.wav |     4| 1.0465| 1.2410|      1.5441|  10.8946| #> ... 4 more column(s) (distance, sound.id, reference, excess.attenuation) and 22 more row(s)  #>  #> * 4 wave object(s) (as attributes): 01m_re-rec.wav 05m_re-rec.wav 10m_re-rec.wav 15m_re-rec.wav #>   #> * A data frame (check.results) generated by check_sels() (as attribute)  #>  #> Additional information: #> * The selection table was created by song (see 'class_extended_selection_table')  #> * 1 sampling rate(s) (in kHz): 44.1  #> * 1 bit depth(s): 8  #> * Created by warbleR < 1.1.21"},{"path":"https://marce10.github.io/baRulho/reference/master_sound_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a master sound file — master_sound_file","title":"Create a master sound file — master_sound_file","text":"master_sound_file creates master sound file used playback experiments related sound degradation.","code":""},{"path":"https://marce10.github.io/baRulho/reference/master_sound_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a master sound file — master_sound_file","text":"","code":"master_sound_file(X, file.name, dest.path = NULL, overwrite = FALSE, delay = 1, gap.duration = 1, amp.marker = 2, flim = c(0, 4), cex = 14, path = NULL)"},{"path":"https://marce10.github.io/baRulho/reference/master_sound_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a master sound file — master_sound_file","text":"X Object class 'data.frame', 'selection_table' 'extended_selection_table' (last 2 classes created function selection_table warbleR package) reference sounds master sound file. Must contain following columns: 1) \"sound.files\": name .wav files, 2) \"selec\": unique selection identifier (within sound file), 3) \"start\": start time 4) \"end\": end time selections, 5)  \"bottom.freq\": low frequency bandpass 6) \"top.freq\": high frequency bandpass. file.name Character string indicating name sound file. dest.path Character string containing directory path sound file saved. NULL (default) current working directory used instead. overwrite Logical argument determine function overwrite existing sound file file name. Default FALSE. delay Numeric vector length 1 control duration (s) silence gap beginning (end) sound file. can useful allow time start playback experiment. Default 1. gap.duration Numeric vector length 1 control duration (s) silence gaps placed sounds. Default 1 s. amp.marker Numeric vector length 1 use constant amplify markers amplitude. useful increase amplitude markers relation sounds, picked distances. Default 2. flim Numeric vector length 2 control frequency range markers found. NULL markers display across whole frequency range. Default c(0, 4). cex Numeric vector length 1 indicating font size start end markers. Default 14. path Character string containing directory path sound files found. needed 'X' extended selection table.","code":""},{"path":"https://marce10.github.io/baRulho/reference/master_sound_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a master sound file — master_sound_file","text":"Extended selection table similar input data, includes new column (cross.correlation) spectrogram cross-correlation coefficients.","code":""},{"path":"https://marce10.github.io/baRulho/reference/master_sound_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a master sound file — master_sound_file","text":"function intended simplify creation master sound files playback experiments sound degradation studies. function takes wave objects extended selection tables concatenate single sound file. function also adds acoustic markers start end playback can used time-sync re-recorded sounds facilitate streamlining degradation quantification.","code":""},{"path":"https://marce10.github.io/baRulho/reference/master_sound_file.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a master sound file — master_sound_file","text":"Araya-Salas, M. (2020). baRulho: baRulho: quantifying habitat-induced degradation (animal) acoustic signals R. R package version 1.0.2","code":""},{"path":[]},{"path":"https://marce10.github.io/baRulho/reference/master_sound_file.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a master sound file — master_sound_file","text":"Marcelo Araya-Salas (marcelo.araya@ucr.ac.cr)","code":""},{"path":"https://marce10.github.io/baRulho/reference/master_sound_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a master sound file — master_sound_file","text":"","code":"{ # load example data from warbleR data(list = c(\"Phae.long1\", \"Phae.long2\", \"Phae.long3\", \"Phae.long4\", \"lbh_selec_table\"))  # save sound files to temporary folder writeWave(Phae.long1, file.path(tempdir(), \"Phae.long1.wav\")) writeWave(Phae.long2, file.path(tempdir(), \"Phae.long2.wav\")) writeWave(Phae.long3, file.path(tempdir(), \"Phae.long3.wav\")) writeWave(Phae.long4, file.path(tempdir(), \"Phae.long4.wav\"))  # make an extended selection table est <- selection_table(X = lbh_selec_table, extended = TRUE, confirm.extended = FALSE, path = tempdir())  # create master sound file master.sel.tab <- master_sound_file(X = est, file.name = \"example_master\", dest.path = tempdir(), gap.duration = 0.3)  # the following code exports the selection table to Raven using Rraven package # Rraven::exp_raven(master.sel.tab, path = tempdir(), file.name = \"example_master_selection_table\") } #> checking selections (step 1 of 2): #>    |                                                  | 0 % ~calculating     |+++++++++++++                                     | 25% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> saving wave objects into extended selection table (step 2 of 2): #>    |                                                  | 0 % ~calculating     |+++++                                             | 9 % ~00s             |++++++++++                                        | 18% ~00s             |++++++++++++++                                    | 27% ~00s             |+++++++++++++++++++                               | 36% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++++                  | 64% ~00s             |+++++++++++++++++++++++++++++++++++++             | 73% ~00s             |+++++++++++++++++++++++++++++++++++++++++         | 82% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++    | 91% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s"},{"path":"https://marce10.github.io/baRulho/reference/noise_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure full spectrum sound noise profiles — noise_profile","title":"Measure full spectrum sound noise profiles — noise_profile","text":"noise_profile Measure full spectrum sound pressure levels (.e. noise profiles) sound files extended selection tables.","code":""},{"path":"https://marce10.github.io/baRulho/reference/noise_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure full spectrum sound noise profiles — noise_profile","text":"","code":"noise_profile(X = NULL, files = NULL, mar = NULL, noise.ref = \"adjacent\", parallel = 1, cores = 1, pb = TRUE, path = NULL, bp = NULL, hop.size = 1, wl = NULL, PSD = FALSE, norm = TRUE, dB = \"A\", averaged = TRUE)"},{"path":"https://marce10.github.io/baRulho/reference/noise_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure full spectrum sound noise profiles — noise_profile","text":"X Object class 'data.frame', 'selection_table' 'extended_selection_table' (last 2 classes created function selection_table warbleR package) reference sounds master sound file. Must contain following columns: 1) \"sound.files\": name .wav files, 2) \"selec\": unique selection identifier (within sound file), 3) \"start\": start time 4) \"end\": end time selections, 5)  \"bottom.freq\": low frequency bandpass, 6) \"top.freq\": high frequency bandpass 7) \"sound.id\": ID sounds used identify counterparts across distances (needed \"custom\" noise reference, see \"noise.ref\" argument). Default NULL. files Character vector names wave files analyzed. Files must found 'path' supplied (working directory 'path' supplied). Default NULL. mar numeric vector length 1. Specifies margins adjacent start end points selection measure ambient noise. Required 'X' supplied ignored supplied. Default NULL. noise.ref Character vector length 1 determined noise segment must used measuring ambient noise. Ignored 'X' supplied. Two options available: adjacent: measure ambient noise right sound (using argument 'mar' define duration ambient noise segments). custom: measure ambient noise segments referenced selection table (labeled 'ambient' 'sound.id' column). parallel DEPRECATED. Use 'cores' instead. cores Numeric vector length 1. Controls whether parallel computing applied specifying number cores used. Default 1 (.e. parallel computing). pb Logical argument control progress bar shown. Default TRUE. path Character string containing directory path sound files located. NULL (default) current working directory used. bp Numeric vector length 2 giving lower upper limits frequency bandpass filter (kHz). Default NULL. hop.size numeric vector length 1 specifying time window duration (ms). Default 1 ms, equivalent ~45 wl 44.1 kHz sampling rate. Ignored 'wl' supplied. wl numeric vector length 1 specifying window length spectrogram, default NULL. Ignored bp = NULL. supplied, 'hop.size' ignored. Note lower values increase time resolution, important amplitude ratio calculations. PSD Logical control whether Probability Mass Function (probability distribution frequencies). See meanspec. Default FALSE. norm Logical control whether amplitude values normalized (divided maximum) highest value 1. See meanspec. Default TRUE. dB character string length 1 specifying type dB return: \"max0\" maximum dB value 0, \"\", \"B\", \"C\", \"D\", \"ITU\" common dB weights. See meanspec. Default \"\". averaged Logical control frequency spectra averaged within sound file. Default TRUE.","code":""},{"path":"https://marce10.github.io/baRulho/reference/noise_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure full spectrum sound noise profiles — noise_profile","text":"list containing frequency spectra sound file wave object ('X' supplied).","code":""},{"path":"https://marce10.github.io/baRulho/reference/noise_profile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Measure full spectrum sound noise profiles — noise_profile","text":"function `noise_profile()` allows estimate full spectrum sound pressure levels (.e. noise profiles) ambient noise. can done extended selection tables (using segments containing sound) complete sound files working directory (path supplied). function uses meanspec internally calculate frequency spectra.","code":""},{"path":"https://marce10.github.io/baRulho/reference/noise_profile.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Measure full spectrum sound noise profiles — noise_profile","text":"Araya-Salas, M. (2020). baRulho: baRulho: quantifying habitat-induced degradation (animal) acoustic signals R. R package version 1.0.2.","code":""},{"path":[]},{"path":"https://marce10.github.io/baRulho/reference/noise_profile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Measure full spectrum sound noise profiles — noise_profile","text":"Marcelo Araya-Salas (marcelo.araya@ucr.ac.cr)","code":""},{"path":"https://marce10.github.io/baRulho/reference/noise_profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measure full spectrum sound noise profiles — noise_profile","text":"","code":"{ # load example data data(\"playback_est\")  # custom noise reference noise_profile(X = playback_est, mar = 0.01, pb = FALSE, noise.ref = \"custom\")  # remove noise selections pe <- playback_est[playback_est$sound.id != \"ambient\", ]   noise_profile(X = pe, mar = 0.01, pb = FALSE, noise.ref = \"adjacent\") } #>       sound.files      freq        amp #> 1  01m_re-rec.wav  1.002273  -5.721971 #> 2  05m_re-rec.wav  1.002273  -5.729903 #> 3  10m_re-rec.wav  1.002273  -5.720644 #> 4  15m_re-rec.wav  1.002273  -5.711130 #> 5  01m_re-rec.wav  2.004545 -40.506844 #> 6  05m_re-rec.wav  2.004545 -40.156630 #> 7  10m_re-rec.wav  2.004545 -39.413065 #> 8  15m_re-rec.wav  2.004545 -32.194383 #> 9  01m_re-rec.wav  3.006818 -49.094528 #> 10 05m_re-rec.wav  3.006818 -46.528108 #> 11 10m_re-rec.wav  3.006818 -46.618687 #> 12 15m_re-rec.wav  3.006818 -34.804503 #> 13 01m_re-rec.wav  4.009091 -54.690393 #> 14 05m_re-rec.wav  4.009091 -50.579048 #> 15 10m_re-rec.wav  4.009091 -48.417097 #> 16 15m_re-rec.wav  4.009091 -39.180214 #> 17 01m_re-rec.wav  5.011364 -59.602309 #> 18 05m_re-rec.wav  5.011364 -53.233228 #> 19 10m_re-rec.wav  5.011364 -51.911241 #> 20 15m_re-rec.wav  5.011364 -43.293286 #> 21 01m_re-rec.wav  6.013636 -63.182520 #> 22 05m_re-rec.wav  6.013636 -58.699244 #> 23 10m_re-rec.wav  6.013636 -54.656805 #> 24 15m_re-rec.wav  6.013636 -47.181135 #> 25 01m_re-rec.wav  7.015909 -65.666298 #> 26 05m_re-rec.wav  7.015909 -60.227954 #> 27 10m_re-rec.wav  7.015909 -56.814190 #> 28 15m_re-rec.wav  7.015909 -50.925429 #> 29 01m_re-rec.wav  8.018182 -69.290264 #> 30 05m_re-rec.wav  8.018182 -63.040709 #> 31 10m_re-rec.wav  8.018182 -57.386836 #> 32 15m_re-rec.wav  8.018182 -52.810468 #> 33 01m_re-rec.wav  9.020455 -69.570417 #> 34 05m_re-rec.wav  9.020455 -64.150070 #> 35 10m_re-rec.wav  9.020455 -58.996561 #> 36 15m_re-rec.wav  9.020455 -53.395612 #> 37 01m_re-rec.wav 10.022727 -73.044066 #> 38 05m_re-rec.wav 10.022727 -64.871929 #> 39 10m_re-rec.wav 10.022727 -61.148385 #> 40 15m_re-rec.wav 10.022727 -55.581374 #> 41 01m_re-rec.wav 11.025000 -73.765640 #> 42 05m_re-rec.wav 11.025000 -65.897917 #> 43 10m_re-rec.wav 11.025000 -62.707541 #> 44 15m_re-rec.wav 11.025000 -57.118786 #> 45 01m_re-rec.wav 12.027273 -75.417837 #> 46 05m_re-rec.wav 12.027273 -66.727830 #> 47 10m_re-rec.wav 12.027273 -64.208914 #> 48 15m_re-rec.wav 12.027273 -58.560034 #> 49 01m_re-rec.wav 13.029545 -75.942159 #> 50 05m_re-rec.wav 13.029545 -67.300412 #> 51 10m_re-rec.wav 13.029545 -64.932286 #> 52 15m_re-rec.wav 13.029545 -60.003674 #> 53 01m_re-rec.wav 14.031818 -77.009027 #> 54 05m_re-rec.wav 14.031818 -67.394874 #> 55 10m_re-rec.wav 14.031818 -65.040446 #> 56 15m_re-rec.wav 14.031818 -60.216267 #> 57 01m_re-rec.wav 15.034091 -77.979482 #> 58 05m_re-rec.wav 15.034091 -68.688015 #> 59 10m_re-rec.wav 15.034091 -66.032095 #> 60 15m_re-rec.wav 15.034091 -61.191970 #> 61 01m_re-rec.wav 16.036364 -78.333174 #> 62 05m_re-rec.wav 16.036364 -70.394644 #> 63 10m_re-rec.wav 16.036364 -66.434031 #> 64 15m_re-rec.wav 16.036364 -60.608169 #> 65 01m_re-rec.wav 17.038636 -80.091531 #> 66 05m_re-rec.wav 17.038636 -72.007798 #> 67 10m_re-rec.wav 17.038636 -66.899027 #> 68 15m_re-rec.wav 17.038636 -60.082887 #> 69 01m_re-rec.wav 18.040909 -80.002158 #> 70 05m_re-rec.wav 18.040909 -72.604253 #> 71 10m_re-rec.wav 18.040909 -67.137339 #> 72 15m_re-rec.wav 18.040909 -61.233618 #> 73 01m_re-rec.wav 19.043182 -81.011620 #> 74 05m_re-rec.wav 19.043182 -72.771296 #> 75 10m_re-rec.wav 19.043182 -68.339331 #> 76 15m_re-rec.wav 19.043182 -62.327506 #> 77 01m_re-rec.wav 20.045455 -82.010981 #> 78 05m_re-rec.wav 20.045455 -73.486001 #> 79 10m_re-rec.wav 20.045455 -68.183745 #> 80 15m_re-rec.wav 20.045455 -64.449787 #> 81 01m_re-rec.wav 21.047727 -82.754739 #> 82 05m_re-rec.wav 21.047727 -75.724601 #> 83 10m_re-rec.wav 21.047727 -70.677042 #> 84 15m_re-rec.wav 21.047727 -66.949034"},{"path":"https://marce10.github.io/baRulho/reference/playback_est.html","id":null,"dir":"Reference","previous_headings":"","what":"Extended selection table with re-recorded playbacks — playback_est","title":"Extended selection table with re-recorded playbacks — playback_est","text":"Recordings Phaethornis longirostris (Long-billed Hermit) songs different song types (column 'sound.id') broadcast re-recorded 4 distances (1m, 5m, 10m, 15m, column 'distance'). data includes ambient (background) noise selections distances. data created function selection_table warbleR package.","code":""},{"path":"https://marce10.github.io/baRulho/reference/playback_est.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extended selection table with re-recorded playbacks — playback_est","text":"","code":"data(playback_est)"},{"path":"https://marce10.github.io/baRulho/reference/playback_est.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Extended selection table with re-recorded playbacks — playback_est","text":"Extended selection table object warbleR format, contains annotations acoustic data","code":""},{"path":"https://marce10.github.io/baRulho/reference/playback_est.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Extended selection table with re-recorded playbacks — playback_est","text":"Marcelo Araya-Salas","code":""},{"path":"https://marce10.github.io/baRulho/reference/playback_est_unaligned.html","id":null,"dir":"Reference","previous_headings":"","what":"Extended selection table with re-recorded playbacks before alignment — playback_est_unaligned","title":"Extended selection table with re-recorded playbacks before alignment — playback_est_unaligned","text":"data contains subset selections example data 'playback_est' subset re-recorded sounds aligned time corresponding reference sounds (see spcc_align details aligning sounds). data set intended mostly using example spcc_align. data contains recordings Phaethornis longirostris (Long-billed Hermit) songs different song types (column 'sound.id') broadcast re-recorded 4 distances (1m, 5m, 10m, 15m, column 'distance'). data created function selection_table warbleR package.","code":""},{"path":"https://marce10.github.io/baRulho/reference/playback_est_unaligned.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extended selection table with re-recorded playbacks before alignment — playback_est_unaligned","text":"","code":"data(playback_est_unaligned)"},{"path":"https://marce10.github.io/baRulho/reference/playback_est_unaligned.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Extended selection table with re-recorded playbacks before alignment — playback_est_unaligned","text":"Extended selection table object warbleR format, contains annotations acoustic data","code":""},{"path":"https://marce10.github.io/baRulho/reference/playback_est_unaligned.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Extended selection table with re-recorded playbacks before alignment — playback_est_unaligned","text":"Marcelo Araya-Salas","code":""},{"path":"https://marce10.github.io/baRulho/reference/search_templates.html","id":null,"dir":"Reference","previous_headings":"","what":"Search acoustic templates on test sound files — search_templates","title":"Search acoustic templates on test sound files — search_templates","text":"search_templates searches acoustic templates test (re-recorded) sound files.","code":""},{"path":"https://marce10.github.io/baRulho/reference/search_templates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search acoustic templates on test sound files — search_templates","text":"","code":"search_templates(X, template.rows, test.files, path = NULL, pb = TRUE, ...)"},{"path":"https://marce10.github.io/baRulho/reference/search_templates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search acoustic templates on test sound files — search_templates","text":"X Object class 'data.frame', 'selection_table' 'extended_selection_table' (last 2 classes created function selection_table warbleR package) reference sounds master sound file. Must contain following columns: 1) \"sound.files\": name .wav files, 2) \"selec\": unique selection identifier (within sound file), 3) \"start\": start time 4) \"end\": end time selections. Columns 'top.freq', 'bottom.freq' 'channel' optional. Required. template.rows Numeric vector index rows 'X' used templates. 1 supplied template run 'test.files'. Otherwise, 'template.rows' must length 'test.files'. Required. test.files Character vector length 1 name(s) test (re-recorded) file(s) search template(s) (see argument 'template.rows'). path Character string containing directory path test (re-recorded) sound files found. pb Logical argument control progress bar shown. Default TRUE. ... Additional arguments passed cross_correlation setting cross-correlation parameters (e.g. 'wl', 'ovlp', etc).","code":""},{"path":"https://marce10.github.io/baRulho/reference/search_templates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search acoustic templates on test sound files — search_templates","text":"data frame time, start, end, test file names, template name, maximum cross-correlation score time detected.","code":""},{"path":"https://marce10.github.io/baRulho/reference/search_templates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search acoustic templates on test sound files — search_templates","text":"function takes master sound file's reference data ('X') finds position acoustics templates (included selections 'X') re-recorded sound files. used align signals found re-recorded sound files according master sound file referenced 'X'. Make sure master sound file (refered 'X') found folder re-recorded sound files.Take look package vignette information incorporate function sound degradation analysis workflow.","code":""},{"path":"https://marce10.github.io/baRulho/reference/search_templates.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Search acoustic templates on test sound files — search_templates","text":"Araya-Salas, M. (2020). baRulho: baRulho: quantifying habitat-induced degradation (animal) acoustic signals R. R package version 1.0.2","code":""},{"path":[]},{"path":"https://marce10.github.io/baRulho/reference/search_templates.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Search acoustic templates on test sound files — search_templates","text":"Marcelo Araya-Salas (marcelo.araya@ucr.ac.cr)","code":""},{"path":"https://marce10.github.io/baRulho/reference/search_templates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search acoustic templates on test sound files — search_templates","text":"","code":"if (FALSE) { # use a temporary directory td <- tempdir()    # load example data from warbleR data(list = c(\"Phae.long1\", \"Phae.long2\", \"Phae.long3\", \"Phae.long4\",  \"lbh_selec_table\"))  # save sound files to temporary folder writeWave(Phae.long1, file.path(td, \"Phae.long1.wav\")) writeWave(Phae.long2, file.path(td, \"Phae.long2.wav\")) writeWave(Phae.long3, file.path(td, \"Phae.long3.wav\")) writeWave(Phae.long4, file.path(td, \"Phae.long4.wav\"))  # make an extended selection table est <- selection_table(X = lbh_selec_table, extended = TRUE, confirm.extended = FALSE,  path = td, pb = FALSE)  # create master sound file master.sf <- master_sound_file(X = est, file.name = \"example_master\",  dest.path = td, gap.duration = 0.3)  # read master exmp.master <- readWave(file.path(td, \"example_master.wav\"))  # add 1 s silence exmp.test1 <- addsilw(wave = exmp.master, at = \"start\", d = 1, output = \"Wave\", f = exmp.master@samp.rate)  exmp.test2 <- addsilw(wave = exmp.master, at = \"start\", d = 2,  output = \"Wave\", f = exmp.master@samp.rate)  # create noise ns <- noisew(f = exmp.master@samp.rate, d = duration(exmp.test2) + 1,  output = \"Wave\")  # make noise exactly the same length and add noise to 2 examples exmp.test1@left <- exmp.test1@left + (ns@left[1:length(exmp.test1@left)] * 500) exmp.test2@left <- exmp.test2@left + (ns@left[1:length(exmp.test2@left)] * 500)  exmp.test1 <- tuneR::normalize(exmp.test1, unit = \"16\") exmp.test2 <- tuneR::normalize(exmp.test2, unit = \"16\")  # save examples writeWave(object = exmp.test1, filename = file.path(td, \"example_test1.wav\"), extensible = FALSE) writeWave(object = exmp.test2, filename = file.path(td, \"example_test2.wav\"), extensible = FALSE)  # search using start marker as template search_templates(X = master.sf,  template.rows = which(master.sf$orig.sound.file == \"start_marker\"),  test.files = c(\"example_test1.wav\", \"example_test2.wav\"), path = td, pb = FALSE)  # search using end marker as template search_templates(X = master.sf, template.rows = which(master.sf$orig.sound.file == \"end_marker\"),  test.files = c(\"example_test1.wav\", \"example_test2.wav\"),  path = td, pb = FALSE)  # search using both start and end markers as template search_templates(X = master.sf,  template.rows = which(master.sf$orig.sound.file == \"start_marker\" |  master.sf$orig.sound.file == \"end_marker\"),  test.files = c(\"example_test1.wav\", \"example_test2.wav\"),  path = td, pb = FALSE) }"},{"path":"https://marce10.github.io/baRulho/reference/signal_to_noise_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure attenuation as signal-to-noise ratio — signal_to_noise_ratio","title":"Measure attenuation as signal-to-noise ratio — signal_to_noise_ratio","text":"signal_to_noise_ratio measures attenuation signal--noise ratio sounds referenced extended selection table.","code":""},{"path":"https://marce10.github.io/baRulho/reference/signal_to_noise_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure attenuation as signal-to-noise ratio — signal_to_noise_ratio","text":"","code":"signal_to_noise_ratio(X, mar, parallel = 1, cores = 1, pb = TRUE, eq.dur = FALSE, noise.ref = \"adjacent\", type = 1, bp = 'freq.range', output = \"est\", hop.size = 1, wl = NULL, ovlp = 0, path = NULL)"},{"path":"https://marce10.github.io/baRulho/reference/signal_to_noise_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure attenuation as signal-to-noise ratio — signal_to_noise_ratio","text":"X Object class 'data.frame', 'selection_table' 'extended_selection_table' (last 2 classes created function selection_table warbleR package) reference sounds master sound file. Must contain following columns: 1) \"sound.files\": name .wav files, 2) \"selec\": unique selection identifier (within sound file), 3) \"start\": start time 4) \"end\": end time selections, 5)  \"bottom.freq\": low frequency bandpass, 6) \"top.freq\": high frequency bandpass 7) \"sound.id\": ID sounds used identify counterparts across distances (needed \"custom\" noise reference, see \"noise.ref\" argument). mar numeric vector length 1. Specifies margins adjacent start end points selection measure ambient noise. parallel DEPRECATED. Use 'cores' instead. cores Numeric vector length 1. Controls whether parallel computing applied specifying number cores used. Default 1 (.e. parallel computing). pb Logical argument control progress bar shown. Default TRUE. eq.dur Logical. Controls whether ambient noise segment measured duration sound (TRUE. Default FALSE). TRUE 'mar' 'noise.ref' arguments ignored. noise.ref Character vector length 1 determined noise segment must used measuring ambient noise. Two options available: adjacent: measure ambient noise right sound (using argument 'mar' define duration ambient noise segments). custom: measure ambient noise segments referenced selection table (labeled 'ambient' 'sound.id' column). segments used apply ambient noise reference sounds sound file. Therefore, least one 'ambient' selection sound file must provided. several 'ambient' selections sound file supplied, root mean square amplitude envelope averaged across selections. type Numeric vector length 1. Selects formula used calculate signal--noise ratio (S = signal , N = background noise): 1: ratio S amplitude envelope root mean square N amplitude envelope root mean square  (20 * log10(rms(env(S))/rms(env(N)))) described Darden (2008). 2: ratio difference S amplitude envelope root mean square N amplitude envelope root mean square N amplitude envelope root mean square (20 * log10((rms(env(S)) - rms(env(N)))/rms(env(N))), described Dabelsteen et al (1993). bp Numeric vector length 2 giving lower upper limits frequency bandpass filter (kHz). Alternatively, set 'freq.range' (default) function uses 'bottom.freq' 'top.freq' bandpass range. output Character vector length 1 determine extended selection table ('est', default) data frame ('data.frame'). hop.size numeric vector length 1 specifying time window duration (ms). Default 1 ms, equivalent ~45 wl 44.1 kHz sampling rate. Ignored 'wl' supplied. wl numeric vector length 1 specifying window length spectrogram, default NULL. Ignored bp = NULL. supplied, 'hop.size' ignored. Note lower values increase time resolution, important amplitude ratios calculations. ovlp Numeric vector length 1 specifying percent overlap two consecutive windows, spectro. Default 0. used bandpass filtering. path Character string containing directory path sound files found. needed 'X' extended selection table.","code":""},{"path":"https://marce10.github.io/baRulho/reference/signal_to_noise_ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure attenuation as signal-to-noise ratio — signal_to_noise_ratio","text":"Extended selection table similar input data, also includes new column (signal..noise.ratio) signal--noise ratio values.","code":""},{"path":"https://marce10.github.io/baRulho/reference/signal_to_noise_ratio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Measure attenuation as signal-to-noise ratio — signal_to_noise_ratio","text":"Signal--noise ratio (SNR) measures sound amplitude level relation ambient noise. general margin ambient noise measured must specified. Alternatively, selection ambient noise can used reference (see 'noise.ref' argument). margins overlap another sound nearby, SNR inaccurate, margin length carefully considered. SNR less equal one suggests background noise equal overpowering sound. function measure signal--noise ratio within supplied frequency range (e.g. bandpass) reference signal ('bottom.freq' 'top.freq' columns 'X') default (, bp = 'freq.range'.","code":""},{"path":"https://marce10.github.io/baRulho/reference/signal_to_noise_ratio.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Measure attenuation as signal-to-noise ratio — signal_to_noise_ratio","text":"Araya-Salas, M. (2020). baRulho: baRulho: quantifying habitat-induced degradation (animal) acoustic signals R. R package version 1.0.2Dabelsteen, T., Larsen, O. N., & Pedersen, S. B. (1993). Habitat-induced degradation sound signals: Quantifying effects communication sounds bird location blur ratio, excess attenuation, signal--noise ratio blackbird song. Journal Acoustical Society America, 93(4), 2206.Darden, SK, Pedersen SB, Larsen , & Dabelsteen T. (2008). Sound transmission ground level short-grass prairie habitat implications long-range communication swift fox *Vulpes velox*. Journal Acoustical Society America, 124(2), 758-766.","code":""},{"path":[]},{"path":"https://marce10.github.io/baRulho/reference/signal_to_noise_ratio.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Measure attenuation as signal-to-noise ratio — signal_to_noise_ratio","text":"Marcelo Araya-Salas (marcelo.araya@ucr.ac.cr)","code":""},{"path":"https://marce10.github.io/baRulho/reference/signal_to_noise_ratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measure attenuation as signal-to-noise ratio — signal_to_noise_ratio","text":"","code":"{ # load example data data(\"playback_est\")  # using measure ambient noise reference selections signal_to_noise_ratio(X = playback_est, mar = 0.05, noise.ref = 'custom')  # remove ambient selections playback_est <- playback_est[playback_est$sound.id != \"ambient\", ]  # using margin for ambient noise of 0.05 and adjacent measure ambient noise reference signal_to_noise_ratio(X = playback_est, mar = 0.05, noise.ref = 'adjacent')  } #>    |                                                  | 0 % ~calculating     |++                                                | 4 % ~00s             |++++                                              | 7 % ~00s             |++++++                                            | 11% ~00s             |++++++++                                          | 14% ~00s             |+++++++++                                         | 18% ~00s             |+++++++++++                                       | 21% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 29% ~00s             |+++++++++++++++++                                 | 32% ~00s             |++++++++++++++++++                                | 36% ~00s             |++++++++++++++++++++                              | 39% ~00s             |++++++++++++++++++++++                            | 43% ~00s             |++++++++++++++++++++++++                          | 46% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |+++++++++++++++++++++++++++                       | 54% ~00s             |+++++++++++++++++++++++++++++                     | 57% ~00s             |+++++++++++++++++++++++++++++++                   | 61% ~00s             |+++++++++++++++++++++++++++++++++                 | 64% ~00s             |++++++++++++++++++++++++++++++++++                | 68% ~00s             |++++++++++++++++++++++++++++++++++++              | 71% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 79% ~00s             |++++++++++++++++++++++++++++++++++++++++++        | 82% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 86% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 89% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++   | 93% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++++ | 96% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Object of class 'extended_selection_table'  #> * The output of the following call:  #> signal_to_noise_ratio(X = playback_est, mar = 0.05, noise.ref = \"adjacent\")  #>  #> Contains:  #> *  A selection table data frame with 20 row(s) and 9 columns:  #> |sound.files    | selec|  start|    end| bottom.freq| top.freq| #> |:--------------|-----:|------:|------:|-----------:|--------:| #> |01m_re-rec.wav |     1| 0.0500| 0.2073|      2.2387|  11.5892| #> |05m_re-rec.wav |     1| 0.0444| 0.2017|      2.2387|  11.5892| #> |10m_re-rec.wav |     1| 0.0421| 0.1993|      2.2387|  11.5892| #> |15m_re-rec.wav |     1| 0.0421| 0.1993|      2.2387|  11.5892| #> |01m_re-rec.wav |     4| 1.0500| 1.2445|      1.5441|  10.8946| #> |05m_re-rec.wav |     4| 1.0465| 1.2410|      1.5441|  10.8946| #> ... 3 more column(s) (distance, sound.id, signal.to.noise.ratio) and 14 more row(s)  #>  #> * 4 wave object(s) (as attributes): 01m_re-rec.wav 05m_re-rec.wav 10m_re-rec.wav 15m_re-rec.wav #>   #> * A data frame (check.results) generated by check_sels() (as attribute)  #>  #> Additional information: #> * The selection table was created by song (see 'class_extended_selection_table')  #> * 1 sampling rate(s) (in kHz): 44.1  #> * 1 bit depth(s): 8  #> * Created by warbleR < 1.1.21"},{"path":"https://marce10.github.io/baRulho/reference/spcc.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure spectrographic cross-correlation as a measure of sound distortion — spcc","title":"Measure spectrographic cross-correlation as a measure of sound distortion — spcc","text":"spcc measures spectrographic cross-correlation measure sound distortion sounds referenced extended selection table.","code":""},{"path":"https://marce10.github.io/baRulho/reference/spcc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure spectrographic cross-correlation as a measure of sound distortion — spcc","text":"","code":"spcc(X, parallel = 1, cores = 1, pb = TRUE,  method = 1,  cor.method = \"pearson\", output = \"est\",  hop.size = 11.6, wl = NULL, ovlp = 90, wn = 'hanning', path = NULL)"},{"path":"https://marce10.github.io/baRulho/reference/spcc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure spectrographic cross-correlation as a measure of sound distortion — spcc","text":"X Object class 'data.frame', 'selection_table' 'extended_selection_table' (last 2 classes created function selection_table warbleR package) reference sounds master sound file. Must contain following columns: 1) \"sound.files\": name .wav files, 2) \"selec\": unique selection identifier (within sound file), 3) \"start\": start time 4) \"end\": end time selections, 5)  \"bottom.freq\": low frequency bandpass, 6) \"top.freq\": high frequency bandpass 7) \"sound.id\": ID sounds used identify counterparts across distances. sound must unique ID within distance. parallel DEPRECATED. Use 'cores' instead. cores Numeric vector length 1. Controls whether parallel computing applied specifying number cores used. Default 1 (.e. parallel computing). pb Logical argument control progress bar shown. Default TRUE. method Numeric vector length 1 indicate 'experimental design' measuring envelope correlation. Two methods available: 1: compare sounds counterpart recorded closest distance source (e.g. compare sound recorded 5m, 10m 15m counterpart recorded 1m). default method. 2: compare sounds counterpart recorded distance immediately (e.g. sound recorded 10m compared sound recorded 5m, sound recorded 15m compared sound recorded 10m ). cor.method Character string indicating correlation coefficient applied (\"pearson\", \"spearman\", \"kendall\", see cor). output Character vector length 1 determine extended selection table ('est', default) data frame ('data.frame'). hop.size numeric vector length 1 specifying time window duration (ms). Default 11.6 ms, equivalent 512 wl 44.1 kHz sampling rate. Ignored 'wl' supplied. wl numeric vector length 1 specifying window length spectrogram, default  NULL. supplied, 'hop.size' ignored. ovlp Numeric vector length 1 specifying % overlap two  consecutive windows, spectro. Default 90. High values ovlp  slow function produce accurate results. wn character vector length 1 specifying window name ftwindow. path Character string containing directory path sound files found. needed 'X' extended selection table.","code":""},{"path":"https://marce10.github.io/baRulho/reference/spcc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure spectrographic cross-correlation as a measure of sound distortion — spcc","text":"Extended selection table similar input data, includes new column (cross.correlation) spectrogram cross-correlation coefficients.","code":""},{"path":"https://marce10.github.io/baRulho/reference/spcc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Measure spectrographic cross-correlation as a measure of sound distortion — spcc","text":"Spectrographic cross-correlation measures frequency distortion sounds similarity metric. Values close 1 means similar spectrograms (.e. little sound distortion occurred). Cross-correlation measured sounds reference playback re-recorded increasing distances. 'sound.id' column must used indicate function compare sounds belonging category (e.g. song-types). function compares sound corresponding reference sound within supplied frequency range (e.g. bandpass) reference sound ('bottom.freq' 'top.freq' columns 'X'). Two methods calculating cross-correlation provided (see 'method' argument). function wrapper warbleR's cross_correlation function.","code":""},{"path":"https://marce10.github.io/baRulho/reference/spcc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Measure spectrographic cross-correlation as a measure of sound distortion — spcc","text":"Araya-Salas, M. (2020). baRulho: baRulho: quantifying habitat-induced degradation (animal) acoustic signals R. R package version 1.0.2Clark, C.W., Marler, P. & Beeman K. (1987). Quantitative analysis animal vocal phonology: application Swamp Sparrow song. Ethology. 76:101-115.","code":""},{"path":[]},{"path":"https://marce10.github.io/baRulho/reference/spcc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Measure spectrographic cross-correlation as a measure of sound distortion — spcc","text":"Marcelo Araya-Salas (marcelo.araya@ucr.ac.cr)","code":""},{"path":"https://marce10.github.io/baRulho/reference/spcc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measure spectrographic cross-correlation as a measure of sound distortion — spcc","text":"","code":"{ # load example data data(\"playback_est\")  # method 1 spcc(X = playback_est, method = 1)  # method 2 spcc(X = playback_est, method = 2) } #> running cross-correlation (step 1 of 1): #>    |                                                  | 0 % ~calculating     |++++                                              | 7 % ~01s             |+++++++                                           | 13% ~00s             |++++++++++                                        | 20% ~00s             |++++++++++++++                                    | 27% ~00s             |+++++++++++++++++                                 | 33% ~00s             |++++++++++++++++++++                              | 40% ~00s             |++++++++++++++++++++++++                          | 47% ~00s             |+++++++++++++++++++++++++++                       | 53% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |++++++++++++++++++++++++++++++++++                | 67% ~00s             |+++++++++++++++++++++++++++++++++++++             | 73% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |++++++++++++++++++++++++++++++++++++++++++++      | 87% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++   | 93% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> running cross-correlation (step 1 of 1): #>    |                                                  | 0 % ~calculating     |++++                                              | 7 % ~00s             |+++++++                                           | 13% ~00s             |++++++++++                                        | 20% ~00s             |++++++++++++++                                    | 27% ~00s             |+++++++++++++++++                                 | 33% ~00s             |++++++++++++++++++++                              | 40% ~00s             |++++++++++++++++++++++++                          | 47% ~00s             |+++++++++++++++++++++++++++                       | 53% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |++++++++++++++++++++++++++++++++++                | 67% ~00s             |+++++++++++++++++++++++++++++++++++++             | 73% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |++++++++++++++++++++++++++++++++++++++++++++      | 87% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++   | 93% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Object of class 'extended_selection_table'  #> * The output of the following call:  #> spcc(X = playback_est, method = 2)  #>  #> Contains:  #> *  A selection table data frame with 28 row(s) and 10 columns:  #> |sound.files    | selec|  start|    end| bottom.freq| top.freq| #> |:--------------|-----:|------:|------:|-----------:|--------:| #> |01m_re-rec.wav |     1| 0.0500| 0.2073|      2.2387|  11.5892| #> |05m_re-rec.wav |     1| 0.0444| 0.2017|      2.2387|  11.5892| #> |10m_re-rec.wav |     1| 0.0421| 0.1993|      2.2387|  11.5892| #> |15m_re-rec.wav |     1| 0.0421| 0.1993|      2.2387|  11.5892| #> |01m_re-rec.wav |     4| 1.0500| 1.2445|      1.5441|  10.8946| #> |05m_re-rec.wav |     4| 1.0465| 1.2410|      1.5441|  10.8946| #> ... 4 more column(s) (distance, sound.id, reference, cross.correlation) and 22 more row(s)  #>  #> * 4 wave object(s) (as attributes): 01m_re-rec.wav 05m_re-rec.wav 10m_re-rec.wav 15m_re-rec.wav #>   #> * A data frame (check.results) generated by check_sels() (as attribute)  #>  #> Additional information: #> * The selection table was created by song (see 'class_extended_selection_table')  #> * 1 sampling rate(s) (in kHz): 44.1  #> * 1 bit depth(s): 8  #> * Created by warbleR < 1.1.21"},{"path":"https://marce10.github.io/baRulho/reference/spcc_align.html","id":null,"dir":"Reference","previous_headings":"","what":"Align start and end of sound using spectrographic cross-correlation — spcc_align","title":"Align start and end of sound using spectrographic cross-correlation — spcc_align","text":"spcc_align aligns start end sound extended selection table using spectrographic cross-correlation","code":""},{"path":"https://marce10.github.io/baRulho/reference/spcc_align.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align start and end of sound using spectrographic cross-correlation — spcc_align","text":"","code":"spcc_align(X, parallel = 1, cores = 1, pb = TRUE, hop.size = 11.6, wl = NULL, ovlp = 90,  wn = 'hanning')"},{"path":"https://marce10.github.io/baRulho/reference/spcc_align.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align start and end of sound using spectrographic cross-correlation — spcc_align","text":"X object class 'extended_selection_table' created function selection_table warbleR package. object must include following additional columns: 'sound.id', 'bottom.freq' 'top.freq'. parallel DEPRECATED. Use 'cores' instead. cores Numeric vector length 1. Controls whether parallel computing applied specifying number cores used. Default 1 (.e. parallel computing). pb Logical argument control progress bar shown. Default TRUE. hop.size numeric vector length 1 specifying time window duration (ms). Default 11.6 ms, equivalent 512 wl 44.1 kHz sampling rate. Ignored 'wl' supplied. wl numeric vector length 1 specifying window length spectrogram, default  NULL. supplied, 'hop.size' ignored. ovlp Numeric vector length 1 specifying % overlap two  consecutive windows, spectro. Default 90. High values ovlp  slow function produce accurate results. wn character vector length 1 specifying window name ftwindow.","code":""},{"path":"https://marce10.github.io/baRulho/reference/spcc_align.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align start and end of sound using spectrographic cross-correlation — spcc_align","text":"Extended selection table similar input data time parameters (columns 'start' 'end') tailored closely match start end reference sound.","code":""},{"path":"https://marce10.github.io/baRulho/reference/spcc_align.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Align start and end of sound using spectrographic cross-correlation — spcc_align","text":"function uses spectrographic cross-correlation align position time sounds regard reference sound. sound recorded closest distance source used reference. Precise alignment crucial downstream measures sound degradation. function calls warbleR's cross_correlation internally align sounds using cross-correlation. output extended selection table contains new start end values alignment.","code":""},{"path":"https://marce10.github.io/baRulho/reference/spcc_align.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Align start and end of sound using spectrographic cross-correlation — spcc_align","text":"Araya-Salas, M. (2020). baRulho: baRulho: quantifying habitat-induced degradation (animal) acoustic signals R. R package version 1.0.2Clark, C.W., Marler, P. & Beeman K. (1987). Quantitative analysis animal vocal phonology: application Swamp Sparrow song. Ethology. 76:101-115.","code":""},{"path":[]},{"path":"https://marce10.github.io/baRulho/reference/spcc_align.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Align start and end of sound using spectrographic cross-correlation — spcc_align","text":"Marcelo Araya-Salas (marcelo.araya@ucr.ac.cr)","code":""},{"path":"https://marce10.github.io/baRulho/reference/spcc_align.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align start and end of sound using spectrographic cross-correlation — spcc_align","text":"","code":"{ # load example data data(\"playback_est_unaligned\")  # method 1 spcc_align(X = playback_est_unaligned) } #> running cross-correlation (step 1 of 2): #>    |                                                  | 0 % ~calculating     |+++++++++                                         | 17% ~01s             |+++++++++++++++++                                 | 33% ~01s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++++++++                | 67% ~00s             |++++++++++++++++++++++++++++++++++++++++++        | 83% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=01s   #> finding peaks and aligning (step 2 out of 2) #>    |                                                  | 0 % ~calculating     |+++++++++                                         | 17% ~00s             |+++++++++++++++++                                 | 33% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++++++++                | 67% ~00s             |++++++++++++++++++++++++++++++++++++++++++        | 83% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Object of class 'extended_selection_table'  #> * The output of the following call:  #> spcc_align(X = playback_est_unaligned)  #>  #> Contains:  #> *  A selection table data frame with 8 row(s) and 8 columns:  #> |   |sound.files    | selec|  start|    end| bottom.freq| top.freq| #> |:--|:--------------|-----:|------:|------:|-----------:|--------:| #> |5  |01m_re-rec.wav |     4| 1.0500| 1.2445|      1.5441|  10.8946| #> |6  |05m_re-rec.wav |     4| 1.9615| 2.1560|      1.5441|  10.8946| #> |7  |10m_re-rec.wav |     4| 1.9557| 2.1502|      1.5441|  10.8946| #> |8  |15m_re-rec.wav |     4| 1.9557| 2.1502|      1.5441|  10.8946| #> |21 |01m_re-rec.wav |     2| 0.5500| 0.7001|      1.7436|  11.0500| #> |22 |05m_re-rec.wav |     2| 0.9915| 1.1415|      1.7436|  11.0500| #> ... 2 more column(s) (distance, sound.id) and 2 more row(s)  #>  #> * 4 wave object(s) (as attributes): 01m_re-rec.wav 05m_re-rec.wav 10m_re-rec.wav 15m_re-rec.wav #>   #> * A data frame (check.results) generated by check_sels() (as attribute)  #>  #> Additional information: #> * The selection table was created by song (see 'class_extended_selection_table')  #> * 1 sampling rate(s) (in kHz): 22.1  #> * 1 bit depth(s): 8  #> * Created by warbleR < 1.1.21"},{"path":"https://marce10.github.io/baRulho/reference/spcc_distortion.html","id":null,"dir":"Reference","previous_headings":"","what":"alternative name for spcc — spcc_distortion","title":"alternative name for spcc — spcc_distortion","text":"alternative name spcc","code":""},{"path":"https://marce10.github.io/baRulho/reference/spcc_distortion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"alternative name for spcc — spcc_distortion","text":"","code":"spcc_distortion(   X,   parallel = 1,   cores = 1,   pb = TRUE,   method = 1,   cor.method = \"pearson\",   output = \"est\",   hop.size = 11.6,   wl = NULL,   ovlp = 90,   wn = \"hanning\",   path = NULL )"},{"path":"https://marce10.github.io/baRulho/reference/spcc_distortion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"alternative name for spcc — spcc_distortion","text":"see spcc documentation. spcc_distortion deprecated future versions.","code":""},{"path":"https://marce10.github.io/baRulho/reference/spectral_blur_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure blur ratio in the frequency domain — spectral_blur_ratio","title":"Measure blur ratio in the frequency domain — spectral_blur_ratio","text":"spectral_blur_ratio measures blur ratio frequency spectra signals referenced extended selection table.","code":""},{"path":"https://marce10.github.io/baRulho/reference/spectral_blur_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure blur ratio in the frequency domain — spectral_blur_ratio","text":"","code":"spectral_blur_ratio(X, parallel = 1, pb = TRUE, method = 1, ssmooth = 50,  output = \"est\", img = FALSE, res = 150, hop.size = 11.6, wl = NULL,  ovlp = 70, pal = reverse.gray.colors.2, collevels = seq(-60, 0, 5), dest.path = NULL)"},{"path":"https://marce10.github.io/baRulho/reference/spectral_blur_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure blur ratio in the frequency domain — spectral_blur_ratio","text":"X object class 'extended_selection_table' created function selection_table warbleR package. parallel Numeric vector length 1. Controls whether parallel computing applied specifying number cores used. Default 1 (.e. parallel computing). pb Logical argument control progress bar shown. Default TRUE. method Numeric vector length 1 indicate 'experimental design' measuring spectrum correlation. Two methods available: 1: compare signals counterpart recorded closest distance source (e.g. compare signal recorded 5m, 10m 15m counterpart recorded 1m). default method. 2: compare signals counterpart recorded distance immediately (e.g. signal recorded 10m compared signal recorded 5m, signal recorded 15m compared signal recorded 10m ). ssmooth Numeric vector length 1 determining length sliding window used sum smooth power spectrum calculation (kHz). Default 100. output Character vector length 1 determine extended selection table ('est', default), data frame ('data.frame') list (\"list\") containing extended selection table (first object list) (smoothed) wave envelopes (second object list) returned. envelope data can used plotting. img Logical argument control image files 'jpeg' format containing images compared corresponding spectra produced. Default images ( FALSE). res Numeric argument length 1. Controls image resolution. Default 150 (faster) although 300 - 400 recommended publication/presentation quality. hop.size numeric vector length 1 specifying time window duration (ms). Default 11.6 ms, equivalent 512 wl 44.1 kHz sampling rate. Ignored 'wl' supplied. wl numeric vector length 1 specifying window length spectrogram, default  NULL. supplied, 'hop.size' ignored. Applied spectra spectrograms image files. ovlp Numeric vector length 1 specifying percent overlap two  consecutive windows, spectro. Default 70. Applied spectra spectrograms image files. pal color palette function used assign colors  plot, spectro. Default reverse.gray.colors.2. collevels Numeric vector indicating set levels used partition amplitude range spectrogram (dB) spectro. Default seq(-60, 0, 5). dest.path Character string containing directory path image files saved. NULL (default) folder containing sound files used instead.","code":""},{"path":"https://marce10.github.io/baRulho/reference/spectral_blur_ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure blur ratio in the frequency domain — spectral_blur_ratio","text":"Data frame similar input data, also includes new column (spectral.blur.ratio) blur ratio values. img = TRUE also returns 1 image file ('jpeg' format) comparison showing spectrograms signals overlaid power spectrum (probability mass functions (PMF)). Spectrograms shown within frequency range reference signal also show vertical lines start end signals allow users visually check alignment. output = 'list' output list including data frame just described data frame spectra (amplitude values) signals.","code":""},{"path":"https://marce10.github.io/baRulho/reference/spectral_blur_ratio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Measure blur ratio in the frequency domain — spectral_blur_ratio","text":"Spectral blur ratio measures degradation sound function change signal energy frequency domain, analogous blur ratio proposed Dabelsteen et al (1993) time domain (implemented blur_ratio). Low values indicate low degradation signals. function measures blur ratio spectra signals reference playback re-recorded different distances. Spectral blur ratio measured mismatch power spectra (expressed probability density functions) reference signal re-recorded signal. function compares signal type corresponding reference signal. 'signal.type' column must used tell function compare signals belonging category (e.g. song-types). Two methods setting experimental design provided. wave objects extended selection table must sampling rate length spectra comparable.","code":""},{"path":"https://marce10.github.io/baRulho/reference/spectral_blur_ratio.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Measure blur ratio in the frequency domain — spectral_blur_ratio","text":"Dabelsteen, T., Larsen, O. N., & Pedersen, S. B. (1993). Habitat-induced degradation sound signals: Quantifying effects communication sounds bird location blur ratio, excess attenuation, signal--noise ratio blackbird song. Journal Acoustical Society America, 93(4), 2206.Araya-Salas, M. (2020). baRulho: baRulho: quantifying habitat-induced degradation (animal) acoustic signals R. R package version 1.0.2","code":""},{"path":[]},{"path":"https://marce10.github.io/baRulho/reference/spectral_blur_ratio.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Measure blur ratio in the frequency domain — spectral_blur_ratio","text":"Marcelo Araya-Salas (marcelo.araya@ucr.ac.cr)","code":""},{"path":"https://marce10.github.io/baRulho/reference/spectral_blur_ratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measure blur ratio in the frequency domain — spectral_blur_ratio","text":"","code":"{ # load example data data(\"playback_est\")  # remove ambient selections playback_est <- playback_est[playback_est$signal.type != \"ambient\", ]  # using method 1 spectral_blur_ratio(X = playback_est)  # using method 2 spectral_blur_ratio(X = playback_est, method = 2) } #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> calculating power spectra (step 1 of 2): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> calculating spectrum blur ratio (step 2 of 2): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> calculating power spectra (step 1 of 2): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> calculating spectrum blur ratio (step 2 of 2): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Object of class 'extended_selection_table'  #> * The output of the following call:  #> `[.extended_selection_table`(X = playback_est, i = playback_est$signal.type !=   #>  \"ambient\")  #>  #> Contains:  #> *  A selection table data frame with 20 row(s) and 10 columns:  #> |sound.files    | selec|  start|    end| bottom.freq| top.freq| #> |:--------------|-----:|------:|------:|-----------:|--------:| #> |01m_re-rec.wav |     1| 0.0500| 0.2073|      2.2387|  11.5892| #> |05m_re-rec.wav |     1| 0.0444| 0.2017|      2.2387|  11.5892| #> |10m_re-rec.wav |     1| 0.0421| 0.1993|      2.2387|  11.5892| #> |15m_re-rec.wav |     1| 0.0421| 0.1993|      2.2387|  11.5892| #> |01m_re-rec.wav |     4| 1.0500| 1.2445|      1.5441|  10.8946| #> |05m_re-rec.wav |     4| 1.0465| 1.2410|      1.5441|  10.8946| #> ... 4 more column(s) (signal.type, distance, reference, spectral.blur.ratio) and 14 more row(s)  #>  #> * 4 wave object(s) (as attributes): 01m_re-rec.wav 05m_re-rec.wav 10m_re-rec.wav 15m_re-rec.wav #>   #> * A data frame (check.results) generated by check_sels() (as attribute)  #>  #> Additional information: #> * The selection table was created by song (see 'class_extended_selection_table')  #> * 1 sampling rate(s) (in kHz): 44.1  #> * 1 bit depth(s): 8  #> * Created by warbleR < 1.1.21"},{"path":"https://marce10.github.io/baRulho/reference/spectral_correlation.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure frequency spectral correlation — spectral_correlation","title":"Measure frequency spectral correlation — spectral_correlation","text":"spectral_correlation measures frequency spectrum correlation signals referenced extended selection table.","code":""},{"path":"https://marce10.github.io/baRulho/reference/spectral_correlation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure frequency spectral correlation — spectral_correlation","text":"","code":"spectral_correlation(X, parallel = 1, pb = TRUE, method = 1,  cor.method = \"pearson\", output = \"est\",  hop.size = 11.6, wl = NULL, ovlp = 70)"},{"path":"https://marce10.github.io/baRulho/reference/spectral_correlation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure frequency spectral correlation — spectral_correlation","text":"X object class 'extended_selection_table' created function selection_table warbleR package. parallel Numeric vector length 1. Controls whether parallel computing applied specifying number cores used. Default 1 (.e. parallel computing). NULL (default) current working directory used. pb Logical argument control progress bar shown. Default TRUE. method Numeric vector length 1 indicate 'experimental design' measure frequency spectrum correlation. Two methods available: 1: compare signals counterpart recorded closest distance source (e.g. compare signal recorded 5m, 10m 15m counterpart recorded 1m). default method. 2: compare signals counterpart recorded distance immediately (e.g. signal recorded 10m compared signal recorded 5m, signal recorded 15m compared signal recorded 10m ). cor.method Character string indicating correlation coefficient applied (\"pearson\", \"spearman\", \"kendall\", see cor). output Character vector length 1 determine extended selection table ('est', default) data frame ('data.frame'). hop.size numeric vector length 1 specifying time window duration (ms). Default 11.6 ms, equivalent 512 wl 44.1 kHz sampling rate. Ignored 'wl' supplied. wl numeric vector length 1 specifying window length spectrogram, default  NULL. supplied, 'hop.size' ignored. ovlp Numeric vector length 1 specifying percent overlap two  consecutive windows, spectro. Default 70.","code":""},{"path":"https://marce10.github.io/baRulho/reference/spectral_correlation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure frequency spectral correlation — spectral_correlation","text":"Extended selection table similar input data, also includes new column ('spectrum.correlation') calculated frequency spectrum correlation coefficients.","code":""},{"path":"https://marce10.github.io/baRulho/reference/spectral_correlation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Measure frequency spectral correlation — spectral_correlation","text":"spectral correlation measures similarity two signals frequency domain. function measures spectral correlation coefficients signals reference playback re-recorded increasing distances. Values range 1 (identical frequency spectrum, .e. degradation) 0. 'signal.type' column must used indicate function compare signals belonging category (e.g. song-types). function compare signal type corresponding reference signal. Two methods calculating spectral correlation provided (see 'method' argument). Use spectral_blur_ratio get spectra plotting.","code":""},{"path":"https://marce10.github.io/baRulho/reference/spectral_correlation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Measure frequency spectral correlation — spectral_correlation","text":"Araya-Salas, M. (2020). baRulho: baRulho: quantifying habitat-induced degradation (animal) acoustic signals R. R package version 1.0.2Apol, C.., Sturdy, C.B. & Proppe, D.S. (2017). Seasonal variability habitat structure may shaped acoustic signals repertoires black-capped boreal chickadees. Evol Ecol. 32:57-74.","code":""},{"path":[]},{"path":"https://marce10.github.io/baRulho/reference/spectral_correlation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Measure frequency spectral correlation — spectral_correlation","text":"Marcelo Araya-Salas (marcelo.araya@ucr.ac.cr)","code":""},{"path":"https://marce10.github.io/baRulho/reference/spectral_correlation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measure frequency spectral correlation — spectral_correlation","text":"","code":"{ # load example data data(\"playback_est\")  # remove ambient selections pe <- playback_est[playback_est$signal.type != \"ambient\", ]  # method 1 spectral_correlation(X = pe)  # method 2 spectral_correlation(X = pe, method = 2) } #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> calculating frequency spectrums (step 1 of 2): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> calculating envelope cross-correlations (step 2 of 2): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> calculating frequency spectrums (step 1 of 2): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> calculating envelope cross-correlations (step 2 of 2): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Object of class 'extended_selection_table'  #> * The output of the following call:  #> `[.extended_selection_table`(X = playback_est, i = playback_est$signal.type !=   #>  \"ambient\")  #>  #> Contains:  #> *  A selection table data frame with 20 row(s) and 10 columns:  #> |sound.files    | selec|  start|    end| bottom.freq| top.freq| #> |:--------------|-----:|------:|------:|-----------:|--------:| #> |01m_re-rec.wav |     1| 0.0500| 0.2073|      2.2387|  11.5892| #> |05m_re-rec.wav |     1| 0.0444| 0.2017|      2.2387|  11.5892| #> |10m_re-rec.wav |     1| 0.0421| 0.1993|      2.2387|  11.5892| #> |15m_re-rec.wav |     1| 0.0421| 0.1993|      2.2387|  11.5892| #> |01m_re-rec.wav |     4| 1.0500| 1.2445|      1.5441|  10.8946| #> |05m_re-rec.wav |     4| 1.0465| 1.2410|      1.5441|  10.8946| #> ... 4 more column(s) (signal.type, distance, reference, spectral.correlation) and 14 more row(s)  #>  #> * 4 wave object(s) (as attributes): 01m_re-rec.wav 05m_re-rec.wav 10m_re-rec.wav 15m_re-rec.wav #>   #> * A data frame (check.results) generated by check_sels() (as attribute)  #>  #> Additional information: #> * The selection table was created by song (see 'class_extended_selection_table')  #> * 1 sampling rate(s) (in kHz): 44.1  #> * 1 bit depth(s): 8  #> * Created by warbleR < 1.1.21"},{"path":"https://marce10.github.io/baRulho/reference/spectrum_blur_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure blur ratio in the frequency domain — spectrum_blur_ratio","title":"Measure blur ratio in the frequency domain — spectrum_blur_ratio","text":"spectrum_blur_ratio measures blur ratio frequency spectra sounds referenced extended selection table.","code":""},{"path":"https://marce10.github.io/baRulho/reference/spectrum_blur_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure blur ratio in the frequency domain — spectrum_blur_ratio","text":"","code":"spectrum_blur_ratio(X, parallel = 1, cores = 1, pb = TRUE, method = 1, ssmooth = 50,  output = \"est\", img = FALSE, res = 150, hop.size = 11.6, wl = NULL,  ovlp = 70, pal = viridis, collevels = seq(-120, 0, 5), dest.path = NULL, path = NULL)"},{"path":"https://marce10.github.io/baRulho/reference/spectrum_blur_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure blur ratio in the frequency domain — spectrum_blur_ratio","text":"X Object class 'data.frame', 'selection_table' 'extended_selection_table' (last 2 classes created function selection_table warbleR package) reference sounds master sound file. Must contain following columns: 1) \"sound.files\": name .wav files, 2) \"selec\": unique selection identifier (within sound file), 3) \"start\": start time 4) \"end\": end time selections, 5)  \"bottom.freq\": low frequency bandpass, 6) \"top.freq\": high frequency bandpass 7) \"sound.id\": ID sounds used identify counterparts across distances. sound must unique ID within distance. parallel DEPRECATED. Use 'cores' instead. cores Numeric vector length 1. Controls whether parallel computing applied specifying number cores used. Default 1 (.e. parallel computing). pb Logical argument control progress bar shown. Default TRUE. method Numeric vector length 1 indicate 'experimental design' measuring spectrum correlation. Two methods available: 1: compare sounds counterpart recorded closest distance source (e.g. compare sound recorded 5m, 10m 15m counterpart recorded 1m). default method. 2: compare sounds counterpart recorded distance immediately (e.g. sound recorded 10m compared sound recorded 5m, sound recorded 15m compared sound recorded 10m ). ssmooth Numeric vector length 1 determining length sliding window used sum smooth power spectrum calculation (kHz). Default 100. output Character vector length 1 determine extended selection table ('est', default), data frame ('data.frame') list (\"list\") containing extended selection table (first object list) (smoothed) wave envelopes (second object list) returned. envelope data can used plotting. img Logical argument control image files 'jpeg' format containing images compared corresponding spectra produced. Default images ( FALSE). res Numeric argument length 1. Controls image resolution. Default 150 (faster) although 300 - 400 recommended publication/presentation quality. hop.size numeric vector length 1 specifying time window duration (ms). Default 11.6 ms, equivalent 512 wl 44.1 kHz sampling rate. Ignored 'wl' supplied. wl numeric vector length 1 specifying window length spectrogram, default  NULL. supplied, 'hop.size' ignored. Applied spectra spectrograms image files. ovlp Numeric vector length 1 specifying percent overlap two  consecutive windows, spectro. Default 70. Applied spectra spectrograms image files. pal color palette function used assign colors  plot, spectro. Default viridis. collevels Numeric vector indicating set levels used partition amplitude range spectrogram (dB) spectro. Default seq(-120, 0, 5). dest.path Character string containing directory path image files saved. NULL (default) folder containing sound files used instead. path Character string containing directory path sound files found. needed 'X' extended selection table.","code":""},{"path":"https://marce10.github.io/baRulho/reference/spectrum_blur_ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure blur ratio in the frequency domain — spectrum_blur_ratio","text":"Data frame similar input data, also includes new column (spectral.blur.ratio) blur ratio values. img = TRUE also returns 1 image file ('jpeg' format) comparison showing spectrograms sounds overlaid power spectrum (probability mass functions (PMF)). Spectrograms shown within frequency range reference sound also show vertical lines start end sounds allow users visually check alignment. output = 'list' output list including data frame just described data frame spectra (amplitude values) sounds.","code":""},{"path":"https://marce10.github.io/baRulho/reference/spectrum_blur_ratio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Measure blur ratio in the frequency domain — spectrum_blur_ratio","text":"Spectral blur ratio measures degradation sound function change sound energy frequency domain, analogous blur ratio proposed Dabelsteen et al (1993) time domain (implemented blur_ratio). Low values indicate low degradation sounds. function measures blur ratio spectra sounds reference playback re-recorded different distances. Spectral blur ratio measured mismatch power spectra (expressed probability density functions) reference sound re-recorded sound. function compares sound type corresponding reference sound. 'sound.id' column must used tell function compare sounds belonging category (e.g. song-types). Two methods setting experimental design provided. wave objects extended selection table must sampling rate length spectra comparable.","code":""},{"path":"https://marce10.github.io/baRulho/reference/spectrum_blur_ratio.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Measure blur ratio in the frequency domain — spectrum_blur_ratio","text":"Dabelsteen, T., Larsen, O. N., & Pedersen, S. B. (1993). Habitat-induced degradation sound signals: Quantifying effects communication sounds bird location blur ratio, excess attenuation, signal--noise ratio blackbird song. Journal Acoustical Society America, 93(4), 2206.Araya-Salas, M. (2020). baRulho: baRulho: quantifying habitat-induced degradation (animal) acoustic signals R. R package version 1.0.2","code":""},{"path":[]},{"path":"https://marce10.github.io/baRulho/reference/spectrum_blur_ratio.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Measure blur ratio in the frequency domain — spectrum_blur_ratio","text":"Marcelo Araya-Salas (marcelo.araya@ucr.ac.cr)","code":""},{"path":"https://marce10.github.io/baRulho/reference/spectrum_blur_ratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measure blur ratio in the frequency domain — spectrum_blur_ratio","text":"","code":"{ # load example data data(\"playback_est\")  # remove ambient selections playback_est <- playback_est[playback_est$sound.id != \"ambient\", ]  # using method 1 spectrum_blur_ratio(X = playback_est)  # using method 2 spectrum_blur_ratio(X = playback_est, method = 2) } #> Preparing data for analysis (step 1 out of 3): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Calculating power spectra (step 2 out of 3): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Calculating spectrum blur ratio (step 3 out of 3): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Preparing data for analysis (step 1 out of 3): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Calculating power spectra (step 2 out of 3): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Calculating spectrum blur ratio (step 3 out of 3): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Object of class 'extended_selection_table'  #> * The output of the following call:  #> spectrum_blur_ratio(X = playback_est, method = 2)  #>  #> Contains:  #> *  A selection table data frame with 20 row(s) and 10 columns:  #> |sound.files    | selec|  start|    end| bottom.freq| top.freq| #> |:--------------|-----:|------:|------:|-----------:|--------:| #> |01m_re-rec.wav |     1| 0.0500| 0.2073|      2.2387|  11.5892| #> |05m_re-rec.wav |     1| 0.0444| 0.2017|      2.2387|  11.5892| #> |10m_re-rec.wav |     1| 0.0421| 0.1993|      2.2387|  11.5892| #> |15m_re-rec.wav |     1| 0.0421| 0.1993|      2.2387|  11.5892| #> |01m_re-rec.wav |     4| 1.0500| 1.2445|      1.5441|  10.8946| #> |05m_re-rec.wav |     4| 1.0465| 1.2410|      1.5441|  10.8946| #> ... 4 more column(s) (distance, sound.id, reference, spectral.blur.ratio) and 14 more row(s)  #>  #> * 4 wave object(s) (as attributes): 01m_re-rec.wav 05m_re-rec.wav 10m_re-rec.wav 15m_re-rec.wav #>   #> * A data frame (check.results) generated by check_sels() (as attribute)  #>  #> Additional information: #> * The selection table was created by song (see 'class_extended_selection_table')  #> * 1 sampling rate(s) (in kHz): 44.1  #> * 1 bit depth(s): 8  #> * Created by warbleR < 1.1.21"},{"path":"https://marce10.github.io/baRulho/reference/spectrum_correlation.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure frequency spectral correlation — spectrum_correlation","title":"Measure frequency spectral correlation — spectrum_correlation","text":"spectrum_correlation measures frequency spectrum correlation sounds referenced extended selection table.","code":""},{"path":"https://marce10.github.io/baRulho/reference/spectrum_correlation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure frequency spectral correlation — spectrum_correlation","text":"","code":"spectrum_correlation(X, parallel = 1, cores = 1, pb = TRUE, method = 1, cor.method = \"pearson\", output = \"est\", hop.size = 11.6, wl = NULL, ovlp = 70, path = NULL)"},{"path":"https://marce10.github.io/baRulho/reference/spectrum_correlation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure frequency spectral correlation — spectrum_correlation","text":"X Object class 'data.frame', 'selection_table' 'extended_selection_table' (last 2 classes created function selection_table warbleR package) reference sounds master sound file. Must contain following columns: 1) \"sound.files\": name .wav files, 2) \"selec\": unique selection identifier (within sound file), 3) \"start\": start time 4) \"end\": end time selections, 5)  \"bottom.freq\": low frequency bandpass, 6) \"top.freq\": high frequency bandpass 7) \"sound.id\": ID sounds used identify counterparts across distances. sound must unique ID within distance. parallel DEPRECATED. Use 'cores' instead. cores Numeric vector length 1. Controls whether parallel computing applied specifying number cores used. Default 1 (.e. parallel computing). NULL (default) current working directory used. pb Logical argument control progress bar shown. Default TRUE. method Numeric vector length 1 indicate 'experimental design' measure frequency spectrum correlation. Two methods available: 1: compare sounds counterpart recorded closest distance source (e.g. compare sound recorded 5m, 10m 15m counterpart recorded 1m). default method. 2: compare sounds counterpart recorded distance immediately (e.g. sound recorded 10m compared sound recorded 5m, sound recorded 15m compared sound recorded 10m ). cor.method Character string indicating correlation coefficient applied (\"pearson\", \"spearman\", \"kendall\", see cor). output Character vector length 1 determine extended selection table ('est', default) data frame ('data.frame'). hop.size numeric vector length 1 specifying time window duration (ms). Default 11.6 ms, equivalent 512 wl 44.1 kHz sampling rate. Ignored 'wl' supplied. wl numeric vector length 1 specifying window length spectrogram, default NULL. supplied, 'hop.size' ignored. ovlp Numeric vector length 1 specifying percent overlap two consecutive windows, spectro. Default 70. path Character string containing directory path sound files found. needed 'X' extended selection table.","code":""},{"path":"https://marce10.github.io/baRulho/reference/spectrum_correlation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure frequency spectral correlation — spectrum_correlation","text":"Extended selection table similar input data, also includes new column ('spectrum.correlation') calculated frequency spectrum correlation coefficients.","code":""},{"path":"https://marce10.github.io/baRulho/reference/spectrum_correlation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Measure frequency spectral correlation — spectrum_correlation","text":"spectral correlation measures similarity two sounds frequency domain. function measures spectral correlation coefficients sounds reference playback re-recorded increasing distances. Values range 1 (identical frequency spectrum, .e. degradation) 0. 'sound.id' column must used indicate function compare sounds belonging category (e.g. song-types). function compare sound corresponding reference sound. Two methods calculating spectral correlation provided (see 'method' argument). Use spectrum_blur_ratio get spectra plotting.","code":""},{"path":"https://marce10.github.io/baRulho/reference/spectrum_correlation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Measure frequency spectral correlation — spectrum_correlation","text":"Araya-Salas, M. (2020). baRulho: baRulho: quantifying habitat-induced degradation (animal) acoustic signals R. R package version 1.0.2Apol, C.., Sturdy, C.B. & Proppe, D.S. (2017). Seasonal variability habitat structure may shaped acoustic signals repertoires black-capped boreal chickadees. Evol Ecol. 32:57-74.","code":""},{"path":[]},{"path":"https://marce10.github.io/baRulho/reference/spectrum_correlation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Measure frequency spectral correlation — spectrum_correlation","text":"Marcelo Araya-Salas (marcelo.araya@ucr.ac.cr)","code":""},{"path":"https://marce10.github.io/baRulho/reference/spectrum_correlation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measure frequency spectral correlation — spectrum_correlation","text":"","code":"{ # load example data data(\"playback_est\")  # remove ambient selections pe <- playback_est[playback_est$sound.id != \"ambient\", ]  # method 1 spectrum_correlation(X = pe)  # method 2 spectrum_correlation(X = pe, method = 2) } #> Preparing data for analysis (step 1 out of 3): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Calculating frequency spectrums (step 2 out of 3): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Calculating spectrum correlations (step 3 out of 3): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Preparing data for analysis (step 1 out of 3): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Calculating frequency spectrums (step 2 out of 3): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Calculating spectrum correlations (step 3 out of 3): #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Object of class 'extended_selection_table'  #> * The output of the following call:  #> spectrum_correlation(X = pe, method = 2)  #>  #> Contains:  #> *  A selection table data frame with 20 row(s) and 10 columns:  #> |sound.files    | selec|  start|    end| bottom.freq| top.freq| #> |:--------------|-----:|------:|------:|-----------:|--------:| #> |01m_re-rec.wav |     1| 0.0500| 0.2073|      2.2387|  11.5892| #> |05m_re-rec.wav |     1| 0.0444| 0.2017|      2.2387|  11.5892| #> |10m_re-rec.wav |     1| 0.0421| 0.1993|      2.2387|  11.5892| #> |15m_re-rec.wav |     1| 0.0421| 0.1993|      2.2387|  11.5892| #> |01m_re-rec.wav |     4| 1.0500| 1.2445|      1.5441|  10.8946| #> |05m_re-rec.wav |     4| 1.0465| 1.2410|      1.5441|  10.8946| #> ... 4 more column(s) (distance, sound.id, reference, spectrum.correlation) and 14 more row(s)  #>  #> * 4 wave object(s) (as attributes): 01m_re-rec.wav 05m_re-rec.wav 10m_re-rec.wav 15m_re-rec.wav #>   #> * A data frame (check.results) generated by check_sels() (as attribute)  #>  #> Additional information: #> * The selection table was created by song (see 'class_extended_selection_table')  #> * 1 sampling rate(s) (in kHz): 44.1  #> * 1 bit depth(s): 8  #> * Created by warbleR < 1.1.21"},{"path":"https://marce10.github.io/baRulho/reference/synth_sounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Create synthetic sounds — synth_sounds","title":"Create synthetic sounds — synth_sounds","text":"synth_sounds create synthetic sounds","code":""},{"path":"https://marce10.github.io/baRulho/reference/synth_sounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create synthetic sounds — synth_sounds","text":"","code":"synth_sounds(replicates = 1, frequencies, durations, nharmonics = 1,  fm = FALSE, am = FALSE, am.amps = rep(c(1:4, 3:2), length.out = 11),  mar = 0.05, seed = NULL, sig2 = 0.3, shuffle = FALSE, hrm.freqs = c(1/2, 1/3, 2/3, 1/4, 3/4, 1/5, 1/6, 1/7, 1/8, 1/9, 1/10), sampling.rate = 44.1)"},{"path":"https://marce10.github.io/baRulho/reference/synth_sounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create synthetic sounds — synth_sounds","text":"replicates Numeric vector length 1 indicating number replicates treatment combination. Default 1. Useful measuring variation transmission parameters. frequencies Numeric vector different frequencies (seconds) synthesize. Brownian bridge motion stochastic process (diff.fun == \"BB\") used simulate frequency modulation (see simulate_songs). durations Numeric vector different durations (seconds) synthesize. nharmonics Numeric vector length 1 specifying number harmonics simulate. 1 indicates fundamental frequency harmonic simulated. fm Logical control frequency modulated sounds pure tones (.e. non-modulated sounds) synthesize. FALSE (default) pure tones synthesized. Logical control amplitude modulated sounds non-modulated sounds synthesize. FALSE (default) non-modulated sounds synthesized. .amps Numeric vector relative amplitude time step simulate amplitude modulation (applied fundamental frequency). default value (rep(c(1:4, 3:2), length.= 11)) 2 amplitude peaks (although applied '= TRUE') mar Numeric vector duration margins silence around sounds seconds. Default 0.05. seed Numeric vector length 1. allows users get results different runs (using set.seed internally). Default NULL. sig2 Numeric vector length 1 defining sigma value brownian motion model (used simulating frequency modulation). Default 0.3. shuffle Logical control position sounds randomized. sounds treatment sequence can problematic environmental noise masks . Hence 'shuffle' useful avoid sounds treatment next . Default FALSE. hrm.freqs Numeric vector frequencies harmonics relative fundamental frequency. default values c(1/2, 1/3, 2/3, 1/4, 3/4, 1/5, 1/6, 1/7, 1/8, 1/9, 1/10). sampling.rate Numeric vector length 1. Sets sampling frequency wave object (kHz). Default 44.1.","code":""},{"path":"https://marce10.github.io/baRulho/reference/synth_sounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create synthetic sounds — synth_sounds","text":"extended selection table, can input master_sound_file create .wav file. table contains columns varying features 'treatment' column (useful tell sound combination features using replicates).","code":""},{"path":"https://marce10.github.io/baRulho/reference/synth_sounds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create synthetic sounds — synth_sounds","text":"function creates synthetic sounds can used playback experiments understand link signal structure transmission properties. function can add variation signal structure 5 features: frequency: continuous, argument 'frequencies'. duration: continuous, argument 'durations'. harmonic structure: binary (harmonics vs -harmonics), arguments 'nharmonics' 'hrm.freqs'. frequency modulation: variation fundamental frequency across time. Binary (modulated vs non-modulated), arguments 'fm' 'sig2'. amplitude modulation: variation amplitude across time. Binary (modulated vs non-modulated), arguments '' '.amps'. Sound possible combinations selected structure dimensions synthesized. output extended selection table, can input master_sound_file create .wav file. functions uses simulate_songs internally synthesizing individual sounds. Brownian bridge motion stochastic process (diff.fun == \"BB\") used simulate frequency modulation. output table contains columns varying features 'treatment' column (useful tell sound combination features using replicates).","code":""},{"path":"https://marce10.github.io/baRulho/reference/synth_sounds.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create synthetic sounds — synth_sounds","text":"Araya-Salas, M., & Smith-Vidaurre, G. (2017). warbleR: R package streamline analysis animal acoustic signals. Methods Ecology Evolution, 8(2), 184-191.","code":""},{"path":[]},{"path":"https://marce10.github.io/baRulho/reference/synth_sounds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create synthetic sounds — synth_sounds","text":"Marcelo Araya-Salas (marcelo.araya@ucr.ac.cr)","code":""},{"path":"https://marce10.github.io/baRulho/reference/synth_sounds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create synthetic sounds — synth_sounds","text":"","code":"if (FALSE) {  synthetic_est <- synth_sounds(   mar = 0.01,   frequencies = c(1, 2, 3, 5),   durations = 0.1,   fm = TRUE,   am = TRUE,   nharmonics = 4,  shuffle = TRUE,   replicates = 3 ) }"},{"path":"https://marce10.github.io/baRulho/reference/tail_to_signal_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure reverberations as tail-to-signal ratio — tail_to_signal_ratio","title":"Measure reverberations as tail-to-signal ratio — tail_to_signal_ratio","text":"tail_to_signal_ratio measures reverberations tail--signal ratio sounds referenced extended selection table.","code":""},{"path":"https://marce10.github.io/baRulho/reference/tail_to_signal_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure reverberations as tail-to-signal ratio — tail_to_signal_ratio","text":"","code":"tail_to_signal_ratio(X, mar, parallel = 1, cores = 1, pb = TRUE,  type = 1, bp = 'freq.range', output = \"est\", hop.size = 1, wl = NULL, ovlp = 0, path = NULL)"},{"path":"https://marce10.github.io/baRulho/reference/tail_to_signal_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure reverberations as tail-to-signal ratio — tail_to_signal_ratio","text":"X Object class 'data.frame', 'selection_table' 'extended_selection_table' (last 2 classes created function selection_table warbleR package) reference sounds master sound file. Must contain following columns: 1) \"sound.files\": name .wav files, 2) \"selec\": unique selection identifier (within sound file), 3) \"start\": start time 4) \"end\": end time selections, 5)  \"bottom.freq\": low frequency bandpass 6) \"top.freq\": high frequency bandpass. mar numeric vector length 1. Specifies margins adjacent start end points selection measure ambient noise. parallel DEPRECATED. Use 'cores' instead. cores Numeric vector length 1. Controls whether parallel computing applied specifying number cores used. Default 1 (.e. parallel computing). pb Logical argument control progress bar shown. Default TRUE. type Numeric. Determine formula used calculate tail--signal ratio (S = signal, T = tail, N = background noise): 1: ratio T amplitude envelope quadratic mean S amplitude envelope quadratic mean  (rms(env(T))/rms(env(S))) described Dabelsteen et al. (1993). 2: ratio T amplitude envelope quadratic mean N amplitude envelope quadratic mean (rms(env(T))/rms(env(N))). N measure margin right sound. type 2 actually measures tail--noise ratio. bp Numeric vector length 2 giving lower upper limits frequency bandpass filter (kHz). Alternatively, set 'freq.range' (default), function use 'bottom.freq' 'top.freq' sound bandpass range. output Character vector length 1 determine extended selection table ('est', default) data frame ('data.frame'). hop.size numeric vector length 1 specifying time window duration (ms). Default 1 ms, equivalent ~45 wl 44.1 kHz sampling rate. Ignored 'wl' supplied. wl numeric vector length 1 specifying window length spectrogram, default NULL. Ignored bp = NULL. supplied, 'hop.size' ignored. Note lower values increase time resolution, important amplitude ratios calculations. ovlp Numeric vector length 1 specifying percent overlap two consecutive windows, spectro. Default 0. used bandpass filtering. path Character string containing directory path sound files found. needed 'X' extended selection table.","code":""},{"path":"https://marce10.github.io/baRulho/reference/tail_to_signal_ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure reverberations as tail-to-signal ratio — tail_to_signal_ratio","text":"Extended selection table similar input data, also includes new column (tail..signal.ratio) tail--signal ratio values.","code":""},{"path":"https://marce10.github.io/baRulho/reference/tail_to_signal_ratio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Measure reverberations as tail-to-signal ratio — tail_to_signal_ratio","text":"Tail--signal ratio (TSR) measures ratio energy tail reverberations energy sound. general margin reverberation tail measured must specified. function measure TSR within supplied frequency range (e.g. bandpass) reference sound ('bottom.freq' 'top.freq' columns 'X'). Two methods calculating reverberations provided (see 'type' argument). Note 'type' 2 equivalent original description TSR Dabelsteen et al. (1993)  better referred tail--noise ratio.","code":""},{"path":"https://marce10.github.io/baRulho/reference/tail_to_signal_ratio.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Measure reverberations as tail-to-signal ratio — tail_to_signal_ratio","text":"Araya-Salas, M. (2020). baRulho: baRulho: quantifying habitat-induced degradation (animal) acoustic signals R. R package version 1.0.2Darden, SK, Pedersen SB, Larsen , & Dabelsteen T. (2008). Sound transmission ground level short-grass prairie habitat implications long-range communication swift fox *Vulpes velox*. Journal Acoustical Society America, 124(2), 758-766.Mathevon, N., Dabelsteen, T., & Blumenrath, S. H. (2005). high perches blackcap Sylvia atricapilla song listening posts? sound transmission study. Journal Acoustical Society America, 117(1), 442-449.","code":""},{"path":[]},{"path":"https://marce10.github.io/baRulho/reference/tail_to_signal_ratio.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Measure reverberations as tail-to-signal ratio — tail_to_signal_ratio","text":"Marcelo Araya-Salas (marcelo.araya@ucr.ac.cr)","code":""},{"path":"https://marce10.github.io/baRulho/reference/tail_to_signal_ratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measure reverberations as tail-to-signal ratio — tail_to_signal_ratio","text":"","code":"{ # load example data data(\"playback_est\")   # remove noise selections  pe <- playback_est[playback_est$sound.id != \"ambient\", ]   # using margin for noise of 0.01  tail_to_signal_ratio(X = pe, mar = 0.01, bp = NULL)   # tail-to-noise ratio (type 2)  tail_to_signal_ratio(X = playback_est, mar = 0.01, type = 2) } #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #>    |                                                  | 0 % ~calculating     |++                                                | 4 % ~00s             |++++                                              | 7 % ~00s             |++++++                                            | 11% ~00s             |++++++++                                          | 14% ~00s             |+++++++++                                         | 18% ~00s             |+++++++++++                                       | 21% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 29% ~00s             |+++++++++++++++++                                 | 32% ~00s             |++++++++++++++++++                                | 36% ~00s             |++++++++++++++++++++                              | 39% ~00s             |++++++++++++++++++++++                            | 43% ~00s             |++++++++++++++++++++++++                          | 46% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |+++++++++++++++++++++++++++                       | 54% ~00s             |+++++++++++++++++++++++++++++                     | 57% ~00s             |+++++++++++++++++++++++++++++++                   | 61% ~00s             |+++++++++++++++++++++++++++++++++                 | 64% ~00s             |++++++++++++++++++++++++++++++++++                | 68% ~00s             |++++++++++++++++++++++++++++++++++++              | 71% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 79% ~00s             |++++++++++++++++++++++++++++++++++++++++++        | 82% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 86% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 89% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++   | 93% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++++ | 96% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Object of class 'extended_selection_table'  #> * The output of the following call:  #> tail_to_signal_ratio(X = playback_est, mar = 0.01, type = 2)  #>  #> Contains:  #> *  A selection table data frame with 28 row(s) and 9 columns:  #> |sound.files    | selec|  start|    end| bottom.freq| top.freq| #> |:--------------|-----:|------:|------:|-----------:|--------:| #> |01m_re-rec.wav |     1| 0.0500| 0.2073|      2.2387|  11.5892| #> |05m_re-rec.wav |     1| 0.0444| 0.2017|      2.2387|  11.5892| #> |10m_re-rec.wav |     1| 0.0421| 0.1993|      2.2387|  11.5892| #> |15m_re-rec.wav |     1| 0.0421| 0.1993|      2.2387|  11.5892| #> |01m_re-rec.wav |     4| 1.0500| 1.2445|      1.5441|  10.8946| #> |05m_re-rec.wav |     4| 1.0465| 1.2410|      1.5441|  10.8946| #> ... 3 more column(s) (distance, sound.id, tail.to.signal.ratio) and 22 more row(s)  #>  #> * 4 wave object(s) (as attributes): 01m_re-rec.wav 05m_re-rec.wav 10m_re-rec.wav 15m_re-rec.wav #>   #> * A data frame (check.results) generated by check_sels() (as attribute)  #>  #> Additional information: #> * The selection table was created by song (see 'class_extended_selection_table')  #> * 1 sampling rate(s) (in kHz): 44.1  #> * 1 bit depth(s): 8  #> * Created by warbleR < 1.1.21"},{"path":"https://marce10.github.io/baRulho/news/index.html","id":"barulho-108","dir":"Changelog","previous_headings":"","what":"baRulho 1.0.8","title":"baRulho 1.0.8","text":"‘parallel’ argument deprecated replaced ‘cores’ New function attenuation() Data frames selection tables can used input data","code":""},{"path":"https://marce10.github.io/baRulho/news/index.html","id":"barulho-107","dir":"Changelog","previous_headings":"","what":"baRulho 1.0.7","title":"baRulho 1.0.7","text":"spectral_correlation(), spcc() spectral_blur_ratio() renamed spectrum_correlation(), spcc_distortion() spectrum_blur_ratio() respectively Fix bug spcc_distortion() excess_attenuation()","code":""},{"path":"https://marce10.github.io/baRulho/news/index.html","id":"barulho-106","dir":"Changelog","previous_headings":"","what":"baRulho 1.0.6","title":"baRulho 1.0.6","text":"CRAN release: 2022-03-01 Update requested CRAN","code":""},{"path":"https://marce10.github.io/baRulho/news/index.html","id":"barulho-105","dir":"Changelog","previous_headings":"","what":"baRulho 1.0.5","title":"baRulho 1.0.5","text":"CRAN release: 2021-04-21 Update requested CRAN","code":""},{"path":"https://marce10.github.io/baRulho/news/index.html","id":"barulho-104","dir":"Changelog","previous_headings":"","what":"baRulho 1.0.4","title":"baRulho 1.0.4","text":"CRAN release: 2021-03-09 warbleR::freq_range_detec() now used internally detect frequency range markers master_sound_file()","code":""},{"path":"https://marce10.github.io/baRulho/news/index.html","id":"barulho-103","dir":"Changelog","previous_headings":"","what":"baRulho 1.0.3","title":"baRulho 1.0.3","text":"CRAN release: 2021-02-11 Update requested CRAN","code":""},{"path":"https://marce10.github.io/baRulho/news/index.html","id":"barulho-103-1","dir":"Changelog","previous_headings":"","what":"baRulho 1.0.3","title":"baRulho 1.0.3","text":"CRAN release: 2021-02-11 New argument ‘marker’ align_test_files() control start end marker used aliging Fix bug detecting several templates per sound file search_templates()","code":""},{"path":"https://marce10.github.io/baRulho/news/index.html","id":"barulho-102","dir":"Changelog","previous_headings":"","what":"baRulho 1.0.2","title":"baRulho 1.0.2","text":"CRAN release: 2020-06-07 Windows length converted even functions Fix sign error signal amplitude measurements (signal_to_noise_ratio() excess_attenuation()) New function noise_profile() rename snr() signal_to_noise_ratio() New function tail_to_signal_ratio() measure reverberations Fix bug excess_attenuation() method = 1 Added type argument excess_attenuation() run “Darden” version excess attenuation","code":""},{"path":"https://marce10.github.io/baRulho/news/index.html","id":"barulho-101","dir":"Changelog","previous_headings":"","what":"baRulho 1.0.1","title":"baRulho 1.0.1","text":"CRAN release: 2020-03-09 New function search_templates() find signals re-recorded sound files New function align_test_files() set time signals aligned re-recorded files Parallel available internal prep_X_bRlo_int() function Data frame also returned functions","code":""},{"path":"https://marce10.github.io/baRulho/news/index.html","id":"barulho-100","dir":"Changelog","previous_headings":"","what":"baRulho 1.0.0","title":"baRulho 1.0.0","text":"CRAN release: 2020-02-22 First release","code":""}]
