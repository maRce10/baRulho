snr
snr > target.snr
# reset time coordinates of sounds if lower than 0 o higher than duration
stn <- X$start[x] - mar
enn <- X$end[x] + mar
mar1 <- mar
if (stn < 0) {
mar1 <- mar1 + stn
stn <- 0
}
# get sampling rate
r <-
warbleR::read_sound_file(
X = X,
index = x,
path = NULL,
header = TRUE
)
r
74972/ 22050
attributes(X_x)$wave.objects[[1]]
# extract selection as single extended selection table
X_x <- X[x, ]
X_x
attributes(X_x)$wave.objects[[1]]
# normalize wave object
attributes(X_x)$wave.objects[[1]] <-
normalize(attributes(X_x)$wave.objects[[1]], unit = "1")
attributes(X_x)$wave.objects[[1]]
# get sampling rate
r <-
warbleR::read_sound_file(
X = X_x,
index = 1,
path = NULL,
header = TRUE
)
r
# get sampling rate
r <-
warbleR::read_sound_file(
X = X_x,
index = 1,
path = NULL,
header = TRUE
)
r
74972/ 22050
attributes(X_x)$wave.objects[[1]]
attributes(X)$wave.objects[[1]]
warbleR::read_sound_file(
X = X_x,
index = 1,
path = NULL,
header = TRUE
)
warbleR::read_sound_file(
X = X,
index = 1,
path = NULL,
header = TRUE
)
source("~/Dropbox/R_package_testing/warbleR/R/by_element_est.R")
source("~/Dropbox/R_package_testing/warbleR/R/internal_functions.R")
X <- by_element_est(X = test_sounds_est)
X
X <- signal_to_noise_ratio(X, mar = 0.05)
add_noise(X = X2, target.snr = 3, cores = 1, precision = 0.1, mar = 0.05)
X = X2
# extract selection as single extended selection table
X_x <- X[x, ]
X_x
attributes(X_x)$wave.objects[[1]]
attributes(X)$wave.objects[[1]]
warbleR::read_sound_file(
X = X,
index = x,
from = stn,
to = enn,
path = NULL
)
x
X = X2
x
# extract selection as single extended selection table
X_x <- X[x, ]
X_x
attributes(X)$wave.objects[[1]]
attributes(X_x)$wave.objects[[1]]
warbleR::read_sound_file(
X = X_x,
index = 1,
path = NULL,
header = TRUE
)
warbleR::read_sound_file(
X = X,
index = 1,
path = NULL,
header = TRUE
)
source("~/Dropbox/R_package_testing/warbleR/R/by_element_est.R")
X <- by_element_est(X = test_sounds_est)
source("~/Dropbox/R_package_testing/warbleR/R/by_element_est.R")
X <- by_element_est(X = test_sounds_est)
data(tico)
tico@bit
attributes(lbh.est)
attributes(lbh.est)$check.res
tico@bit
source("~/Dropbox/R_package_testing/warbleR/R/by_element_est.R")
X <- by_element_est(X = test_sounds_est)
add_noise(X, mar = 0.2, target.snr = 3, cores = 4)$adjusted.snr
add_noise(X = X2, target.snr = 3, cores = 1, precision = 0.1, mar = 0.05)
source("~/Dropbox/R_package_testing/warbleR/R/by_element_est.R")
source("~/Dropbox/R_package_testing/warbleR/R/by_element_est.R")
source("~/Dropbox/R_package_testing/warbleR/R/by_element_est.R")
add_noise(X = X2, target.snr = 3, cores = 1, precision = 0.1, mar = 0.05)
X <- by_element_est(X = test_sounds_est)
add_noise(X, mar = 0.2, target.snr = 3, cores = 4)$adjusted.snr
X <- signal_to_noise_ratio(X, mar = 0.05)
X2 <- X[X$signal.to.noise.ratio > 5 & !is.na(X$signal.to.noise.ratio), ]
add_noise(X = X2, target.snr = 3, cores = 1, precision = 0.1, mar = 0.05)
add_noise(X = X2, target.snr = 3, cores = 1, precision = 0.1, mar = 0.05)
add_noise(X = X, target.snr = 3, cores = 1, precision = 0.1, mar = 0.05)
X
X = X2
# extract selection as single extended selection table
X_x <- X[x, ]
# normalize wave object
attributes(X_x)$wave.objects[[1]] <-
normalize(attributes(X_x)$wave.objects[[1]], unit = "1")
# estimate current snr
snr <-
signal_to_noise_ratio(X_x, mar = mar, pb = FALSE)$signal.to.noise.ratio
if (snr > target.snr) {
# reset time coordinates of sounds if lower than 0 o higher than duration
stn <- X$start[x] - mar
enn <- X$end[x] + mar
mar1 <- mar
if (stn < 0) {
mar1 <- mar1 + stn
stn <- 0
}
# get sampling rate
r <-
warbleR::read_sound_file(
X = X_x,
index = 1,
path = NULL,
header = TRUE
)
# fix end position if larger than sound file length
if (enn > r$samples / r$sample.rate) {
enn <- r$samples / r$sample.rate
}
# read sound and margin
wav <-
warbleR::read_sound_file(
X = X,
index = x,
from = stn,
to = enn,
path = NULL
)
# start point for adding noise (a 1/10 of signal amplitude)
prop_noise <- 0.1
prop_noise_vector <- vector()
snr_vector <- vector()
while (all(snr > target.snr + precision |
snr < target.snr - precision) &
length(prop_noise_vector) < max.iterations) {
noise_wav <-
runif(length(wav@left),
min = -1 * prop_noise,
max = prop_noise)
attributes(X_x)$wave.objects[[1]] <- wav + noise_wav
snr <-
signal_to_noise_ratio(X = X_x, mar = mar, pb = FALSE)$signal.to.noise.ratio
prop_noise_vector[length(prop_noise_vector) + 1] <- prop_noise
snr_vector[length(snr_vector) + 1] <- snr
# increase constant to modify noise level when output snr higher than target
if (snr > target.snr + precision)
prop_noise <- prop_noise * 1.09
# decrease constant to modify noise level when output snr lower than target
if (snr < target.snr - precision)
prop_noise / 1.09
}
# adjust SNR using best SNR
prop_noise <-
prop_noise_vector[which.min(abs(snr_vector - target.snr))]
attributes(X_x)$wave.objects[[1]] <-
runif(length(wav@left),
min = -1 * prop_noise,
max = prop_noise)
snr <- snr_vector[which.min(abs(snr_vector - target.snr))]
modified <- TRUE
} else
modified <- FALSE
warbleR::read_sound_file(
X = X_x,
index = 1,
path = NULL,
header = TRUE
)
8820/ 22050
warbleR::read_sound_file(
X = X,
index = x,
path = NULL,
header = TRUE
)
# fix end position if larger than sound file length
if (enn > r$samples / r$sample.rate) {
enn <- r$samples / r$sample.rate
}
# read sound and margin
wav <-
warbleR::read_sound_file(
X = X,
index = x,
from = stn,
to = enn,
path = NULL
)
wav
X
# read sound and margin
wav <-
warbleR::read_sound_file(
X = X,
index = x,
from = stn,
to = enn,
path = NULL
)
# start point for adding noise (a 1/10 of signal amplitude)
prop_noise <- 0.1
prop_noise_vector <- vector()
snr_vector <- vector()
while (all(snr > target.snr + precision |
snr < target.snr - precision) &
length(prop_noise_vector) < max.iterations) {
noise_wav <-
runif(length(wav@left),
min = -1 * prop_noise,
max = prop_noise)
attributes(X_x)$wave.objects[[1]] <- wav + noise_wav
snr <-
signal_to_noise_ratio(X = X_x, mar = mar, pb = FALSE)$signal.to.noise.ratio
prop_noise_vector[length(prop_noise_vector) + 1] <- prop_noise
snr_vector[length(snr_vector) + 1] <- snr
# increase constant to modify noise level when output snr higher than target
if (snr > target.snr + precision)
prop_noise <- prop_noise * 1.09
# decrease constant to modify noise level when output snr lower than target
if (snr < target.snr - precision)
prop_noise / 1.09
}
X_x
mar
# read sound and margin
wav <-
warbleR::read_sound_file(
X = X_x,
index = 1,
from = stn,
to = enn,
path = NULL
)
wav
# estimate current snr
snr <-
signal_to_noise_ratio(X_x, mar = mar, pb = FALSE)$signal.to.noise.ratio
# extract selection as single extended selection table
X_x <- X[x, ]
# normalize wave object
attributes(X_x)$wave.objects[[1]] <-
normalize(attributes(X_x)$wave.objects[[1]], unit = "1")
# estimate current snr
snr <-
signal_to_noise_ratio(X_x, mar = mar, pb = FALSE)$signal.to.noise.ratio
# reset time coordinates of sounds if lower than 0 o higher than duration
stn <- X$start[x] - mar
enn <- X$end[x] + mar
mar1 <- mar
if (stn < 0) {
mar1 <- mar1 + stn
stn <- 0
}
# get sampling rate
r <-
warbleR::read_sound_file(
X = X,
index = x,
path = NULL,
header = TRUE
)
r
# read sound and margin
wav <-
warbleR::read_sound_file(
X = X_x,
index = 1,
from = stn,
to = enn,
path = NULL
)
wav
stn
enn
# read sound and margin
wav <-
warbleR::read_sound_file(
X = X_x,
index = 1,
path = NULL
)
wav
wav
# read sound and margin
wav <-
warbleR::read_sound_file(
X = X_x,
index = 1,
from = stn,
to = X_x$end[1],
path = NULL
)
wav
# start point for adding noise (a 1/10 of signal amplitude)
prop_noise <- 0.1
prop_noise_vector <- vector()
snr_vector <- vector()
noise_wav <-
runif(length(wav@left),
min = -1 * prop_noise,
max = prop_noise)
attributes(X_x)$wave.objects[[1]] <- wav + noise_wav
wav
snr <-
signal_to_noise_ratio(X = X_x, mar = mar, pb = FALSE)$signal.to.noise.ratio
X_x
mar
signal_to_noise_ratio(X = X_x, mar = mar, pb = FALSE)
X = X_x
noise.ref = "adjacent"
type = 1
hop.size = getOption("hop.size", 1)
wl = getOption("wl", NULL)
ovlp = getOption("ovlp", 0)
path = getOption("sound.files.path", ".")
y = 1
# read sound clip
signal <-
warbleR::read_sound_file(X = X,
index = y,
path = path)
signal
X
warbleR::read_sound_file(X = X,
index = y
)
X
attributes(X_x)$wave.objects[[1]]
attributes(X)$wave.objects[[1]]
X
source("~/Dropbox/R_package_testing/baRulho/testing/beta_functions/add_noise.R")
add_noise(X = X2, target.snr = 3, cores = 1, precision = 0.1, mar = 0.05)
add_noise(X = X2, target.snr = 3, cores = 10, precision = 0.1, mar = 0.05)
add_noise(X = X2, target.snr = 3, cores = 4, precision = 0.1, mar = 0.05)
source("~/Dropbox/R_package_testing/baRulho/testing/beta_functions/add_noise.R")
add_noise(X = X2, target.snr = 3, cores = 4, precision = 0.1, mar = 0.05)
source("~/Dropbox/R_package_testing/baRulho/testing/beta_functions/add_noise.R")
add_noise(X = X2, target.snr = 3, cores = 4, precision = 0.1, mar = 0.05)
add_noise(X = X2, target.snr = 3, cores = 4, precision = 0.1, mar = 0.1)
source("~/Dropbox/R_package_testing/baRulho/testing/beta_functions/add_noise.R")
source("~/Dropbox/R_package_testing/baRulho/testing/beta_functions/add_noise.R")
add_noise(X = X2, target.snr = 3, cores = 4, precision = 0.1, mar = 0.1)
source("~/Dropbox/R_package_testing/baRulho/testing/beta_functions/add_noise.R")
add_noise(X = X2, target.snr = 3, cores = 4, precision = 0.1, mar = 0.1)
source("~/Dropbox/R_package_testing/baRulho/testing/beta_functions/add_noise.R")
add_noise(X = X2, target.snr = 3, cores = 4, precision = 0.1, mar = 0.1)
1 - (25/3)
25 / 3
3/ 25
3/ 10
1- (target.snr / snr)
1- (3 / 25)
1- (3 / 15)
1- (3 / 10)
1- (3 / 5)
1- (3 / 5)^2
1- (3 / 25)^2
1- (3 / 15)^2
1- (3^2 / 15)
1- (3^2 / 25)
1- (3^4 / 25)
1- (3^3 / 25)
1- (3^2 / 25)
1- (3 / 15)
1- (3 / 25)
2- (3 / 25)
1- (3 / 25)
(3 / 25)
(3 / 15)
an <- add_noise(X = X2, target.snr = 3, cores = 4, precision = 0.1, mar = 0.1)
# styler::style_dir("./R")
# devtools::test()
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
urlchecker::url_check()
pkgdown::preview_page()
pkgdown::preview_site()
# styler::style_dir("./R")
# devtools::test()
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
urlchecker::url_check()
pkgdown::preview_site()
# codemetar::write_codemeta()
# usethis::use_github_action_check_standard()
summary(pkgcheck::pkgcheck("."))
styler::style_dir("./R")
styler::style_dir("./R")
# devtools::test()
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
urlchecker::url_check()
styler::style_dir("./R")
# devtools::test()
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
urlchecker::url_check()
source("~/Dropbox/R_package_testing/baRulho/R/add_noise.R")
source("~/Dropbox/R_package_testing/baRulho/R/add_noise.R")
styler::style_dir("./R")
# styler::style_dir("./R")
# devtools::test()
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
urlchecker::url_check()
spch <- devtools::spell_check(".")
spch$word[grep("baRulho", spch$found)]
spch
# styler::style_dir("./R")
# devtools::test()
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
urlchecker::url_check()
install()
tic::after_deploy()
tic::use_ghactions_deploy()
usethis::browse_github_token()
create_github_token()
gitcreds::gitcreds_set()
tic::use_ghactions_deploy()
install.packages("sodium")
install.packages("sodium")
tic::use_ghactions_deploy()
# styler::style_dir("./R")
# devtools::test()
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
urlchecker::url_check()
devtools::build()
devtools::test()
# styler::style_dir("./R")
# devtools::test()
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE, vignettes = F)
urlchecker::url_check()
